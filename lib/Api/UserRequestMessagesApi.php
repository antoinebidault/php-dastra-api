<?php
/**
 * UserRequestMessagesApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dastra API
 *
 * Dastra's public REST API
 *
 * The version of the OpenAPI document: v1
 * Contact: antoine.bidault@dastra.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * UserRequestMessagesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UserRequestMessagesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation userRequestMessagesCreate
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  string $message message (required)
     * @param  \SplFileObject[] $files files (optional)
     * @param  int $user_request_id user_request_id (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function userRequestMessagesCreate($tenant_id, $workspace_id, $message, $files = null, $user_request_id = null)
    {
        $this->userRequestMessagesCreateWithHttpInfo($tenant_id, $workspace_id, $message, $files, $user_request_id);
    }

    /**
     * Operation userRequestMessagesCreateWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $message (required)
     * @param  \SplFileObject[] $files (optional)
     * @param  int $user_request_id (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userRequestMessagesCreateWithHttpInfo($tenant_id, $workspace_id, $message, $files = null, $user_request_id = null)
    {
        $request = $this->userRequestMessagesCreateRequest($tenant_id, $workspace_id, $message, $files, $user_request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation userRequestMessagesCreateAsync
     *
     * 
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $message (required)
     * @param  \SplFileObject[] $files (optional)
     * @param  int $user_request_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRequestMessagesCreateAsync($tenant_id, $workspace_id, $message, $files = null, $user_request_id = null)
    {
        return $this->userRequestMessagesCreateAsyncWithHttpInfo($tenant_id, $workspace_id, $message, $files, $user_request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userRequestMessagesCreateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $message (required)
     * @param  \SplFileObject[] $files (optional)
     * @param  int $user_request_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRequestMessagesCreateAsyncWithHttpInfo($tenant_id, $workspace_id, $message, $files = null, $user_request_id = null)
    {
        $returnType = '';
        $request = $this->userRequestMessagesCreateRequest($tenant_id, $workspace_id, $message, $files, $user_request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userRequestMessagesCreate'
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $message (required)
     * @param  \SplFileObject[] $files (optional)
     * @param  int $user_request_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userRequestMessagesCreateRequest($tenant_id, $workspace_id, $message, $files = null, $user_request_id = null)
    {
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling userRequestMessagesCreate'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling userRequestMessagesCreate'
            );
        }
        // verify the required parameter 'message' is set
        if ($message === null || (is_array($message) && count($message) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message when calling userRequestMessagesCreate'
            );
        }
        if (strlen($message) > 3000) {
            throw new \InvalidArgumentException('invalid length for "$message" when calling UserRequestMessagesApi.userRequestMessagesCreate, must be smaller than or equal to 3000.');
        }


        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/UserRequestMessages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }

        // form params
        if ($files !== null) {
            $multipart = true;
            $formParams['Files'] = [];
            $paramFiles = is_array($files) ? $files : [$files];
            foreach ($paramFiles as $paramFile) {
                $formParams['Files'][] = \GuzzleHttp\Psr7\try_fopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($message !== null) {
            $formParams['Message'] = ObjectSerializer::toFormValue($message);
        }
        // form params
        if ($user_request_id !== null) {
            $formParams['UserRequestId'] = ObjectSerializer::toFormValue($user_request_id);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userRequestMessagesDelete
     *
     * Delete customer request
     *
     * @param  string $id id (required)
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function userRequestMessagesDelete($id, $tenant_id, $workspace_id)
    {
        $this->userRequestMessagesDeleteWithHttpInfo($id, $tenant_id, $workspace_id);
    }

    /**
     * Operation userRequestMessagesDeleteWithHttpInfo
     *
     * Delete customer request
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userRequestMessagesDeleteWithHttpInfo($id, $tenant_id, $workspace_id)
    {
        $request = $this->userRequestMessagesDeleteRequest($id, $tenant_id, $workspace_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation userRequestMessagesDeleteAsync
     *
     * Delete customer request
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRequestMessagesDeleteAsync($id, $tenant_id, $workspace_id)
    {
        return $this->userRequestMessagesDeleteAsyncWithHttpInfo($id, $tenant_id, $workspace_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userRequestMessagesDeleteAsyncWithHttpInfo
     *
     * Delete customer request
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRequestMessagesDeleteAsyncWithHttpInfo($id, $tenant_id, $workspace_id)
    {
        $returnType = '';
        $request = $this->userRequestMessagesDeleteRequest($id, $tenant_id, $workspace_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userRequestMessagesDelete'
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userRequestMessagesDeleteRequest($id, $tenant_id, $workspace_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling userRequestMessagesDelete'
            );
        }
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling userRequestMessagesDelete'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling userRequestMessagesDelete'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/UserRequestMessages/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userRequestMessagesDeleteAttachment
     *
     * Remove attachment linked to the request
     *
     * @param  string $id id (required)
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function userRequestMessagesDeleteAttachment($id, $tenant_id, $workspace_id)
    {
        $this->userRequestMessagesDeleteAttachmentWithHttpInfo($id, $tenant_id, $workspace_id);
    }

    /**
     * Operation userRequestMessagesDeleteAttachmentWithHttpInfo
     *
     * Remove attachment linked to the request
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userRequestMessagesDeleteAttachmentWithHttpInfo($id, $tenant_id, $workspace_id)
    {
        $request = $this->userRequestMessagesDeleteAttachmentRequest($id, $tenant_id, $workspace_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation userRequestMessagesDeleteAttachmentAsync
     *
     * Remove attachment linked to the request
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRequestMessagesDeleteAttachmentAsync($id, $tenant_id, $workspace_id)
    {
        return $this->userRequestMessagesDeleteAttachmentAsyncWithHttpInfo($id, $tenant_id, $workspace_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userRequestMessagesDeleteAttachmentAsyncWithHttpInfo
     *
     * Remove attachment linked to the request
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRequestMessagesDeleteAttachmentAsyncWithHttpInfo($id, $tenant_id, $workspace_id)
    {
        $returnType = '';
        $request = $this->userRequestMessagesDeleteAttachmentRequest($id, $tenant_id, $workspace_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userRequestMessagesDeleteAttachment'
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userRequestMessagesDeleteAttachmentRequest($id, $tenant_id, $workspace_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling userRequestMessagesDeleteAttachment'
            );
        }
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling userRequestMessagesDeleteAttachment'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling userRequestMessagesDeleteAttachment'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/UserRequestMessages/attachments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userRequestMessagesDownloadFile
     *
     * Simple doc upload
     *
     * @param  string $id id (required)
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  bool $save_as save_as (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function userRequestMessagesDownloadFile($id, $tenant_id, $workspace_id, $save_as = false)
    {
        $this->userRequestMessagesDownloadFileWithHttpInfo($id, $tenant_id, $workspace_id, $save_as);
    }

    /**
     * Operation userRequestMessagesDownloadFileWithHttpInfo
     *
     * Simple doc upload
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  bool $save_as (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userRequestMessagesDownloadFileWithHttpInfo($id, $tenant_id, $workspace_id, $save_as = false)
    {
        $request = $this->userRequestMessagesDownloadFileRequest($id, $tenant_id, $workspace_id, $save_as);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation userRequestMessagesDownloadFileAsync
     *
     * Simple doc upload
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  bool $save_as (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRequestMessagesDownloadFileAsync($id, $tenant_id, $workspace_id, $save_as = false)
    {
        return $this->userRequestMessagesDownloadFileAsyncWithHttpInfo($id, $tenant_id, $workspace_id, $save_as)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userRequestMessagesDownloadFileAsyncWithHttpInfo
     *
     * Simple doc upload
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  bool $save_as (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRequestMessagesDownloadFileAsyncWithHttpInfo($id, $tenant_id, $workspace_id, $save_as = false)
    {
        $returnType = '';
        $request = $this->userRequestMessagesDownloadFileRequest($id, $tenant_id, $workspace_id, $save_as);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userRequestMessagesDownloadFile'
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  bool $save_as (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userRequestMessagesDownloadFileRequest($id, $tenant_id, $workspace_id, $save_as = false)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling userRequestMessagesDownloadFile'
            );
        }
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling userRequestMessagesDownloadFile'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling userRequestMessagesDownloadFile'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/UserRequestMessages/download/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($save_as !== null) {
            if('form' === 'form' && is_array($save_as)) {
                foreach($save_as as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['saveAs'] = $save_as;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userRequestMessagesFind
     *
     * @param  string $id id (required)
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function userRequestMessagesFind($id, $tenant_id, $workspace_id)
    {
        $this->userRequestMessagesFindWithHttpInfo($id, $tenant_id, $workspace_id);
    }

    /**
     * Operation userRequestMessagesFindWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userRequestMessagesFindWithHttpInfo($id, $tenant_id, $workspace_id)
    {
        $request = $this->userRequestMessagesFindRequest($id, $tenant_id, $workspace_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation userRequestMessagesFindAsync
     *
     * 
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRequestMessagesFindAsync($id, $tenant_id, $workspace_id)
    {
        return $this->userRequestMessagesFindAsyncWithHttpInfo($id, $tenant_id, $workspace_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userRequestMessagesFindAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRequestMessagesFindAsyncWithHttpInfo($id, $tenant_id, $workspace_id)
    {
        $returnType = '';
        $request = $this->userRequestMessagesFindRequest($id, $tenant_id, $workspace_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userRequestMessagesFind'
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userRequestMessagesFindRequest($id, $tenant_id, $workspace_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling userRequestMessagesFind'
            );
        }
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling userRequestMessagesFind'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling userRequestMessagesFind'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/UserRequestMessages/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userRequestMessagesList
     *
     * Customer request
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  int $page page (optional)
     * @param  int $size size (optional)
     * @param  int $skip skip (optional)
     * @param  string $sort_by sort_by (optional)
     * @param  bool $asc asc (optional)
     * @param  int $user_request_id user_request_id (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $user_id Specific userId (optional) (optional)
     * @param  string $q q (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function userRequestMessagesList($tenant_id, $workspace_id, $page = null, $size = null, $skip = null, $sort_by = null, $asc = null, $user_request_id = null, $start = null, $end = null, $user_id = null, $q = null)
    {
        $this->userRequestMessagesListWithHttpInfo($tenant_id, $workspace_id, $page, $size, $skip, $sort_by, $asc, $user_request_id, $start, $end, $user_id, $q);
    }

    /**
     * Operation userRequestMessagesListWithHttpInfo
     *
     * Customer request
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  int $page (optional)
     * @param  int $size (optional)
     * @param  int $skip (optional)
     * @param  string $sort_by (optional)
     * @param  bool $asc (optional)
     * @param  int $user_request_id (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $user_id Specific userId (optional) (optional)
     * @param  string $q (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userRequestMessagesListWithHttpInfo($tenant_id, $workspace_id, $page = null, $size = null, $skip = null, $sort_by = null, $asc = null, $user_request_id = null, $start = null, $end = null, $user_id = null, $q = null)
    {
        $request = $this->userRequestMessagesListRequest($tenant_id, $workspace_id, $page, $size, $skip, $sort_by, $asc, $user_request_id, $start, $end, $user_id, $q);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation userRequestMessagesListAsync
     *
     * Customer request
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  int $page (optional)
     * @param  int $size (optional)
     * @param  int $skip (optional)
     * @param  string $sort_by (optional)
     * @param  bool $asc (optional)
     * @param  int $user_request_id (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $user_id Specific userId (optional) (optional)
     * @param  string $q (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRequestMessagesListAsync($tenant_id, $workspace_id, $page = null, $size = null, $skip = null, $sort_by = null, $asc = null, $user_request_id = null, $start = null, $end = null, $user_id = null, $q = null)
    {
        return $this->userRequestMessagesListAsyncWithHttpInfo($tenant_id, $workspace_id, $page, $size, $skip, $sort_by, $asc, $user_request_id, $start, $end, $user_id, $q)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userRequestMessagesListAsyncWithHttpInfo
     *
     * Customer request
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  int $page (optional)
     * @param  int $size (optional)
     * @param  int $skip (optional)
     * @param  string $sort_by (optional)
     * @param  bool $asc (optional)
     * @param  int $user_request_id (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $user_id Specific userId (optional) (optional)
     * @param  string $q (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRequestMessagesListAsyncWithHttpInfo($tenant_id, $workspace_id, $page = null, $size = null, $skip = null, $sort_by = null, $asc = null, $user_request_id = null, $start = null, $end = null, $user_id = null, $q = null)
    {
        $returnType = '';
        $request = $this->userRequestMessagesListRequest($tenant_id, $workspace_id, $page, $size, $skip, $sort_by, $asc, $user_request_id, $start, $end, $user_id, $q);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userRequestMessagesList'
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  int $page (optional)
     * @param  int $size (optional)
     * @param  int $skip (optional)
     * @param  string $sort_by (optional)
     * @param  bool $asc (optional)
     * @param  int $user_request_id (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $user_id Specific userId (optional) (optional)
     * @param  string $q (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userRequestMessagesListRequest($tenant_id, $workspace_id, $page = null, $size = null, $skip = null, $sort_by = null, $asc = null, $user_request_id = null, $start = null, $end = null, $user_id = null, $q = null)
    {
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling userRequestMessagesList'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling userRequestMessagesList'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/UserRequestMessages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($size !== null) {
            if('form' === 'form' && is_array($size)) {
                foreach($size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['size'] = $size;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['skip'] = $skip;
            }
        }
        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortBy'] = $sort_by;
            }
        }
        // query params
        if ($asc !== null) {
            if('form' === 'form' && is_array($asc)) {
                foreach($asc as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['asc'] = $asc;
            }
        }
        // query params
        if ($user_request_id !== null) {
            if('form' === 'form' && is_array($user_request_id)) {
                foreach($user_request_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userRequestId'] = $user_request_id;
            }
        }
        // query params
        if ($start !== null) {
            if('form' === 'form' && is_array($start)) {
                foreach($start as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start'] = $start;
            }
        }
        // query params
        if ($end !== null) {
            if('form' === 'form' && is_array($end)) {
                foreach($end as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['end'] = $end;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }
        // query params
        if ($q !== null) {
            if('form' === 'form' && is_array($q)) {
                foreach($q as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['q'] = $q;
            }
        }


        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userRequestMessagesUpdate
     *
     * Edit a user request
     *
     * @param  string $id id (required)
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  string $message message (required)
     * @param  string $id2 id2 (optional)
     * @param  \SplFileObject[] $files files (optional)
     * @param  \DateTime $date_update date_update (optional)
     * @param  \DateTime $date_creation date_creation (optional)
     * @param  \DateTime $date_send date_send (optional)
     * @param  \DateTime $date_viewed date_viewed (optional)
     * @param  int $user_id user_id (optional)
     * @param  string $user_family_name user_family_name (optional)
     * @param  string $user_given_name user_given_name (optional)
     * @param  string $user_color user_color (optional)
     * @param  string $user_display_name user_display_name (optional)
     * @param  string $user_company_name user_company_name (optional)
     * @param  string $user_avatar_url user_avatar_url (optional)
     * @param  int $user_tenant_id user_tenant_id (optional)
     * @param  int $user_request_id user_request_id (optional)
     * @param  int $attachments_lifetime_in_hours Secured attachment lifetime for client  Default : 7 days (optional)
     * @param  \OpenAPI\Client\Model\UserRequestAttachmentDto[] $attachments attachments (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function userRequestMessagesUpdate($id, $tenant_id, $workspace_id, $message, $id2 = null, $files = null, $date_update = null, $date_creation = null, $date_send = null, $date_viewed = null, $user_id = null, $user_family_name = null, $user_given_name = null, $user_color = null, $user_display_name = null, $user_company_name = null, $user_avatar_url = null, $user_tenant_id = null, $user_request_id = null, $attachments_lifetime_in_hours = null, $attachments = null)
    {
        $this->userRequestMessagesUpdateWithHttpInfo($id, $tenant_id, $workspace_id, $message, $id2, $files, $date_update, $date_creation, $date_send, $date_viewed, $user_id, $user_family_name, $user_given_name, $user_color, $user_display_name, $user_company_name, $user_avatar_url, $user_tenant_id, $user_request_id, $attachments_lifetime_in_hours, $attachments);
    }

    /**
     * Operation userRequestMessagesUpdateWithHttpInfo
     *
     * Edit a user request
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $message (required)
     * @param  string $id2 (optional)
     * @param  \SplFileObject[] $files (optional)
     * @param  \DateTime $date_update (optional)
     * @param  \DateTime $date_creation (optional)
     * @param  \DateTime $date_send (optional)
     * @param  \DateTime $date_viewed (optional)
     * @param  int $user_id (optional)
     * @param  string $user_family_name (optional)
     * @param  string $user_given_name (optional)
     * @param  string $user_color (optional)
     * @param  string $user_display_name (optional)
     * @param  string $user_company_name (optional)
     * @param  string $user_avatar_url (optional)
     * @param  int $user_tenant_id (optional)
     * @param  int $user_request_id (optional)
     * @param  int $attachments_lifetime_in_hours Secured attachment lifetime for client  Default : 7 days (optional)
     * @param  \OpenAPI\Client\Model\UserRequestAttachmentDto[] $attachments (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userRequestMessagesUpdateWithHttpInfo($id, $tenant_id, $workspace_id, $message, $id2 = null, $files = null, $date_update = null, $date_creation = null, $date_send = null, $date_viewed = null, $user_id = null, $user_family_name = null, $user_given_name = null, $user_color = null, $user_display_name = null, $user_company_name = null, $user_avatar_url = null, $user_tenant_id = null, $user_request_id = null, $attachments_lifetime_in_hours = null, $attachments = null)
    {
        $request = $this->userRequestMessagesUpdateRequest($id, $tenant_id, $workspace_id, $message, $id2, $files, $date_update, $date_creation, $date_send, $date_viewed, $user_id, $user_family_name, $user_given_name, $user_color, $user_display_name, $user_company_name, $user_avatar_url, $user_tenant_id, $user_request_id, $attachments_lifetime_in_hours, $attachments);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation userRequestMessagesUpdateAsync
     *
     * Edit a user request
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $message (required)
     * @param  string $id2 (optional)
     * @param  \SplFileObject[] $files (optional)
     * @param  \DateTime $date_update (optional)
     * @param  \DateTime $date_creation (optional)
     * @param  \DateTime $date_send (optional)
     * @param  \DateTime $date_viewed (optional)
     * @param  int $user_id (optional)
     * @param  string $user_family_name (optional)
     * @param  string $user_given_name (optional)
     * @param  string $user_color (optional)
     * @param  string $user_display_name (optional)
     * @param  string $user_company_name (optional)
     * @param  string $user_avatar_url (optional)
     * @param  int $user_tenant_id (optional)
     * @param  int $user_request_id (optional)
     * @param  int $attachments_lifetime_in_hours Secured attachment lifetime for client  Default : 7 days (optional)
     * @param  \OpenAPI\Client\Model\UserRequestAttachmentDto[] $attachments (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRequestMessagesUpdateAsync($id, $tenant_id, $workspace_id, $message, $id2 = null, $files = null, $date_update = null, $date_creation = null, $date_send = null, $date_viewed = null, $user_id = null, $user_family_name = null, $user_given_name = null, $user_color = null, $user_display_name = null, $user_company_name = null, $user_avatar_url = null, $user_tenant_id = null, $user_request_id = null, $attachments_lifetime_in_hours = null, $attachments = null)
    {
        return $this->userRequestMessagesUpdateAsyncWithHttpInfo($id, $tenant_id, $workspace_id, $message, $id2, $files, $date_update, $date_creation, $date_send, $date_viewed, $user_id, $user_family_name, $user_given_name, $user_color, $user_display_name, $user_company_name, $user_avatar_url, $user_tenant_id, $user_request_id, $attachments_lifetime_in_hours, $attachments)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userRequestMessagesUpdateAsyncWithHttpInfo
     *
     * Edit a user request
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $message (required)
     * @param  string $id2 (optional)
     * @param  \SplFileObject[] $files (optional)
     * @param  \DateTime $date_update (optional)
     * @param  \DateTime $date_creation (optional)
     * @param  \DateTime $date_send (optional)
     * @param  \DateTime $date_viewed (optional)
     * @param  int $user_id (optional)
     * @param  string $user_family_name (optional)
     * @param  string $user_given_name (optional)
     * @param  string $user_color (optional)
     * @param  string $user_display_name (optional)
     * @param  string $user_company_name (optional)
     * @param  string $user_avatar_url (optional)
     * @param  int $user_tenant_id (optional)
     * @param  int $user_request_id (optional)
     * @param  int $attachments_lifetime_in_hours Secured attachment lifetime for client  Default : 7 days (optional)
     * @param  \OpenAPI\Client\Model\UserRequestAttachmentDto[] $attachments (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRequestMessagesUpdateAsyncWithHttpInfo($id, $tenant_id, $workspace_id, $message, $id2 = null, $files = null, $date_update = null, $date_creation = null, $date_send = null, $date_viewed = null, $user_id = null, $user_family_name = null, $user_given_name = null, $user_color = null, $user_display_name = null, $user_company_name = null, $user_avatar_url = null, $user_tenant_id = null, $user_request_id = null, $attachments_lifetime_in_hours = null, $attachments = null)
    {
        $returnType = '';
        $request = $this->userRequestMessagesUpdateRequest($id, $tenant_id, $workspace_id, $message, $id2, $files, $date_update, $date_creation, $date_send, $date_viewed, $user_id, $user_family_name, $user_given_name, $user_color, $user_display_name, $user_company_name, $user_avatar_url, $user_tenant_id, $user_request_id, $attachments_lifetime_in_hours, $attachments);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userRequestMessagesUpdate'
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $message (required)
     * @param  string $id2 (optional)
     * @param  \SplFileObject[] $files (optional)
     * @param  \DateTime $date_update (optional)
     * @param  \DateTime $date_creation (optional)
     * @param  \DateTime $date_send (optional)
     * @param  \DateTime $date_viewed (optional)
     * @param  int $user_id (optional)
     * @param  string $user_family_name (optional)
     * @param  string $user_given_name (optional)
     * @param  string $user_color (optional)
     * @param  string $user_display_name (optional)
     * @param  string $user_company_name (optional)
     * @param  string $user_avatar_url (optional)
     * @param  int $user_tenant_id (optional)
     * @param  int $user_request_id (optional)
     * @param  int $attachments_lifetime_in_hours Secured attachment lifetime for client  Default : 7 days (optional)
     * @param  \OpenAPI\Client\Model\UserRequestAttachmentDto[] $attachments (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userRequestMessagesUpdateRequest($id, $tenant_id, $workspace_id, $message, $id2 = null, $files = null, $date_update = null, $date_creation = null, $date_send = null, $date_viewed = null, $user_id = null, $user_family_name = null, $user_given_name = null, $user_color = null, $user_display_name = null, $user_company_name = null, $user_avatar_url = null, $user_tenant_id = null, $user_request_id = null, $attachments_lifetime_in_hours = null, $attachments = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling userRequestMessagesUpdate'
            );
        }
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling userRequestMessagesUpdate'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling userRequestMessagesUpdate'
            );
        }
        // verify the required parameter 'message' is set
        if ($message === null || (is_array($message) && count($message) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message when calling userRequestMessagesUpdate'
            );
        }
        if (strlen($message) > 3000) {
            throw new \InvalidArgumentException('invalid length for "$message" when calling UserRequestMessagesApi.userRequestMessagesUpdate, must be smaller than or equal to 3000.');
        }


        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/UserRequestMessages/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }

        // form params
        if ($id2 !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id2);
        }
        // form params
        if ($files !== null) {
            $multipart = true;
            $formParams['Files'] = [];
            $paramFiles = is_array($files) ? $files : [$files];
            foreach ($paramFiles as $paramFile) {
                $formParams['Files'][] = \GuzzleHttp\Psr7\try_fopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($message !== null) {
            $formParams['Message'] = ObjectSerializer::toFormValue($message);
        }
        // form params
        if ($date_update !== null) {
            $formParams['DateUpdate'] = ObjectSerializer::toFormValue($date_update);
        }
        // form params
        if ($date_creation !== null) {
            $formParams['DateCreation'] = ObjectSerializer::toFormValue($date_creation);
        }
        // form params
        if ($date_send !== null) {
            $formParams['DateSend'] = ObjectSerializer::toFormValue($date_send);
        }
        // form params
        if ($date_viewed !== null) {
            $formParams['DateViewed'] = ObjectSerializer::toFormValue($date_viewed);
        }
        // form params
        if ($user_id !== null) {
            $formParams['User.Id'] = ObjectSerializer::toFormValue($user_id);
        }
        // form params
        if ($user_family_name !== null) {
            $formParams['User.FamilyName'] = ObjectSerializer::toFormValue($user_family_name);
        }
        // form params
        if ($user_given_name !== null) {
            $formParams['User.GivenName'] = ObjectSerializer::toFormValue($user_given_name);
        }
        // form params
        if ($user_color !== null) {
            $formParams['User.Color'] = ObjectSerializer::toFormValue($user_color);
        }
        // form params
        if ($user_display_name !== null) {
            $formParams['User.DisplayName'] = ObjectSerializer::toFormValue($user_display_name);
        }
        // form params
        if ($user_company_name !== null) {
            $formParams['User.CompanyName'] = ObjectSerializer::toFormValue($user_company_name);
        }
        // form params
        if ($user_avatar_url !== null) {
            $formParams['User.AvatarUrl'] = ObjectSerializer::toFormValue($user_avatar_url);
        }
        // form params
        if ($user_tenant_id !== null) {
            $formParams['User.TenantId'] = ObjectSerializer::toFormValue($user_tenant_id);
        }
        // form params
        if ($user_request_id !== null) {
            $formParams['UserRequestId'] = ObjectSerializer::toFormValue($user_request_id);
        }
        // form params
        if ($attachments_lifetime_in_hours !== null) {
            $formParams['AttachmentsLifetimeInHours'] = ObjectSerializer::toFormValue($attachments_lifetime_in_hours);
        }
        // form params
        if ($attachments !== null) {
            $formParams['Attachments'] = ObjectSerializer::toFormValue($attachments);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
