<?php
/**
 * DataProcessingsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dastra API
 *
 * Dastra's public REST API
 *
 * The version of the OpenAPI document: v1
 * Contact: antoine.bidault@dastra.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * DataProcessingsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DataProcessingsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation dataProcessingsArchive
     *
     * Register insights
     *
     * @param  string $id id (required)
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function dataProcessingsArchive($id, $tenant_id, $workspace_id)
    {
        $this->dataProcessingsArchiveWithHttpInfo($id, $tenant_id, $workspace_id);
    }

    /**
     * Operation dataProcessingsArchiveWithHttpInfo
     *
     * Register insights
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataProcessingsArchiveWithHttpInfo($id, $tenant_id, $workspace_id)
    {
        $request = $this->dataProcessingsArchiveRequest($id, $tenant_id, $workspace_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation dataProcessingsArchiveAsync
     *
     * Register insights
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsArchiveAsync($id, $tenant_id, $workspace_id)
    {
        return $this->dataProcessingsArchiveAsyncWithHttpInfo($id, $tenant_id, $workspace_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataProcessingsArchiveAsyncWithHttpInfo
     *
     * Register insights
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsArchiveAsyncWithHttpInfo($id, $tenant_id, $workspace_id)
    {
        $returnType = '';
        $request = $this->dataProcessingsArchiveRequest($id, $tenant_id, $workspace_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataProcessingsArchive'
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataProcessingsArchiveRequest($id, $tenant_id, $workspace_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling dataProcessingsArchive'
            );
        }
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling dataProcessingsArchive'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling dataProcessingsArchive'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/DataProcessings/archive/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataProcessingsColumns
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function dataProcessingsColumns($tenant_id, $workspace_id)
    {
        $this->dataProcessingsColumnsWithHttpInfo($tenant_id, $workspace_id);
    }

    /**
     * Operation dataProcessingsColumnsWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataProcessingsColumnsWithHttpInfo($tenant_id, $workspace_id)
    {
        $request = $this->dataProcessingsColumnsRequest($tenant_id, $workspace_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation dataProcessingsColumnsAsync
     *
     * 
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsColumnsAsync($tenant_id, $workspace_id)
    {
        return $this->dataProcessingsColumnsAsyncWithHttpInfo($tenant_id, $workspace_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataProcessingsColumnsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsColumnsAsyncWithHttpInfo($tenant_id, $workspace_id)
    {
        $returnType = '';
        $request = $this->dataProcessingsColumnsRequest($tenant_id, $workspace_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataProcessingsColumns'
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataProcessingsColumnsRequest($tenant_id, $workspace_id)
    {
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling dataProcessingsColumns'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling dataProcessingsColumns'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/DataProcessings/columns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataProcessingsCreate
     *
     * Creating a record of processing
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  \OpenAPI\Client\Model\DataProcessingCreationDto $data_processing_creation_dto data_processing_creation_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function dataProcessingsCreate($tenant_id, $workspace_id, $data_processing_creation_dto = null)
    {
        $this->dataProcessingsCreateWithHttpInfo($tenant_id, $workspace_id, $data_processing_creation_dto);
    }

    /**
     * Operation dataProcessingsCreateWithHttpInfo
     *
     * Creating a record of processing
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\DataProcessingCreationDto $data_processing_creation_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataProcessingsCreateWithHttpInfo($tenant_id, $workspace_id, $data_processing_creation_dto = null)
    {
        $request = $this->dataProcessingsCreateRequest($tenant_id, $workspace_id, $data_processing_creation_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation dataProcessingsCreateAsync
     *
     * Creating a record of processing
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\DataProcessingCreationDto $data_processing_creation_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsCreateAsync($tenant_id, $workspace_id, $data_processing_creation_dto = null)
    {
        return $this->dataProcessingsCreateAsyncWithHttpInfo($tenant_id, $workspace_id, $data_processing_creation_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataProcessingsCreateAsyncWithHttpInfo
     *
     * Creating a record of processing
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\DataProcessingCreationDto $data_processing_creation_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsCreateAsyncWithHttpInfo($tenant_id, $workspace_id, $data_processing_creation_dto = null)
    {
        $returnType = '';
        $request = $this->dataProcessingsCreateRequest($tenant_id, $workspace_id, $data_processing_creation_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataProcessingsCreate'
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\DataProcessingCreationDto $data_processing_creation_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataProcessingsCreateRequest($tenant_id, $workspace_id, $data_processing_creation_dto = null)
    {
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling dataProcessingsCreate'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling dataProcessingsCreate'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/DataProcessings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($data_processing_creation_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data_processing_creation_dto));
            } else {
                $httpBody = $data_processing_creation_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataProcessingsDelete
     *
     * @param  string $id id (required)
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function dataProcessingsDelete($id, $tenant_id, $workspace_id)
    {
        $this->dataProcessingsDeleteWithHttpInfo($id, $tenant_id, $workspace_id);
    }

    /**
     * Operation dataProcessingsDeleteWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataProcessingsDeleteWithHttpInfo($id, $tenant_id, $workspace_id)
    {
        $request = $this->dataProcessingsDeleteRequest($id, $tenant_id, $workspace_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation dataProcessingsDeleteAsync
     *
     * 
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsDeleteAsync($id, $tenant_id, $workspace_id)
    {
        return $this->dataProcessingsDeleteAsyncWithHttpInfo($id, $tenant_id, $workspace_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataProcessingsDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsDeleteAsyncWithHttpInfo($id, $tenant_id, $workspace_id)
    {
        $returnType = '';
        $request = $this->dataProcessingsDeleteRequest($id, $tenant_id, $workspace_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataProcessingsDelete'
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataProcessingsDeleteRequest($id, $tenant_id, $workspace_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling dataProcessingsDelete'
            );
        }
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling dataProcessingsDelete'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling dataProcessingsDelete'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/DataProcessings/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataProcessingsDuplicate
     *
     * Duplicate a data treatment object
     *
     * @param  string $id id (required)
     * @param  int $workspace_id workspace_id (required)
     * @param  string $tenant_id tenant_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function dataProcessingsDuplicate($id, $workspace_id, $tenant_id)
    {
        $this->dataProcessingsDuplicateWithHttpInfo($id, $workspace_id, $tenant_id);
    }

    /**
     * Operation dataProcessingsDuplicateWithHttpInfo
     *
     * Duplicate a data treatment object
     *
     * @param  string $id (required)
     * @param  int $workspace_id (required)
     * @param  string $tenant_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataProcessingsDuplicateWithHttpInfo($id, $workspace_id, $tenant_id)
    {
        $request = $this->dataProcessingsDuplicateRequest($id, $workspace_id, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation dataProcessingsDuplicateAsync
     *
     * Duplicate a data treatment object
     *
     * @param  string $id (required)
     * @param  int $workspace_id (required)
     * @param  string $tenant_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsDuplicateAsync($id, $workspace_id, $tenant_id)
    {
        return $this->dataProcessingsDuplicateAsyncWithHttpInfo($id, $workspace_id, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataProcessingsDuplicateAsyncWithHttpInfo
     *
     * Duplicate a data treatment object
     *
     * @param  string $id (required)
     * @param  int $workspace_id (required)
     * @param  string $tenant_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsDuplicateAsyncWithHttpInfo($id, $workspace_id, $tenant_id)
    {
        $returnType = '';
        $request = $this->dataProcessingsDuplicateRequest($id, $workspace_id, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataProcessingsDuplicate'
     *
     * @param  string $id (required)
     * @param  int $workspace_id (required)
     * @param  string $tenant_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataProcessingsDuplicateRequest($id, $workspace_id, $tenant_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling dataProcessingsDuplicate'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling dataProcessingsDuplicate'
            );
        }
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling dataProcessingsDuplicate'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/DataProcessings/{id}/duplicate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }
        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataProcessingsExport
     *
     * Export the records in any format
     *
     * @param  \OpenAPI\Client\Model\ExportFormat $format format (required)
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  \OpenAPI\Client\Model\TemplateExportProcessing $template template (optional)
     * @param  \OpenAPI\Client\Model\DataProcessingQuery $data_processing_query data_processing_query (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function dataProcessingsExport($format, $tenant_id, $workspace_id, $template = null, $data_processing_query = null)
    {
        $this->dataProcessingsExportWithHttpInfo($format, $tenant_id, $workspace_id, $template, $data_processing_query);
    }

    /**
     * Operation dataProcessingsExportWithHttpInfo
     *
     * Export the records in any format
     *
     * @param  \OpenAPI\Client\Model\ExportFormat $format (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\TemplateExportProcessing $template (optional)
     * @param  \OpenAPI\Client\Model\DataProcessingQuery $data_processing_query (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataProcessingsExportWithHttpInfo($format, $tenant_id, $workspace_id, $template = null, $data_processing_query = null)
    {
        $request = $this->dataProcessingsExportRequest($format, $tenant_id, $workspace_id, $template, $data_processing_query);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation dataProcessingsExportAsync
     *
     * Export the records in any format
     *
     * @param  \OpenAPI\Client\Model\ExportFormat $format (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\TemplateExportProcessing $template (optional)
     * @param  \OpenAPI\Client\Model\DataProcessingQuery $data_processing_query (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsExportAsync($format, $tenant_id, $workspace_id, $template = null, $data_processing_query = null)
    {
        return $this->dataProcessingsExportAsyncWithHttpInfo($format, $tenant_id, $workspace_id, $template, $data_processing_query)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataProcessingsExportAsyncWithHttpInfo
     *
     * Export the records in any format
     *
     * @param  \OpenAPI\Client\Model\ExportFormat $format (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\TemplateExportProcessing $template (optional)
     * @param  \OpenAPI\Client\Model\DataProcessingQuery $data_processing_query (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsExportAsyncWithHttpInfo($format, $tenant_id, $workspace_id, $template = null, $data_processing_query = null)
    {
        $returnType = '';
        $request = $this->dataProcessingsExportRequest($format, $tenant_id, $workspace_id, $template, $data_processing_query);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataProcessingsExport'
     *
     * @param  \OpenAPI\Client\Model\ExportFormat $format (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\TemplateExportProcessing $template (optional)
     * @param  \OpenAPI\Client\Model\DataProcessingQuery $data_processing_query (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataProcessingsExportRequest($format, $tenant_id, $workspace_id, $template = null, $data_processing_query = null)
    {
        // verify the required parameter 'format' is set
        if ($format === null || (is_array($format) && count($format) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $format when calling dataProcessingsExport'
            );
        }
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling dataProcessingsExport'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling dataProcessingsExport'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/DataProcessings/export/{format}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($template !== null) {
            if('form' === 'form' && is_array($template)) {
                foreach($template as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['template'] = $template;
            }
        }


        // path params
        if ($format !== null) {
            $resourcePath = str_replace(
                '{' . 'format' . '}',
                ObjectSerializer::toPathValue($format),
                $resourcePath
            );
        }
        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($data_processing_query)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data_processing_query));
            } else {
                $httpBody = $data_processing_query;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataProcessingsFind
     *
     * Get data processing record by id
     *
     * @param  string $id Id treatment (required)
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DataProcessingDto
     */
    public function dataProcessingsFind($id, $tenant_id, $workspace_id)
    {
        list($response) = $this->dataProcessingsFindWithHttpInfo($id, $tenant_id, $workspace_id);
        return $response;
    }

    /**
     * Operation dataProcessingsFindWithHttpInfo
     *
     * Get data processing record by id
     *
     * @param  string $id Id treatment (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DataProcessingDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataProcessingsFindWithHttpInfo($id, $tenant_id, $workspace_id)
    {
        $request = $this->dataProcessingsFindRequest($id, $tenant_id, $workspace_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DataProcessingDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DataProcessingDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DataProcessingDto';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DataProcessingDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dataProcessingsFindAsync
     *
     * Get data processing record by id
     *
     * @param  string $id Id treatment (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsFindAsync($id, $tenant_id, $workspace_id)
    {
        return $this->dataProcessingsFindAsyncWithHttpInfo($id, $tenant_id, $workspace_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataProcessingsFindAsyncWithHttpInfo
     *
     * Get data processing record by id
     *
     * @param  string $id Id treatment (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsFindAsyncWithHttpInfo($id, $tenant_id, $workspace_id)
    {
        $returnType = '\OpenAPI\Client\Model\DataProcessingDto';
        $request = $this->dataProcessingsFindRequest($id, $tenant_id, $workspace_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataProcessingsFind'
     *
     * @param  string $id Id treatment (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataProcessingsFindRequest($id, $tenant_id, $workspace_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling dataProcessingsFind'
            );
        }
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling dataProcessingsFind'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling dataProcessingsFind'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/DataProcessings/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataProcessingsInsights
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  \OpenAPI\Client\Model\DataProcessingDto $data_processing_dto data_processing_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function dataProcessingsInsights($tenant_id, $workspace_id, $data_processing_dto = null)
    {
        $this->dataProcessingsInsightsWithHttpInfo($tenant_id, $workspace_id, $data_processing_dto);
    }

    /**
     * Operation dataProcessingsInsightsWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\DataProcessingDto $data_processing_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataProcessingsInsightsWithHttpInfo($tenant_id, $workspace_id, $data_processing_dto = null)
    {
        $request = $this->dataProcessingsInsightsRequest($tenant_id, $workspace_id, $data_processing_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation dataProcessingsInsightsAsync
     *
     * 
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\DataProcessingDto $data_processing_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsInsightsAsync($tenant_id, $workspace_id, $data_processing_dto = null)
    {
        return $this->dataProcessingsInsightsAsyncWithHttpInfo($tenant_id, $workspace_id, $data_processing_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataProcessingsInsightsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\DataProcessingDto $data_processing_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsInsightsAsyncWithHttpInfo($tenant_id, $workspace_id, $data_processing_dto = null)
    {
        $returnType = '';
        $request = $this->dataProcessingsInsightsRequest($tenant_id, $workspace_id, $data_processing_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataProcessingsInsights'
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\DataProcessingDto $data_processing_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataProcessingsInsightsRequest($tenant_id, $workspace_id, $data_processing_dto = null)
    {
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling dataProcessingsInsights'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling dataProcessingsInsights'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/DataProcessings/insights';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($data_processing_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data_processing_dto));
            } else {
                $httpBody = $data_processing_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataProcessingsList
     *
     * Get data treatments (Paginated)
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  string $data_set_id data_set_id (optional)
     * @param  int $actor_id actor_id (optional)
     * @param  int $customer_id customer_id (optional)
     * @param  int $security_measure_id security_measure_id (optional)
     * @param  int $area_id area_id (optional)
     * @param  bool $archived archived (optional)
     * @param  int[] $tags tags (optional)
     * @param  \OpenAPI\Client\Model\DataProcessingState[] $states states (optional)
     * @param  \OpenAPI\Client\Model\ProcessingType[] $types types (optional)
     * @param  string $q q (optional)
     * @param  string[] $ids ids (optional)
     * @param  int $page page (optional)
     * @param  int $size size (optional)
     * @param  int $skip skip (optional)
     * @param  string $sort_by sort_by (optional)
     * @param  bool $asc asc (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DataProcessingDtoPagedList
     */
    public function dataProcessingsList($tenant_id, $workspace_id, $data_set_id = null, $actor_id = null, $customer_id = null, $security_measure_id = null, $area_id = null, $archived = null, $tags = null, $states = null, $types = null, $q = null, $ids = null, $page = null, $size = null, $skip = null, $sort_by = null, $asc = null)
    {
        list($response) = $this->dataProcessingsListWithHttpInfo($tenant_id, $workspace_id, $data_set_id, $actor_id, $customer_id, $security_measure_id, $area_id, $archived, $tags, $states, $types, $q, $ids, $page, $size, $skip, $sort_by, $asc);
        return $response;
    }

    /**
     * Operation dataProcessingsListWithHttpInfo
     *
     * Get data treatments (Paginated)
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $data_set_id (optional)
     * @param  int $actor_id (optional)
     * @param  int $customer_id (optional)
     * @param  int $security_measure_id (optional)
     * @param  int $area_id (optional)
     * @param  bool $archived (optional)
     * @param  int[] $tags (optional)
     * @param  \OpenAPI\Client\Model\DataProcessingState[] $states (optional)
     * @param  \OpenAPI\Client\Model\ProcessingType[] $types (optional)
     * @param  string $q (optional)
     * @param  string[] $ids (optional)
     * @param  int $page (optional)
     * @param  int $size (optional)
     * @param  int $skip (optional)
     * @param  string $sort_by (optional)
     * @param  bool $asc (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DataProcessingDtoPagedList, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataProcessingsListWithHttpInfo($tenant_id, $workspace_id, $data_set_id = null, $actor_id = null, $customer_id = null, $security_measure_id = null, $area_id = null, $archived = null, $tags = null, $states = null, $types = null, $q = null, $ids = null, $page = null, $size = null, $skip = null, $sort_by = null, $asc = null)
    {
        $request = $this->dataProcessingsListRequest($tenant_id, $workspace_id, $data_set_id, $actor_id, $customer_id, $security_measure_id, $area_id, $archived, $tags, $states, $types, $q, $ids, $page, $size, $skip, $sort_by, $asc);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DataProcessingDtoPagedList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DataProcessingDtoPagedList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DataProcessingDtoPagedList';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DataProcessingDtoPagedList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dataProcessingsListAsync
     *
     * Get data treatments (Paginated)
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $data_set_id (optional)
     * @param  int $actor_id (optional)
     * @param  int $customer_id (optional)
     * @param  int $security_measure_id (optional)
     * @param  int $area_id (optional)
     * @param  bool $archived (optional)
     * @param  int[] $tags (optional)
     * @param  \OpenAPI\Client\Model\DataProcessingState[] $states (optional)
     * @param  \OpenAPI\Client\Model\ProcessingType[] $types (optional)
     * @param  string $q (optional)
     * @param  string[] $ids (optional)
     * @param  int $page (optional)
     * @param  int $size (optional)
     * @param  int $skip (optional)
     * @param  string $sort_by (optional)
     * @param  bool $asc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsListAsync($tenant_id, $workspace_id, $data_set_id = null, $actor_id = null, $customer_id = null, $security_measure_id = null, $area_id = null, $archived = null, $tags = null, $states = null, $types = null, $q = null, $ids = null, $page = null, $size = null, $skip = null, $sort_by = null, $asc = null)
    {
        return $this->dataProcessingsListAsyncWithHttpInfo($tenant_id, $workspace_id, $data_set_id, $actor_id, $customer_id, $security_measure_id, $area_id, $archived, $tags, $states, $types, $q, $ids, $page, $size, $skip, $sort_by, $asc)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataProcessingsListAsyncWithHttpInfo
     *
     * Get data treatments (Paginated)
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $data_set_id (optional)
     * @param  int $actor_id (optional)
     * @param  int $customer_id (optional)
     * @param  int $security_measure_id (optional)
     * @param  int $area_id (optional)
     * @param  bool $archived (optional)
     * @param  int[] $tags (optional)
     * @param  \OpenAPI\Client\Model\DataProcessingState[] $states (optional)
     * @param  \OpenAPI\Client\Model\ProcessingType[] $types (optional)
     * @param  string $q (optional)
     * @param  string[] $ids (optional)
     * @param  int $page (optional)
     * @param  int $size (optional)
     * @param  int $skip (optional)
     * @param  string $sort_by (optional)
     * @param  bool $asc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsListAsyncWithHttpInfo($tenant_id, $workspace_id, $data_set_id = null, $actor_id = null, $customer_id = null, $security_measure_id = null, $area_id = null, $archived = null, $tags = null, $states = null, $types = null, $q = null, $ids = null, $page = null, $size = null, $skip = null, $sort_by = null, $asc = null)
    {
        $returnType = '\OpenAPI\Client\Model\DataProcessingDtoPagedList';
        $request = $this->dataProcessingsListRequest($tenant_id, $workspace_id, $data_set_id, $actor_id, $customer_id, $security_measure_id, $area_id, $archived, $tags, $states, $types, $q, $ids, $page, $size, $skip, $sort_by, $asc);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataProcessingsList'
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $data_set_id (optional)
     * @param  int $actor_id (optional)
     * @param  int $customer_id (optional)
     * @param  int $security_measure_id (optional)
     * @param  int $area_id (optional)
     * @param  bool $archived (optional)
     * @param  int[] $tags (optional)
     * @param  \OpenAPI\Client\Model\DataProcessingState[] $states (optional)
     * @param  \OpenAPI\Client\Model\ProcessingType[] $types (optional)
     * @param  string $q (optional)
     * @param  string[] $ids (optional)
     * @param  int $page (optional)
     * @param  int $size (optional)
     * @param  int $skip (optional)
     * @param  string $sort_by (optional)
     * @param  bool $asc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataProcessingsListRequest($tenant_id, $workspace_id, $data_set_id = null, $actor_id = null, $customer_id = null, $security_measure_id = null, $area_id = null, $archived = null, $tags = null, $states = null, $types = null, $q = null, $ids = null, $page = null, $size = null, $skip = null, $sort_by = null, $asc = null)
    {
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling dataProcessingsList'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling dataProcessingsList'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/DataProcessings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($data_set_id !== null) {
            if('form' === 'form' && is_array($data_set_id)) {
                foreach($data_set_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['dataSetId'] = $data_set_id;
            }
        }
        // query params
        if ($actor_id !== null) {
            if('form' === 'form' && is_array($actor_id)) {
                foreach($actor_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['actorId'] = $actor_id;
            }
        }
        // query params
        if ($customer_id !== null) {
            if('form' === 'form' && is_array($customer_id)) {
                foreach($customer_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customerId'] = $customer_id;
            }
        }
        // query params
        if ($security_measure_id !== null) {
            if('form' === 'form' && is_array($security_measure_id)) {
                foreach($security_measure_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['securityMeasureId'] = $security_measure_id;
            }
        }
        // query params
        if ($area_id !== null) {
            if('form' === 'form' && is_array($area_id)) {
                foreach($area_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['areaId'] = $area_id;
            }
        }
        // query params
        if ($archived !== null) {
            if('form' === 'form' && is_array($archived)) {
                foreach($archived as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['archived'] = $archived;
            }
        }
        // query params
        if ($tags !== null) {
            if('form' === 'form' && is_array($tags)) {
                foreach($tags as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tags'] = $tags;
            }
        }
        // query params
        if ($states !== null) {
            if('form' === 'form' && is_array($states)) {
                foreach($states as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['states'] = $states;
            }
        }
        // query params
        if ($types !== null) {
            if('form' === 'form' && is_array($types)) {
                foreach($types as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['types'] = $types;
            }
        }
        // query params
        if ($q !== null) {
            if('form' === 'form' && is_array($q)) {
                foreach($q as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['q'] = $q;
            }
        }
        // query params
        if ($ids !== null) {
            if('form' === 'form' && is_array($ids)) {
                foreach($ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['ids'] = $ids;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($size !== null) {
            if('form' === 'form' && is_array($size)) {
                foreach($size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['size'] = $size;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['skip'] = $skip;
            }
        }
        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortBy'] = $sort_by;
            }
        }
        // query params
        if ($asc !== null) {
            if('form' === 'form' && is_array($asc)) {
                foreach($asc as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['asc'] = $asc;
            }
        }


        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataProcessingsListPurposes
     *
     * @param  int $id id (required)
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PurposeDto
     */
    public function dataProcessingsListPurposes($id, $tenant_id, $workspace_id)
    {
        list($response) = $this->dataProcessingsListPurposesWithHttpInfo($id, $tenant_id, $workspace_id);
        return $response;
    }

    /**
     * Operation dataProcessingsListPurposesWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PurposeDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataProcessingsListPurposesWithHttpInfo($id, $tenant_id, $workspace_id)
    {
        $request = $this->dataProcessingsListPurposesRequest($id, $tenant_id, $workspace_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PurposeDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PurposeDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PurposeDto';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PurposeDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dataProcessingsListPurposesAsync
     *
     * 
     *
     * @param  int $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsListPurposesAsync($id, $tenant_id, $workspace_id)
    {
        return $this->dataProcessingsListPurposesAsyncWithHttpInfo($id, $tenant_id, $workspace_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataProcessingsListPurposesAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsListPurposesAsyncWithHttpInfo($id, $tenant_id, $workspace_id)
    {
        $returnType = '\OpenAPI\Client\Model\PurposeDto';
        $request = $this->dataProcessingsListPurposesRequest($id, $tenant_id, $workspace_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataProcessingsListPurposes'
     *
     * @param  int $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataProcessingsListPurposesRequest($id, $tenant_id, $workspace_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling dataProcessingsListPurposes'
            );
        }
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling dataProcessingsListPurposes'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling dataProcessingsListPurposes'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/DataProcessings/purposes/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataProcessingsNodes
     *
     * Get data treatments (Paginated)
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  string $data_set_id data_set_id (optional)
     * @param  int $actor_id actor_id (optional)
     * @param  int $customer_id customer_id (optional)
     * @param  int $security_measure_id security_measure_id (optional)
     * @param  int $area_id area_id (optional)
     * @param  bool $archived archived (optional)
     * @param  int[] $tags tags (optional)
     * @param  \OpenAPI\Client\Model\DataProcessingState[] $states states (optional)
     * @param  \OpenAPI\Client\Model\ProcessingType[] $types types (optional)
     * @param  string $q q (optional)
     * @param  string[] $ids ids (optional)
     * @param  int $page page (optional)
     * @param  int $size size (optional)
     * @param  int $skip skip (optional)
     * @param  string $sort_by sort_by (optional)
     * @param  bool $asc asc (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RecordNodes
     */
    public function dataProcessingsNodes($tenant_id, $workspace_id, $data_set_id = null, $actor_id = null, $customer_id = null, $security_measure_id = null, $area_id = null, $archived = null, $tags = null, $states = null, $types = null, $q = null, $ids = null, $page = null, $size = null, $skip = null, $sort_by = null, $asc = null)
    {
        list($response) = $this->dataProcessingsNodesWithHttpInfo($tenant_id, $workspace_id, $data_set_id, $actor_id, $customer_id, $security_measure_id, $area_id, $archived, $tags, $states, $types, $q, $ids, $page, $size, $skip, $sort_by, $asc);
        return $response;
    }

    /**
     * Operation dataProcessingsNodesWithHttpInfo
     *
     * Get data treatments (Paginated)
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $data_set_id (optional)
     * @param  int $actor_id (optional)
     * @param  int $customer_id (optional)
     * @param  int $security_measure_id (optional)
     * @param  int $area_id (optional)
     * @param  bool $archived (optional)
     * @param  int[] $tags (optional)
     * @param  \OpenAPI\Client\Model\DataProcessingState[] $states (optional)
     * @param  \OpenAPI\Client\Model\ProcessingType[] $types (optional)
     * @param  string $q (optional)
     * @param  string[] $ids (optional)
     * @param  int $page (optional)
     * @param  int $size (optional)
     * @param  int $skip (optional)
     * @param  string $sort_by (optional)
     * @param  bool $asc (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RecordNodes, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataProcessingsNodesWithHttpInfo($tenant_id, $workspace_id, $data_set_id = null, $actor_id = null, $customer_id = null, $security_measure_id = null, $area_id = null, $archived = null, $tags = null, $states = null, $types = null, $q = null, $ids = null, $page = null, $size = null, $skip = null, $sort_by = null, $asc = null)
    {
        $request = $this->dataProcessingsNodesRequest($tenant_id, $workspace_id, $data_set_id, $actor_id, $customer_id, $security_measure_id, $area_id, $archived, $tags, $states, $types, $q, $ids, $page, $size, $skip, $sort_by, $asc);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RecordNodes' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RecordNodes', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RecordNodes';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RecordNodes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dataProcessingsNodesAsync
     *
     * Get data treatments (Paginated)
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $data_set_id (optional)
     * @param  int $actor_id (optional)
     * @param  int $customer_id (optional)
     * @param  int $security_measure_id (optional)
     * @param  int $area_id (optional)
     * @param  bool $archived (optional)
     * @param  int[] $tags (optional)
     * @param  \OpenAPI\Client\Model\DataProcessingState[] $states (optional)
     * @param  \OpenAPI\Client\Model\ProcessingType[] $types (optional)
     * @param  string $q (optional)
     * @param  string[] $ids (optional)
     * @param  int $page (optional)
     * @param  int $size (optional)
     * @param  int $skip (optional)
     * @param  string $sort_by (optional)
     * @param  bool $asc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsNodesAsync($tenant_id, $workspace_id, $data_set_id = null, $actor_id = null, $customer_id = null, $security_measure_id = null, $area_id = null, $archived = null, $tags = null, $states = null, $types = null, $q = null, $ids = null, $page = null, $size = null, $skip = null, $sort_by = null, $asc = null)
    {
        return $this->dataProcessingsNodesAsyncWithHttpInfo($tenant_id, $workspace_id, $data_set_id, $actor_id, $customer_id, $security_measure_id, $area_id, $archived, $tags, $states, $types, $q, $ids, $page, $size, $skip, $sort_by, $asc)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataProcessingsNodesAsyncWithHttpInfo
     *
     * Get data treatments (Paginated)
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $data_set_id (optional)
     * @param  int $actor_id (optional)
     * @param  int $customer_id (optional)
     * @param  int $security_measure_id (optional)
     * @param  int $area_id (optional)
     * @param  bool $archived (optional)
     * @param  int[] $tags (optional)
     * @param  \OpenAPI\Client\Model\DataProcessingState[] $states (optional)
     * @param  \OpenAPI\Client\Model\ProcessingType[] $types (optional)
     * @param  string $q (optional)
     * @param  string[] $ids (optional)
     * @param  int $page (optional)
     * @param  int $size (optional)
     * @param  int $skip (optional)
     * @param  string $sort_by (optional)
     * @param  bool $asc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsNodesAsyncWithHttpInfo($tenant_id, $workspace_id, $data_set_id = null, $actor_id = null, $customer_id = null, $security_measure_id = null, $area_id = null, $archived = null, $tags = null, $states = null, $types = null, $q = null, $ids = null, $page = null, $size = null, $skip = null, $sort_by = null, $asc = null)
    {
        $returnType = '\OpenAPI\Client\Model\RecordNodes';
        $request = $this->dataProcessingsNodesRequest($tenant_id, $workspace_id, $data_set_id, $actor_id, $customer_id, $security_measure_id, $area_id, $archived, $tags, $states, $types, $q, $ids, $page, $size, $skip, $sort_by, $asc);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataProcessingsNodes'
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $data_set_id (optional)
     * @param  int $actor_id (optional)
     * @param  int $customer_id (optional)
     * @param  int $security_measure_id (optional)
     * @param  int $area_id (optional)
     * @param  bool $archived (optional)
     * @param  int[] $tags (optional)
     * @param  \OpenAPI\Client\Model\DataProcessingState[] $states (optional)
     * @param  \OpenAPI\Client\Model\ProcessingType[] $types (optional)
     * @param  string $q (optional)
     * @param  string[] $ids (optional)
     * @param  int $page (optional)
     * @param  int $size (optional)
     * @param  int $skip (optional)
     * @param  string $sort_by (optional)
     * @param  bool $asc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataProcessingsNodesRequest($tenant_id, $workspace_id, $data_set_id = null, $actor_id = null, $customer_id = null, $security_measure_id = null, $area_id = null, $archived = null, $tags = null, $states = null, $types = null, $q = null, $ids = null, $page = null, $size = null, $skip = null, $sort_by = null, $asc = null)
    {
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling dataProcessingsNodes'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling dataProcessingsNodes'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/DataProcessings/nodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($data_set_id !== null) {
            if('form' === 'form' && is_array($data_set_id)) {
                foreach($data_set_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['dataSetId'] = $data_set_id;
            }
        }
        // query params
        if ($actor_id !== null) {
            if('form' === 'form' && is_array($actor_id)) {
                foreach($actor_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['actorId'] = $actor_id;
            }
        }
        // query params
        if ($customer_id !== null) {
            if('form' === 'form' && is_array($customer_id)) {
                foreach($customer_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customerId'] = $customer_id;
            }
        }
        // query params
        if ($security_measure_id !== null) {
            if('form' === 'form' && is_array($security_measure_id)) {
                foreach($security_measure_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['securityMeasureId'] = $security_measure_id;
            }
        }
        // query params
        if ($area_id !== null) {
            if('form' === 'form' && is_array($area_id)) {
                foreach($area_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['areaId'] = $area_id;
            }
        }
        // query params
        if ($archived !== null) {
            if('form' === 'form' && is_array($archived)) {
                foreach($archived as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['archived'] = $archived;
            }
        }
        // query params
        if ($tags !== null) {
            if('form' === 'form' && is_array($tags)) {
                foreach($tags as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tags'] = $tags;
            }
        }
        // query params
        if ($states !== null) {
            if('form' === 'form' && is_array($states)) {
                foreach($states as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['states'] = $states;
            }
        }
        // query params
        if ($types !== null) {
            if('form' === 'form' && is_array($types)) {
                foreach($types as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['types'] = $types;
            }
        }
        // query params
        if ($q !== null) {
            if('form' === 'form' && is_array($q)) {
                foreach($q as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['q'] = $q;
            }
        }
        // query params
        if ($ids !== null) {
            if('form' === 'form' && is_array($ids)) {
                foreach($ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['ids'] = $ids;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($size !== null) {
            if('form' === 'form' && is_array($size)) {
                foreach($size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['size'] = $size;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['skip'] = $skip;
            }
        }
        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortBy'] = $sort_by;
            }
        }
        // query params
        if ($asc !== null) {
            if('form' === 'form' && is_array($asc)) {
                foreach($asc as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['asc'] = $asc;
            }
        }


        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataProcessingsPatchDataTreatment
     *
     * Patching a data processing with his id
     *
     * @param  string $id id (required)
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  \OpenAPI\Client\Model\Operation[] $operation operation (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function dataProcessingsPatchDataTreatment($id, $tenant_id, $workspace_id, $operation = null)
    {
        $this->dataProcessingsPatchDataTreatmentWithHttpInfo($id, $tenant_id, $workspace_id, $operation);
    }

    /**
     * Operation dataProcessingsPatchDataTreatmentWithHttpInfo
     *
     * Patching a data processing with his id
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\Operation[] $operation (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataProcessingsPatchDataTreatmentWithHttpInfo($id, $tenant_id, $workspace_id, $operation = null)
    {
        $request = $this->dataProcessingsPatchDataTreatmentRequest($id, $tenant_id, $workspace_id, $operation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation dataProcessingsPatchDataTreatmentAsync
     *
     * Patching a data processing with his id
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\Operation[] $operation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsPatchDataTreatmentAsync($id, $tenant_id, $workspace_id, $operation = null)
    {
        return $this->dataProcessingsPatchDataTreatmentAsyncWithHttpInfo($id, $tenant_id, $workspace_id, $operation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataProcessingsPatchDataTreatmentAsyncWithHttpInfo
     *
     * Patching a data processing with his id
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\Operation[] $operation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsPatchDataTreatmentAsyncWithHttpInfo($id, $tenant_id, $workspace_id, $operation = null)
    {
        $returnType = '';
        $request = $this->dataProcessingsPatchDataTreatmentRequest($id, $tenant_id, $workspace_id, $operation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataProcessingsPatchDataTreatment'
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\Operation[] $operation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataProcessingsPatchDataTreatmentRequest($id, $tenant_id, $workspace_id, $operation = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling dataProcessingsPatchDataTreatment'
            );
        }
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling dataProcessingsPatchDataTreatment'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling dataProcessingsPatchDataTreatment'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/DataProcessings/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($operation)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($operation));
            } else {
                $httpBody = $operation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataProcessingsPersonCategories
     *
     * Return the organizational security measures types  to generates the selectList
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function dataProcessingsPersonCategories($tenant_id, $workspace_id)
    {
        $this->dataProcessingsPersonCategoriesWithHttpInfo($tenant_id, $workspace_id);
    }

    /**
     * Operation dataProcessingsPersonCategoriesWithHttpInfo
     *
     * Return the organizational security measures types  to generates the selectList
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataProcessingsPersonCategoriesWithHttpInfo($tenant_id, $workspace_id)
    {
        $request = $this->dataProcessingsPersonCategoriesRequest($tenant_id, $workspace_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation dataProcessingsPersonCategoriesAsync
     *
     * Return the organizational security measures types  to generates the selectList
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsPersonCategoriesAsync($tenant_id, $workspace_id)
    {
        return $this->dataProcessingsPersonCategoriesAsyncWithHttpInfo($tenant_id, $workspace_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataProcessingsPersonCategoriesAsyncWithHttpInfo
     *
     * Return the organizational security measures types  to generates the selectList
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsPersonCategoriesAsyncWithHttpInfo($tenant_id, $workspace_id)
    {
        $returnType = '';
        $request = $this->dataProcessingsPersonCategoriesRequest($tenant_id, $workspace_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataProcessingsPersonCategories'
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataProcessingsPersonCategoriesRequest($tenant_id, $workspace_id)
    {
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling dataProcessingsPersonCategories'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling dataProcessingsPersonCategories'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/DataProcessings/person-categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataProcessingsRestore
     *
     * registerInsights              DataTreatment Archiving
     *
     * @param  string $id id (required)
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function dataProcessingsRestore($id, $tenant_id, $workspace_id)
    {
        $this->dataProcessingsRestoreWithHttpInfo($id, $tenant_id, $workspace_id);
    }

    /**
     * Operation dataProcessingsRestoreWithHttpInfo
     *
     * registerInsights              DataTreatment Archiving
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataProcessingsRestoreWithHttpInfo($id, $tenant_id, $workspace_id)
    {
        $request = $this->dataProcessingsRestoreRequest($id, $tenant_id, $workspace_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation dataProcessingsRestoreAsync
     *
     * registerInsights              DataTreatment Archiving
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsRestoreAsync($id, $tenant_id, $workspace_id)
    {
        return $this->dataProcessingsRestoreAsyncWithHttpInfo($id, $tenant_id, $workspace_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataProcessingsRestoreAsyncWithHttpInfo
     *
     * registerInsights              DataTreatment Archiving
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsRestoreAsyncWithHttpInfo($id, $tenant_id, $workspace_id)
    {
        $returnType = '';
        $request = $this->dataProcessingsRestoreRequest($id, $tenant_id, $workspace_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataProcessingsRestore'
     *
     * @param  string $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataProcessingsRestoreRequest($id, $tenant_id, $workspace_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling dataProcessingsRestore'
            );
        }
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling dataProcessingsRestore'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling dataProcessingsRestore'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/DataProcessings/restore/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataProcessingsRestoreHistory
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  \OpenAPI\Client\Model\DataProcessingRestoreDto $data_processing_restore_dto data_processing_restore_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function dataProcessingsRestoreHistory($tenant_id, $workspace_id, $data_processing_restore_dto = null)
    {
        $this->dataProcessingsRestoreHistoryWithHttpInfo($tenant_id, $workspace_id, $data_processing_restore_dto);
    }

    /**
     * Operation dataProcessingsRestoreHistoryWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\DataProcessingRestoreDto $data_processing_restore_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataProcessingsRestoreHistoryWithHttpInfo($tenant_id, $workspace_id, $data_processing_restore_dto = null)
    {
        $request = $this->dataProcessingsRestoreHistoryRequest($tenant_id, $workspace_id, $data_processing_restore_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation dataProcessingsRestoreHistoryAsync
     *
     * 
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\DataProcessingRestoreDto $data_processing_restore_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsRestoreHistoryAsync($tenant_id, $workspace_id, $data_processing_restore_dto = null)
    {
        return $this->dataProcessingsRestoreHistoryAsyncWithHttpInfo($tenant_id, $workspace_id, $data_processing_restore_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataProcessingsRestoreHistoryAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\DataProcessingRestoreDto $data_processing_restore_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsRestoreHistoryAsyncWithHttpInfo($tenant_id, $workspace_id, $data_processing_restore_dto = null)
    {
        $returnType = '';
        $request = $this->dataProcessingsRestoreHistoryRequest($tenant_id, $workspace_id, $data_processing_restore_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataProcessingsRestoreHistory'
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\DataProcessingRestoreDto $data_processing_restore_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataProcessingsRestoreHistoryRequest($tenant_id, $workspace_id, $data_processing_restore_dto = null)
    {
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling dataProcessingsRestoreHistory'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling dataProcessingsRestoreHistory'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/DataProcessings/restore-history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($data_processing_restore_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data_processing_restore_dto));
            } else {
                $httpBody = $data_processing_restore_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataProcessingsStats
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  int $area_id area_id (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DataProcessingStatsDto
     */
    public function dataProcessingsStats($tenant_id, $workspace_id, $area_id = null)
    {
        list($response) = $this->dataProcessingsStatsWithHttpInfo($tenant_id, $workspace_id, $area_id);
        return $response;
    }

    /**
     * Operation dataProcessingsStatsWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  int $area_id (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DataProcessingStatsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataProcessingsStatsWithHttpInfo($tenant_id, $workspace_id, $area_id = null)
    {
        $request = $this->dataProcessingsStatsRequest($tenant_id, $workspace_id, $area_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DataProcessingStatsDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DataProcessingStatsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DataProcessingStatsDto';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DataProcessingStatsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dataProcessingsStatsAsync
     *
     * 
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  int $area_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsStatsAsync($tenant_id, $workspace_id, $area_id = null)
    {
        return $this->dataProcessingsStatsAsyncWithHttpInfo($tenant_id, $workspace_id, $area_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataProcessingsStatsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  int $area_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsStatsAsyncWithHttpInfo($tenant_id, $workspace_id, $area_id = null)
    {
        $returnType = '\OpenAPI\Client\Model\DataProcessingStatsDto';
        $request = $this->dataProcessingsStatsRequest($tenant_id, $workspace_id, $area_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataProcessingsStats'
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  int $area_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataProcessingsStatsRequest($tenant_id, $workspace_id, $area_id = null)
    {
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling dataProcessingsStats'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling dataProcessingsStats'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/DataProcessings/stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($area_id !== null) {
            if('form' === 'form' && is_array($area_id)) {
                foreach($area_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['areaId'] = $area_id;
            }
        }


        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataProcessingsSwitchWorkflowStep
     *
     * Switching the current state
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  \OpenAPI\Client\Model\GuidWorkflowUpdateDto $guid_workflow_update_dto guid_workflow_update_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function dataProcessingsSwitchWorkflowStep($tenant_id, $workspace_id, $guid_workflow_update_dto = null)
    {
        $this->dataProcessingsSwitchWorkflowStepWithHttpInfo($tenant_id, $workspace_id, $guid_workflow_update_dto);
    }

    /**
     * Operation dataProcessingsSwitchWorkflowStepWithHttpInfo
     *
     * Switching the current state
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\GuidWorkflowUpdateDto $guid_workflow_update_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataProcessingsSwitchWorkflowStepWithHttpInfo($tenant_id, $workspace_id, $guid_workflow_update_dto = null)
    {
        $request = $this->dataProcessingsSwitchWorkflowStepRequest($tenant_id, $workspace_id, $guid_workflow_update_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation dataProcessingsSwitchWorkflowStepAsync
     *
     * Switching the current state
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\GuidWorkflowUpdateDto $guid_workflow_update_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsSwitchWorkflowStepAsync($tenant_id, $workspace_id, $guid_workflow_update_dto = null)
    {
        return $this->dataProcessingsSwitchWorkflowStepAsyncWithHttpInfo($tenant_id, $workspace_id, $guid_workflow_update_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataProcessingsSwitchWorkflowStepAsyncWithHttpInfo
     *
     * Switching the current state
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\GuidWorkflowUpdateDto $guid_workflow_update_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsSwitchWorkflowStepAsyncWithHttpInfo($tenant_id, $workspace_id, $guid_workflow_update_dto = null)
    {
        $returnType = '';
        $request = $this->dataProcessingsSwitchWorkflowStepRequest($tenant_id, $workspace_id, $guid_workflow_update_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataProcessingsSwitchWorkflowStep'
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\GuidWorkflowUpdateDto $guid_workflow_update_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataProcessingsSwitchWorkflowStepRequest($tenant_id, $workspace_id, $guid_workflow_update_dto = null)
    {
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling dataProcessingsSwitchWorkflowStep'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling dataProcessingsSwitchWorkflowStep'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/DataProcessings/workflow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($guid_workflow_update_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($guid_workflow_update_dto));
            } else {
                $httpBody = $guid_workflow_update_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataProcessingsTree
     *
     * Get data treatments (Paginated)
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  int $area_id area_id (optional)
     * @param  \OpenAPI\Client\Model\DataProcessingState[] $states states (optional)
     * @param  \OpenAPI\Client\Model\ProcessingType[] $types types (optional)
     * @param  bool $archived archived (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DataProcessingTreeDto
     */
    public function dataProcessingsTree($tenant_id, $workspace_id, $area_id = null, $states = null, $types = null, $archived = false)
    {
        list($response) = $this->dataProcessingsTreeWithHttpInfo($tenant_id, $workspace_id, $area_id, $states, $types, $archived);
        return $response;
    }

    /**
     * Operation dataProcessingsTreeWithHttpInfo
     *
     * Get data treatments (Paginated)
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  int $area_id (optional)
     * @param  \OpenAPI\Client\Model\DataProcessingState[] $states (optional)
     * @param  \OpenAPI\Client\Model\ProcessingType[] $types (optional)
     * @param  bool $archived (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DataProcessingTreeDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataProcessingsTreeWithHttpInfo($tenant_id, $workspace_id, $area_id = null, $states = null, $types = null, $archived = false)
    {
        $request = $this->dataProcessingsTreeRequest($tenant_id, $workspace_id, $area_id, $states, $types, $archived);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DataProcessingTreeDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DataProcessingTreeDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DataProcessingTreeDto';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DataProcessingTreeDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dataProcessingsTreeAsync
     *
     * Get data treatments (Paginated)
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  int $area_id (optional)
     * @param  \OpenAPI\Client\Model\DataProcessingState[] $states (optional)
     * @param  \OpenAPI\Client\Model\ProcessingType[] $types (optional)
     * @param  bool $archived (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsTreeAsync($tenant_id, $workspace_id, $area_id = null, $states = null, $types = null, $archived = false)
    {
        return $this->dataProcessingsTreeAsyncWithHttpInfo($tenant_id, $workspace_id, $area_id, $states, $types, $archived)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataProcessingsTreeAsyncWithHttpInfo
     *
     * Get data treatments (Paginated)
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  int $area_id (optional)
     * @param  \OpenAPI\Client\Model\DataProcessingState[] $states (optional)
     * @param  \OpenAPI\Client\Model\ProcessingType[] $types (optional)
     * @param  bool $archived (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsTreeAsyncWithHttpInfo($tenant_id, $workspace_id, $area_id = null, $states = null, $types = null, $archived = false)
    {
        $returnType = '\OpenAPI\Client\Model\DataProcessingTreeDto';
        $request = $this->dataProcessingsTreeRequest($tenant_id, $workspace_id, $area_id, $states, $types, $archived);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataProcessingsTree'
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  int $area_id (optional)
     * @param  \OpenAPI\Client\Model\DataProcessingState[] $states (optional)
     * @param  \OpenAPI\Client\Model\ProcessingType[] $types (optional)
     * @param  bool $archived (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataProcessingsTreeRequest($tenant_id, $workspace_id, $area_id = null, $states = null, $types = null, $archived = false)
    {
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling dataProcessingsTree'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling dataProcessingsTree'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/DataProcessings/tree';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($area_id !== null) {
            if('form' === 'form' && is_array($area_id)) {
                foreach($area_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['areaId'] = $area_id;
            }
        }
        // query params
        if ($states !== null) {
            if('form' === 'form' && is_array($states)) {
                foreach($states as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['states'] = $states;
            }
        }
        // query params
        if ($types !== null) {
            if('form' === 'form' && is_array($types)) {
                foreach($types as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['types'] = $types;
            }
        }
        // query params
        if ($archived !== null) {
            if('form' === 'form' && is_array($archived)) {
                foreach($archived as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['archived'] = $archived;
            }
        }


        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataProcessingsUpdate
     *
     * Saving or updating a data processing record
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  \OpenAPI\Client\Model\DataProcessingDto $data_processing_dto data_processing_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function dataProcessingsUpdate($tenant_id, $workspace_id, $data_processing_dto = null)
    {
        $this->dataProcessingsUpdateWithHttpInfo($tenant_id, $workspace_id, $data_processing_dto);
    }

    /**
     * Operation dataProcessingsUpdateWithHttpInfo
     *
     * Saving or updating a data processing record
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\DataProcessingDto $data_processing_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataProcessingsUpdateWithHttpInfo($tenant_id, $workspace_id, $data_processing_dto = null)
    {
        $request = $this->dataProcessingsUpdateRequest($tenant_id, $workspace_id, $data_processing_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation dataProcessingsUpdateAsync
     *
     * Saving or updating a data processing record
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\DataProcessingDto $data_processing_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsUpdateAsync($tenant_id, $workspace_id, $data_processing_dto = null)
    {
        return $this->dataProcessingsUpdateAsyncWithHttpInfo($tenant_id, $workspace_id, $data_processing_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataProcessingsUpdateAsyncWithHttpInfo
     *
     * Saving or updating a data processing record
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\DataProcessingDto $data_processing_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataProcessingsUpdateAsyncWithHttpInfo($tenant_id, $workspace_id, $data_processing_dto = null)
    {
        $returnType = '';
        $request = $this->dataProcessingsUpdateRequest($tenant_id, $workspace_id, $data_processing_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataProcessingsUpdate'
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\DataProcessingDto $data_processing_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataProcessingsUpdateRequest($tenant_id, $workspace_id, $data_processing_dto = null)
    {
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling dataProcessingsUpdate'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling dataProcessingsUpdate'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/DataProcessings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($data_processing_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data_processing_dto));
            } else {
                $httpBody = $data_processing_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
