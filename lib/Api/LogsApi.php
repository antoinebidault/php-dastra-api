<?php
/**
 * LogsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dastra API
 *
 * Dastra's public REST API
 *
 * The version of the OpenAPI document: v1
 * Contact: antoine.bidault@dastra.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * LogsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LogsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation logsExport
     *
     * Download logs as csv
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  int $page page (optional)
     * @param  int $size size (optional)
     * @param  int $workspace_id workspace_id (optional)
     * @param  \DateTime $start start (optional)
     * @param  \DateTime $end end (optional)
     * @param  \OpenAPI\Client\Model\TypeQuery $type_query type_query (optional)
     * @param  bool $user_excluded user_excluded (optional)
     * @param  int $user_id user_id (optional)
     * @param  \OpenAPI\Client\Model\LogObjectType $type type (optional)
     * @param  \OpenAPI\Client\Model\NotificationChannel[] $channels channels (optional)
     * @param  string $ref_id ref_id (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function logsExport($tenant_id, $page = null, $size = null, $workspace_id = null, $start = null, $end = null, $type_query = null, $user_excluded = null, $user_id = null, $type = null, $channels = null, $ref_id = null)
    {
        $this->logsExportWithHttpInfo($tenant_id, $page, $size, $workspace_id, $start, $end, $type_query, $user_excluded, $user_id, $type, $channels, $ref_id);
    }

    /**
     * Operation logsExportWithHttpInfo
     *
     * Download logs as csv
     *
     * @param  string $tenant_id (required)
     * @param  int $page (optional)
     * @param  int $size (optional)
     * @param  int $workspace_id (optional)
     * @param  \DateTime $start (optional)
     * @param  \DateTime $end (optional)
     * @param  \OpenAPI\Client\Model\TypeQuery $type_query (optional)
     * @param  bool $user_excluded (optional)
     * @param  int $user_id (optional)
     * @param  \OpenAPI\Client\Model\LogObjectType $type (optional)
     * @param  \OpenAPI\Client\Model\NotificationChannel[] $channels (optional)
     * @param  string $ref_id (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function logsExportWithHttpInfo($tenant_id, $page = null, $size = null, $workspace_id = null, $start = null, $end = null, $type_query = null, $user_excluded = null, $user_id = null, $type = null, $channels = null, $ref_id = null)
    {
        $request = $this->logsExportRequest($tenant_id, $page, $size, $workspace_id, $start, $end, $type_query, $user_excluded, $user_id, $type, $channels, $ref_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation logsExportAsync
     *
     * Download logs as csv
     *
     * @param  string $tenant_id (required)
     * @param  int $page (optional)
     * @param  int $size (optional)
     * @param  int $workspace_id (optional)
     * @param  \DateTime $start (optional)
     * @param  \DateTime $end (optional)
     * @param  \OpenAPI\Client\Model\TypeQuery $type_query (optional)
     * @param  bool $user_excluded (optional)
     * @param  int $user_id (optional)
     * @param  \OpenAPI\Client\Model\LogObjectType $type (optional)
     * @param  \OpenAPI\Client\Model\NotificationChannel[] $channels (optional)
     * @param  string $ref_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function logsExportAsync($tenant_id, $page = null, $size = null, $workspace_id = null, $start = null, $end = null, $type_query = null, $user_excluded = null, $user_id = null, $type = null, $channels = null, $ref_id = null)
    {
        return $this->logsExportAsyncWithHttpInfo($tenant_id, $page, $size, $workspace_id, $start, $end, $type_query, $user_excluded, $user_id, $type, $channels, $ref_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation logsExportAsyncWithHttpInfo
     *
     * Download logs as csv
     *
     * @param  string $tenant_id (required)
     * @param  int $page (optional)
     * @param  int $size (optional)
     * @param  int $workspace_id (optional)
     * @param  \DateTime $start (optional)
     * @param  \DateTime $end (optional)
     * @param  \OpenAPI\Client\Model\TypeQuery $type_query (optional)
     * @param  bool $user_excluded (optional)
     * @param  int $user_id (optional)
     * @param  \OpenAPI\Client\Model\LogObjectType $type (optional)
     * @param  \OpenAPI\Client\Model\NotificationChannel[] $channels (optional)
     * @param  string $ref_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function logsExportAsyncWithHttpInfo($tenant_id, $page = null, $size = null, $workspace_id = null, $start = null, $end = null, $type_query = null, $user_excluded = null, $user_id = null, $type = null, $channels = null, $ref_id = null)
    {
        $returnType = '';
        $request = $this->logsExportRequest($tenant_id, $page, $size, $workspace_id, $start, $end, $type_query, $user_excluded, $user_id, $type, $channels, $ref_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'logsExport'
     *
     * @param  string $tenant_id (required)
     * @param  int $page (optional)
     * @param  int $size (optional)
     * @param  int $workspace_id (optional)
     * @param  \DateTime $start (optional)
     * @param  \DateTime $end (optional)
     * @param  \OpenAPI\Client\Model\TypeQuery $type_query (optional)
     * @param  bool $user_excluded (optional)
     * @param  int $user_id (optional)
     * @param  \OpenAPI\Client\Model\LogObjectType $type (optional)
     * @param  \OpenAPI\Client\Model\NotificationChannel[] $channels (optional)
     * @param  string $ref_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function logsExportRequest($tenant_id, $page = null, $size = null, $workspace_id = null, $start = null, $end = null, $type_query = null, $user_excluded = null, $user_id = null, $type = null, $channels = null, $ref_id = null)
    {
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling logsExport'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/Logs/export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($size !== null) {
            if('form' === 'form' && is_array($size)) {
                foreach($size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['size'] = $size;
            }
        }
        // query params
        if ($workspace_id !== null) {
            if('form' === 'form' && is_array($workspace_id)) {
                foreach($workspace_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['workspaceId'] = $workspace_id;
            }
        }
        // query params
        if ($start !== null) {
            if('form' === 'form' && is_array($start)) {
                foreach($start as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start'] = $start;
            }
        }
        // query params
        if ($end !== null) {
            if('form' === 'form' && is_array($end)) {
                foreach($end as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['end'] = $end;
            }
        }
        // query params
        if ($type_query !== null) {
            if('form' === 'form' && is_array($type_query)) {
                foreach($type_query as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['typeQuery'] = $type_query;
            }
        }
        // query params
        if ($user_excluded !== null) {
            if('form' === 'form' && is_array($user_excluded)) {
                foreach($user_excluded as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userExcluded'] = $user_excluded;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }
        // query params
        if ($type !== null) {
            if('form' === 'form' && is_array($type)) {
                foreach($type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['type'] = $type;
            }
        }
        // query params
        if ($channels !== null) {
            if('form' === 'form' && is_array($channels)) {
                foreach($channels as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['channels'] = $channels;
            }
        }
        // query params
        if ($ref_id !== null) {
            if('form' === 'form' && is_array($ref_id)) {
                foreach($ref_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['refId'] = $ref_id;
            }
        }


        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation logsHistory
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  int $user_id user_id (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function logsHistory($tenant_id, $user_id = null)
    {
        $this->logsHistoryWithHttpInfo($tenant_id, $user_id);
    }

    /**
     * Operation logsHistoryWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  int $user_id (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function logsHistoryWithHttpInfo($tenant_id, $user_id = null)
    {
        $request = $this->logsHistoryRequest($tenant_id, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation logsHistoryAsync
     *
     * 
     *
     * @param  string $tenant_id (required)
     * @param  int $user_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function logsHistoryAsync($tenant_id, $user_id = null)
    {
        return $this->logsHistoryAsyncWithHttpInfo($tenant_id, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation logsHistoryAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $tenant_id (required)
     * @param  int $user_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function logsHistoryAsyncWithHttpInfo($tenant_id, $user_id = null)
    {
        $returnType = '';
        $request = $this->logsHistoryRequest($tenant_id, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'logsHistory'
     *
     * @param  string $tenant_id (required)
     * @param  int $user_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function logsHistoryRequest($tenant_id, $user_id = null)
    {
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling logsHistory'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/Logs/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }


        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation logsList
     *
     * Get logs
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  int $page page (optional)
     * @param  int $size size (optional)
     * @param  int $workspace_id workspace_id (optional)
     * @param  \DateTime $start start (optional)
     * @param  \DateTime $end end (optional)
     * @param  \OpenAPI\Client\Model\TypeQuery $type_query type_query (optional)
     * @param  bool $user_excluded user_excluded (optional)
     * @param  int $user_id user_id (optional)
     * @param  \OpenAPI\Client\Model\LogObjectType $type type (optional)
     * @param  \OpenAPI\Client\Model\NotificationChannel[] $channels channels (optional)
     * @param  string $ref_id ref_id (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LogDto[]
     */
    public function logsList($tenant_id, $page = null, $size = null, $workspace_id = null, $start = null, $end = null, $type_query = null, $user_excluded = null, $user_id = null, $type = null, $channels = null, $ref_id = null)
    {
        list($response) = $this->logsListWithHttpInfo($tenant_id, $page, $size, $workspace_id, $start, $end, $type_query, $user_excluded, $user_id, $type, $channels, $ref_id);
        return $response;
    }

    /**
     * Operation logsListWithHttpInfo
     *
     * Get logs
     *
     * @param  string $tenant_id (required)
     * @param  int $page (optional)
     * @param  int $size (optional)
     * @param  int $workspace_id (optional)
     * @param  \DateTime $start (optional)
     * @param  \DateTime $end (optional)
     * @param  \OpenAPI\Client\Model\TypeQuery $type_query (optional)
     * @param  bool $user_excluded (optional)
     * @param  int $user_id (optional)
     * @param  \OpenAPI\Client\Model\LogObjectType $type (optional)
     * @param  \OpenAPI\Client\Model\NotificationChannel[] $channels (optional)
     * @param  string $ref_id (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LogDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function logsListWithHttpInfo($tenant_id, $page = null, $size = null, $workspace_id = null, $start = null, $end = null, $type_query = null, $user_excluded = null, $user_id = null, $type = null, $channels = null, $ref_id = null)
    {
        $request = $this->logsListRequest($tenant_id, $page, $size, $workspace_id, $start, $end, $type_query, $user_excluded, $user_id, $type, $channels, $ref_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\LogDto[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LogDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LogDto[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LogDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation logsListAsync
     *
     * Get logs
     *
     * @param  string $tenant_id (required)
     * @param  int $page (optional)
     * @param  int $size (optional)
     * @param  int $workspace_id (optional)
     * @param  \DateTime $start (optional)
     * @param  \DateTime $end (optional)
     * @param  \OpenAPI\Client\Model\TypeQuery $type_query (optional)
     * @param  bool $user_excluded (optional)
     * @param  int $user_id (optional)
     * @param  \OpenAPI\Client\Model\LogObjectType $type (optional)
     * @param  \OpenAPI\Client\Model\NotificationChannel[] $channels (optional)
     * @param  string $ref_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function logsListAsync($tenant_id, $page = null, $size = null, $workspace_id = null, $start = null, $end = null, $type_query = null, $user_excluded = null, $user_id = null, $type = null, $channels = null, $ref_id = null)
    {
        return $this->logsListAsyncWithHttpInfo($tenant_id, $page, $size, $workspace_id, $start, $end, $type_query, $user_excluded, $user_id, $type, $channels, $ref_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation logsListAsyncWithHttpInfo
     *
     * Get logs
     *
     * @param  string $tenant_id (required)
     * @param  int $page (optional)
     * @param  int $size (optional)
     * @param  int $workspace_id (optional)
     * @param  \DateTime $start (optional)
     * @param  \DateTime $end (optional)
     * @param  \OpenAPI\Client\Model\TypeQuery $type_query (optional)
     * @param  bool $user_excluded (optional)
     * @param  int $user_id (optional)
     * @param  \OpenAPI\Client\Model\LogObjectType $type (optional)
     * @param  \OpenAPI\Client\Model\NotificationChannel[] $channels (optional)
     * @param  string $ref_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function logsListAsyncWithHttpInfo($tenant_id, $page = null, $size = null, $workspace_id = null, $start = null, $end = null, $type_query = null, $user_excluded = null, $user_id = null, $type = null, $channels = null, $ref_id = null)
    {
        $returnType = '\OpenAPI\Client\Model\LogDto[]';
        $request = $this->logsListRequest($tenant_id, $page, $size, $workspace_id, $start, $end, $type_query, $user_excluded, $user_id, $type, $channels, $ref_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'logsList'
     *
     * @param  string $tenant_id (required)
     * @param  int $page (optional)
     * @param  int $size (optional)
     * @param  int $workspace_id (optional)
     * @param  \DateTime $start (optional)
     * @param  \DateTime $end (optional)
     * @param  \OpenAPI\Client\Model\TypeQuery $type_query (optional)
     * @param  bool $user_excluded (optional)
     * @param  int $user_id (optional)
     * @param  \OpenAPI\Client\Model\LogObjectType $type (optional)
     * @param  \OpenAPI\Client\Model\NotificationChannel[] $channels (optional)
     * @param  string $ref_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function logsListRequest($tenant_id, $page = null, $size = null, $workspace_id = null, $start = null, $end = null, $type_query = null, $user_excluded = null, $user_id = null, $type = null, $channels = null, $ref_id = null)
    {
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling logsList'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/Logs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($size !== null) {
            if('form' === 'form' && is_array($size)) {
                foreach($size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['size'] = $size;
            }
        }
        // query params
        if ($workspace_id !== null) {
            if('form' === 'form' && is_array($workspace_id)) {
                foreach($workspace_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['workspaceId'] = $workspace_id;
            }
        }
        // query params
        if ($start !== null) {
            if('form' === 'form' && is_array($start)) {
                foreach($start as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start'] = $start;
            }
        }
        // query params
        if ($end !== null) {
            if('form' === 'form' && is_array($end)) {
                foreach($end as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['end'] = $end;
            }
        }
        // query params
        if ($type_query !== null) {
            if('form' === 'form' && is_array($type_query)) {
                foreach($type_query as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['typeQuery'] = $type_query;
            }
        }
        // query params
        if ($user_excluded !== null) {
            if('form' === 'form' && is_array($user_excluded)) {
                foreach($user_excluded as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userExcluded'] = $user_excluded;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }
        // query params
        if ($type !== null) {
            if('form' === 'form' && is_array($type)) {
                foreach($type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['type'] = $type;
            }
        }
        // query params
        if ($channels !== null) {
            if('form' === 'form' && is_array($channels)) {
                foreach($channels as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['channels'] = $channels;
            }
        }
        // query params
        if ($ref_id !== null) {
            if('form' === 'form' && is_array($ref_id)) {
                foreach($ref_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['refId'] = $ref_id;
            }
        }


        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
