<?php
/**
 * TasksApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dastra API
 *
 * Dastra's public REST API
 *
 * The version of the OpenAPI document: v1
 * Contact: antoine.bidault@dastra.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * TasksApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TasksApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation tasksArchive
     *
     * @param  int $id id (required)
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  \OpenAPI\Client\Model\ArchivePayload $archive_payload archive_payload (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function tasksArchive($id, $tenant_id, $workspace_id, $archive_payload = null)
    {
        $this->tasksArchiveWithHttpInfo($id, $tenant_id, $workspace_id, $archive_payload);
    }

    /**
     * Operation tasksArchiveWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\ArchivePayload $archive_payload (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksArchiveWithHttpInfo($id, $tenant_id, $workspace_id, $archive_payload = null)
    {
        $request = $this->tasksArchiveRequest($id, $tenant_id, $workspace_id, $archive_payload);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation tasksArchiveAsync
     *
     * 
     *
     * @param  int $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\ArchivePayload $archive_payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksArchiveAsync($id, $tenant_id, $workspace_id, $archive_payload = null)
    {
        return $this->tasksArchiveAsyncWithHttpInfo($id, $tenant_id, $workspace_id, $archive_payload)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tasksArchiveAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\ArchivePayload $archive_payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksArchiveAsyncWithHttpInfo($id, $tenant_id, $workspace_id, $archive_payload = null)
    {
        $returnType = '';
        $request = $this->tasksArchiveRequest($id, $tenant_id, $workspace_id, $archive_payload);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tasksArchive'
     *
     * @param  int $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\ArchivePayload $archive_payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tasksArchiveRequest($id, $tenant_id, $workspace_id, $archive_payload = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling tasksArchive'
            );
        }
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling tasksArchive'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling tasksArchive'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/Tasks/{id}/archive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($archive_payload)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($archive_payload));
            } else {
                $httpBody = $archive_payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tasksBurnDownChart
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  string $project_id project_id (optional)
     * @param  \DateTime $start start (optional)
     * @param  \DateTime $end end (optional)
     * @param  string $iteration_id iteration_id (optional)
     * @param  int $area_id area_id (optional)
     * @param  string $object_id object_id (optional)
     * @param  \OpenAPI\Client\Model\TaskObjectType $object_type object_type (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TaskStatsDto
     */
    public function tasksBurnDownChart($tenant_id, $workspace_id, $project_id = null, $start = null, $end = null, $iteration_id = null, $area_id = null, $object_id = null, $object_type = null)
    {
        list($response) = $this->tasksBurnDownChartWithHttpInfo($tenant_id, $workspace_id, $project_id, $start, $end, $iteration_id, $area_id, $object_id, $object_type);
        return $response;
    }

    /**
     * Operation tasksBurnDownChartWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $project_id (optional)
     * @param  \DateTime $start (optional)
     * @param  \DateTime $end (optional)
     * @param  string $iteration_id (optional)
     * @param  int $area_id (optional)
     * @param  string $object_id (optional)
     * @param  \OpenAPI\Client\Model\TaskObjectType $object_type (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TaskStatsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksBurnDownChartWithHttpInfo($tenant_id, $workspace_id, $project_id = null, $start = null, $end = null, $iteration_id = null, $area_id = null, $object_id = null, $object_type = null)
    {
        $request = $this->tasksBurnDownChartRequest($tenant_id, $workspace_id, $project_id, $start, $end, $iteration_id, $area_id, $object_id, $object_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TaskStatsDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TaskStatsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TaskStatsDto';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TaskStatsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tasksBurnDownChartAsync
     *
     * 
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $project_id (optional)
     * @param  \DateTime $start (optional)
     * @param  \DateTime $end (optional)
     * @param  string $iteration_id (optional)
     * @param  int $area_id (optional)
     * @param  string $object_id (optional)
     * @param  \OpenAPI\Client\Model\TaskObjectType $object_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksBurnDownChartAsync($tenant_id, $workspace_id, $project_id = null, $start = null, $end = null, $iteration_id = null, $area_id = null, $object_id = null, $object_type = null)
    {
        return $this->tasksBurnDownChartAsyncWithHttpInfo($tenant_id, $workspace_id, $project_id, $start, $end, $iteration_id, $area_id, $object_id, $object_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tasksBurnDownChartAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $project_id (optional)
     * @param  \DateTime $start (optional)
     * @param  \DateTime $end (optional)
     * @param  string $iteration_id (optional)
     * @param  int $area_id (optional)
     * @param  string $object_id (optional)
     * @param  \OpenAPI\Client\Model\TaskObjectType $object_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksBurnDownChartAsyncWithHttpInfo($tenant_id, $workspace_id, $project_id = null, $start = null, $end = null, $iteration_id = null, $area_id = null, $object_id = null, $object_type = null)
    {
        $returnType = '\OpenAPI\Client\Model\TaskStatsDto';
        $request = $this->tasksBurnDownChartRequest($tenant_id, $workspace_id, $project_id, $start, $end, $iteration_id, $area_id, $object_id, $object_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tasksBurnDownChart'
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $project_id (optional)
     * @param  \DateTime $start (optional)
     * @param  \DateTime $end (optional)
     * @param  string $iteration_id (optional)
     * @param  int $area_id (optional)
     * @param  string $object_id (optional)
     * @param  \OpenAPI\Client\Model\TaskObjectType $object_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tasksBurnDownChartRequest($tenant_id, $workspace_id, $project_id = null, $start = null, $end = null, $iteration_id = null, $area_id = null, $object_id = null, $object_type = null)
    {
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling tasksBurnDownChart'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling tasksBurnDownChart'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/Tasks/burn-down-chart';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($project_id !== null) {
            if('form' === 'form' && is_array($project_id)) {
                foreach($project_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['projectId'] = $project_id;
            }
        }
        // query params
        if ($start !== null) {
            if('form' === 'form' && is_array($start)) {
                foreach($start as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start'] = $start;
            }
        }
        // query params
        if ($end !== null) {
            if('form' === 'form' && is_array($end)) {
                foreach($end as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['end'] = $end;
            }
        }
        // query params
        if ($iteration_id !== null) {
            if('form' === 'form' && is_array($iteration_id)) {
                foreach($iteration_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['iterationId'] = $iteration_id;
            }
        }
        // query params
        if ($area_id !== null) {
            if('form' === 'form' && is_array($area_id)) {
                foreach($area_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['areaId'] = $area_id;
            }
        }
        // query params
        if ($object_id !== null) {
            if('form' === 'form' && is_array($object_id)) {
                foreach($object_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['objectId'] = $object_id;
            }
        }
        // query params
        if ($object_type !== null) {
            if('form' === 'form' && is_array($object_type)) {
                foreach($object_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['objectType'] = $object_type;
            }
        }


        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tasksColumns
     *
     * Columns available for table display
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function tasksColumns($tenant_id, $workspace_id)
    {
        $this->tasksColumnsWithHttpInfo($tenant_id, $workspace_id);
    }

    /**
     * Operation tasksColumnsWithHttpInfo
     *
     * Columns available for table display
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksColumnsWithHttpInfo($tenant_id, $workspace_id)
    {
        $request = $this->tasksColumnsRequest($tenant_id, $workspace_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation tasksColumnsAsync
     *
     * Columns available for table display
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksColumnsAsync($tenant_id, $workspace_id)
    {
        return $this->tasksColumnsAsyncWithHttpInfo($tenant_id, $workspace_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tasksColumnsAsyncWithHttpInfo
     *
     * Columns available for table display
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksColumnsAsyncWithHttpInfo($tenant_id, $workspace_id)
    {
        $returnType = '';
        $request = $this->tasksColumnsRequest($tenant_id, $workspace_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tasksColumns'
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tasksColumnsRequest($tenant_id, $workspace_id)
    {
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling tasksColumns'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling tasksColumns'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/Tasks/columns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tasksCreate
     *
     * Task creation
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  \OpenAPI\Client\Model\TaskDto $task_dto task_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function tasksCreate($tenant_id, $workspace_id, $task_dto = null)
    {
        $this->tasksCreateWithHttpInfo($tenant_id, $workspace_id, $task_dto);
    }

    /**
     * Operation tasksCreateWithHttpInfo
     *
     * Task creation
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\TaskDto $task_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksCreateWithHttpInfo($tenant_id, $workspace_id, $task_dto = null)
    {
        $request = $this->tasksCreateRequest($tenant_id, $workspace_id, $task_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation tasksCreateAsync
     *
     * Task creation
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\TaskDto $task_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksCreateAsync($tenant_id, $workspace_id, $task_dto = null)
    {
        return $this->tasksCreateAsyncWithHttpInfo($tenant_id, $workspace_id, $task_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tasksCreateAsyncWithHttpInfo
     *
     * Task creation
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\TaskDto $task_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksCreateAsyncWithHttpInfo($tenant_id, $workspace_id, $task_dto = null)
    {
        $returnType = '';
        $request = $this->tasksCreateRequest($tenant_id, $workspace_id, $task_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tasksCreate'
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\TaskDto $task_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tasksCreateRequest($tenant_id, $workspace_id, $task_dto = null)
    {
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling tasksCreate'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling tasksCreate'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/Tasks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($task_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($task_dto));
            } else {
                $httpBody = $task_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tasksCumulativeFlowChart
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  string $project_id project_id (optional)
     * @param  int $area_id area_id (optional)
     * @param  int $nb_days nb_days (optional, default to 180)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TaskStatsDto
     */
    public function tasksCumulativeFlowChart($tenant_id, $workspace_id, $project_id = null, $area_id = null, $nb_days = 180)
    {
        list($response) = $this->tasksCumulativeFlowChartWithHttpInfo($tenant_id, $workspace_id, $project_id, $area_id, $nb_days);
        return $response;
    }

    /**
     * Operation tasksCumulativeFlowChartWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $project_id (optional)
     * @param  int $area_id (optional)
     * @param  int $nb_days (optional, default to 180)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TaskStatsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksCumulativeFlowChartWithHttpInfo($tenant_id, $workspace_id, $project_id = null, $area_id = null, $nb_days = 180)
    {
        $request = $this->tasksCumulativeFlowChartRequest($tenant_id, $workspace_id, $project_id, $area_id, $nb_days);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TaskStatsDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TaskStatsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TaskStatsDto';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TaskStatsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tasksCumulativeFlowChartAsync
     *
     * 
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $project_id (optional)
     * @param  int $area_id (optional)
     * @param  int $nb_days (optional, default to 180)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksCumulativeFlowChartAsync($tenant_id, $workspace_id, $project_id = null, $area_id = null, $nb_days = 180)
    {
        return $this->tasksCumulativeFlowChartAsyncWithHttpInfo($tenant_id, $workspace_id, $project_id, $area_id, $nb_days)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tasksCumulativeFlowChartAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $project_id (optional)
     * @param  int $area_id (optional)
     * @param  int $nb_days (optional, default to 180)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksCumulativeFlowChartAsyncWithHttpInfo($tenant_id, $workspace_id, $project_id = null, $area_id = null, $nb_days = 180)
    {
        $returnType = '\OpenAPI\Client\Model\TaskStatsDto';
        $request = $this->tasksCumulativeFlowChartRequest($tenant_id, $workspace_id, $project_id, $area_id, $nb_days);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tasksCumulativeFlowChart'
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $project_id (optional)
     * @param  int $area_id (optional)
     * @param  int $nb_days (optional, default to 180)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tasksCumulativeFlowChartRequest($tenant_id, $workspace_id, $project_id = null, $area_id = null, $nb_days = 180)
    {
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling tasksCumulativeFlowChart'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling tasksCumulativeFlowChart'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/Tasks/cumulative-flow-chart';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($project_id !== null) {
            if('form' === 'form' && is_array($project_id)) {
                foreach($project_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['projectId'] = $project_id;
            }
        }
        // query params
        if ($area_id !== null) {
            if('form' === 'form' && is_array($area_id)) {
                foreach($area_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['areaId'] = $area_id;
            }
        }
        // query params
        if ($nb_days !== null) {
            if('form' === 'form' && is_array($nb_days)) {
                foreach($nb_days as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['nbDays'] = $nb_days;
            }
        }


        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tasksDelete
     *
     * @param  int $id id (required)
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function tasksDelete($id, $tenant_id, $workspace_id)
    {
        $this->tasksDeleteWithHttpInfo($id, $tenant_id, $workspace_id);
    }

    /**
     * Operation tasksDeleteWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksDeleteWithHttpInfo($id, $tenant_id, $workspace_id)
    {
        $request = $this->tasksDeleteRequest($id, $tenant_id, $workspace_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation tasksDeleteAsync
     *
     * 
     *
     * @param  int $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksDeleteAsync($id, $tenant_id, $workspace_id)
    {
        return $this->tasksDeleteAsyncWithHttpInfo($id, $tenant_id, $workspace_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tasksDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksDeleteAsyncWithHttpInfo($id, $tenant_id, $workspace_id)
    {
        $returnType = '';
        $request = $this->tasksDeleteRequest($id, $tenant_id, $workspace_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tasksDelete'
     *
     * @param  int $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tasksDeleteRequest($id, $tenant_id, $workspace_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling tasksDelete'
            );
        }
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling tasksDelete'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling tasksDelete'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/Tasks/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tasksExport
     *
     * Export the records in any format
     *
     * @param  \OpenAPI\Client\Model\ExportFormat $format format (required)
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  \OpenAPI\Client\Model\TaskQuery $task_query task_query (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function tasksExport($format, $tenant_id, $workspace_id, $task_query = null)
    {
        $this->tasksExportWithHttpInfo($format, $tenant_id, $workspace_id, $task_query);
    }

    /**
     * Operation tasksExportWithHttpInfo
     *
     * Export the records in any format
     *
     * @param  \OpenAPI\Client\Model\ExportFormat $format (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\TaskQuery $task_query (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksExportWithHttpInfo($format, $tenant_id, $workspace_id, $task_query = null)
    {
        $request = $this->tasksExportRequest($format, $tenant_id, $workspace_id, $task_query);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation tasksExportAsync
     *
     * Export the records in any format
     *
     * @param  \OpenAPI\Client\Model\ExportFormat $format (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\TaskQuery $task_query (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksExportAsync($format, $tenant_id, $workspace_id, $task_query = null)
    {
        return $this->tasksExportAsyncWithHttpInfo($format, $tenant_id, $workspace_id, $task_query)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tasksExportAsyncWithHttpInfo
     *
     * Export the records in any format
     *
     * @param  \OpenAPI\Client\Model\ExportFormat $format (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\TaskQuery $task_query (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksExportAsyncWithHttpInfo($format, $tenant_id, $workspace_id, $task_query = null)
    {
        $returnType = '';
        $request = $this->tasksExportRequest($format, $tenant_id, $workspace_id, $task_query);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tasksExport'
     *
     * @param  \OpenAPI\Client\Model\ExportFormat $format (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\TaskQuery $task_query (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tasksExportRequest($format, $tenant_id, $workspace_id, $task_query = null)
    {
        // verify the required parameter 'format' is set
        if ($format === null || (is_array($format) && count($format) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $format when calling tasksExport'
            );
        }
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling tasksExport'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling tasksExport'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/Tasks/export/{format}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($format !== null) {
            $resourcePath = str_replace(
                '{' . 'format' . '}',
                ObjectSerializer::toPathValue($format),
                $resourcePath
            );
        }
        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($task_query)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($task_query));
            } else {
                $httpBody = $task_query;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tasksFind
     *
     * Get a single task by id
     *
     * @param  int $id id (required)
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function tasksFind($id, $tenant_id, $workspace_id)
    {
        $this->tasksFindWithHttpInfo($id, $tenant_id, $workspace_id);
    }

    /**
     * Operation tasksFindWithHttpInfo
     *
     * Get a single task by id
     *
     * @param  int $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksFindWithHttpInfo($id, $tenant_id, $workspace_id)
    {
        $request = $this->tasksFindRequest($id, $tenant_id, $workspace_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation tasksFindAsync
     *
     * Get a single task by id
     *
     * @param  int $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksFindAsync($id, $tenant_id, $workspace_id)
    {
        return $this->tasksFindAsyncWithHttpInfo($id, $tenant_id, $workspace_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tasksFindAsyncWithHttpInfo
     *
     * Get a single task by id
     *
     * @param  int $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksFindAsyncWithHttpInfo($id, $tenant_id, $workspace_id)
    {
        $returnType = '';
        $request = $this->tasksFindRequest($id, $tenant_id, $workspace_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tasksFind'
     *
     * @param  int $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tasksFindRequest($id, $tenant_id, $workspace_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling tasksFind'
            );
        }
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling tasksFind'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling tasksFind'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/Tasks/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tasksList
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  int[] $tags tags (optional)
     * @param  int[] $users users (optional)
     * @param  \OpenAPI\Client\Model\TaskObjectType[] $object_types object_types (optional)
     * @param  string[] $object_ids object_ids (optional)
     * @param  \OpenAPI\Client\Model\Priority[] $prios prios (optional)
     * @param  \OpenAPI\Client\Model\TaskState[] $states states (optional)
     * @param  int[] $workflows workflows (optional)
     * @param  int $area_id area_id (optional)
     * @param  string $project_id project_id (optional)
     * @param  string $iteration iteration (optional)
     * @param  string $q q (optional)
     * @param  bool $overtaking overtaking (optional)
     * @param  \DateTime $start start (optional)
     * @param  \DateTime $end end (optional)
     * @param  bool $archived archived (optional)
     * @param  bool $exclude_done exclude_done (optional)
     * @param  bool $include_children include_children (optional)
     * @param  int $parent_id parent_id (optional)
     * @param  int $page page (optional)
     * @param  int $size size (optional)
     * @param  int $skip skip (optional)
     * @param  string $sort_by sort_by (optional)
     * @param  bool $asc asc (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function tasksList($tenant_id, $workspace_id, $tags = null, $users = null, $object_types = null, $object_ids = null, $prios = null, $states = null, $workflows = null, $area_id = null, $project_id = null, $iteration = null, $q = null, $overtaking = null, $start = null, $end = null, $archived = null, $exclude_done = null, $include_children = null, $parent_id = null, $page = null, $size = null, $skip = null, $sort_by = null, $asc = null)
    {
        $this->tasksListWithHttpInfo($tenant_id, $workspace_id, $tags, $users, $object_types, $object_ids, $prios, $states, $workflows, $area_id, $project_id, $iteration, $q, $overtaking, $start, $end, $archived, $exclude_done, $include_children, $parent_id, $page, $size, $skip, $sort_by, $asc);
    }

    /**
     * Operation tasksListWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  int[] $tags (optional)
     * @param  int[] $users (optional)
     * @param  \OpenAPI\Client\Model\TaskObjectType[] $object_types (optional)
     * @param  string[] $object_ids (optional)
     * @param  \OpenAPI\Client\Model\Priority[] $prios (optional)
     * @param  \OpenAPI\Client\Model\TaskState[] $states (optional)
     * @param  int[] $workflows (optional)
     * @param  int $area_id (optional)
     * @param  string $project_id (optional)
     * @param  string $iteration (optional)
     * @param  string $q (optional)
     * @param  bool $overtaking (optional)
     * @param  \DateTime $start (optional)
     * @param  \DateTime $end (optional)
     * @param  bool $archived (optional)
     * @param  bool $exclude_done (optional)
     * @param  bool $include_children (optional)
     * @param  int $parent_id (optional)
     * @param  int $page (optional)
     * @param  int $size (optional)
     * @param  int $skip (optional)
     * @param  string $sort_by (optional)
     * @param  bool $asc (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksListWithHttpInfo($tenant_id, $workspace_id, $tags = null, $users = null, $object_types = null, $object_ids = null, $prios = null, $states = null, $workflows = null, $area_id = null, $project_id = null, $iteration = null, $q = null, $overtaking = null, $start = null, $end = null, $archived = null, $exclude_done = null, $include_children = null, $parent_id = null, $page = null, $size = null, $skip = null, $sort_by = null, $asc = null)
    {
        $request = $this->tasksListRequest($tenant_id, $workspace_id, $tags, $users, $object_types, $object_ids, $prios, $states, $workflows, $area_id, $project_id, $iteration, $q, $overtaking, $start, $end, $archived, $exclude_done, $include_children, $parent_id, $page, $size, $skip, $sort_by, $asc);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation tasksListAsync
     *
     * 
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  int[] $tags (optional)
     * @param  int[] $users (optional)
     * @param  \OpenAPI\Client\Model\TaskObjectType[] $object_types (optional)
     * @param  string[] $object_ids (optional)
     * @param  \OpenAPI\Client\Model\Priority[] $prios (optional)
     * @param  \OpenAPI\Client\Model\TaskState[] $states (optional)
     * @param  int[] $workflows (optional)
     * @param  int $area_id (optional)
     * @param  string $project_id (optional)
     * @param  string $iteration (optional)
     * @param  string $q (optional)
     * @param  bool $overtaking (optional)
     * @param  \DateTime $start (optional)
     * @param  \DateTime $end (optional)
     * @param  bool $archived (optional)
     * @param  bool $exclude_done (optional)
     * @param  bool $include_children (optional)
     * @param  int $parent_id (optional)
     * @param  int $page (optional)
     * @param  int $size (optional)
     * @param  int $skip (optional)
     * @param  string $sort_by (optional)
     * @param  bool $asc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksListAsync($tenant_id, $workspace_id, $tags = null, $users = null, $object_types = null, $object_ids = null, $prios = null, $states = null, $workflows = null, $area_id = null, $project_id = null, $iteration = null, $q = null, $overtaking = null, $start = null, $end = null, $archived = null, $exclude_done = null, $include_children = null, $parent_id = null, $page = null, $size = null, $skip = null, $sort_by = null, $asc = null)
    {
        return $this->tasksListAsyncWithHttpInfo($tenant_id, $workspace_id, $tags, $users, $object_types, $object_ids, $prios, $states, $workflows, $area_id, $project_id, $iteration, $q, $overtaking, $start, $end, $archived, $exclude_done, $include_children, $parent_id, $page, $size, $skip, $sort_by, $asc)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tasksListAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  int[] $tags (optional)
     * @param  int[] $users (optional)
     * @param  \OpenAPI\Client\Model\TaskObjectType[] $object_types (optional)
     * @param  string[] $object_ids (optional)
     * @param  \OpenAPI\Client\Model\Priority[] $prios (optional)
     * @param  \OpenAPI\Client\Model\TaskState[] $states (optional)
     * @param  int[] $workflows (optional)
     * @param  int $area_id (optional)
     * @param  string $project_id (optional)
     * @param  string $iteration (optional)
     * @param  string $q (optional)
     * @param  bool $overtaking (optional)
     * @param  \DateTime $start (optional)
     * @param  \DateTime $end (optional)
     * @param  bool $archived (optional)
     * @param  bool $exclude_done (optional)
     * @param  bool $include_children (optional)
     * @param  int $parent_id (optional)
     * @param  int $page (optional)
     * @param  int $size (optional)
     * @param  int $skip (optional)
     * @param  string $sort_by (optional)
     * @param  bool $asc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksListAsyncWithHttpInfo($tenant_id, $workspace_id, $tags = null, $users = null, $object_types = null, $object_ids = null, $prios = null, $states = null, $workflows = null, $area_id = null, $project_id = null, $iteration = null, $q = null, $overtaking = null, $start = null, $end = null, $archived = null, $exclude_done = null, $include_children = null, $parent_id = null, $page = null, $size = null, $skip = null, $sort_by = null, $asc = null)
    {
        $returnType = '';
        $request = $this->tasksListRequest($tenant_id, $workspace_id, $tags, $users, $object_types, $object_ids, $prios, $states, $workflows, $area_id, $project_id, $iteration, $q, $overtaking, $start, $end, $archived, $exclude_done, $include_children, $parent_id, $page, $size, $skip, $sort_by, $asc);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tasksList'
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  int[] $tags (optional)
     * @param  int[] $users (optional)
     * @param  \OpenAPI\Client\Model\TaskObjectType[] $object_types (optional)
     * @param  string[] $object_ids (optional)
     * @param  \OpenAPI\Client\Model\Priority[] $prios (optional)
     * @param  \OpenAPI\Client\Model\TaskState[] $states (optional)
     * @param  int[] $workflows (optional)
     * @param  int $area_id (optional)
     * @param  string $project_id (optional)
     * @param  string $iteration (optional)
     * @param  string $q (optional)
     * @param  bool $overtaking (optional)
     * @param  \DateTime $start (optional)
     * @param  \DateTime $end (optional)
     * @param  bool $archived (optional)
     * @param  bool $exclude_done (optional)
     * @param  bool $include_children (optional)
     * @param  int $parent_id (optional)
     * @param  int $page (optional)
     * @param  int $size (optional)
     * @param  int $skip (optional)
     * @param  string $sort_by (optional)
     * @param  bool $asc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tasksListRequest($tenant_id, $workspace_id, $tags = null, $users = null, $object_types = null, $object_ids = null, $prios = null, $states = null, $workflows = null, $area_id = null, $project_id = null, $iteration = null, $q = null, $overtaking = null, $start = null, $end = null, $archived = null, $exclude_done = null, $include_children = null, $parent_id = null, $page = null, $size = null, $skip = null, $sort_by = null, $asc = null)
    {
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling tasksList'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling tasksList'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/Tasks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tags !== null) {
            if('form' === 'form' && is_array($tags)) {
                foreach($tags as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tags'] = $tags;
            }
        }
        // query params
        if ($users !== null) {
            if('form' === 'form' && is_array($users)) {
                foreach($users as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['users'] = $users;
            }
        }
        // query params
        if ($object_types !== null) {
            if('form' === 'form' && is_array($object_types)) {
                foreach($object_types as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['objectTypes'] = $object_types;
            }
        }
        // query params
        if ($object_ids !== null) {
            if('form' === 'form' && is_array($object_ids)) {
                foreach($object_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['objectIds'] = $object_ids;
            }
        }
        // query params
        if ($prios !== null) {
            if('form' === 'form' && is_array($prios)) {
                foreach($prios as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['prios'] = $prios;
            }
        }
        // query params
        if ($states !== null) {
            if('form' === 'form' && is_array($states)) {
                foreach($states as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['states'] = $states;
            }
        }
        // query params
        if ($workflows !== null) {
            if('form' === 'form' && is_array($workflows)) {
                foreach($workflows as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['workflows'] = $workflows;
            }
        }
        // query params
        if ($area_id !== null) {
            if('form' === 'form' && is_array($area_id)) {
                foreach($area_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['areaId'] = $area_id;
            }
        }
        // query params
        if ($project_id !== null) {
            if('form' === 'form' && is_array($project_id)) {
                foreach($project_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['projectId'] = $project_id;
            }
        }
        // query params
        if ($iteration !== null) {
            if('form' === 'form' && is_array($iteration)) {
                foreach($iteration as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['iteration'] = $iteration;
            }
        }
        // query params
        if ($q !== null) {
            if('form' === 'form' && is_array($q)) {
                foreach($q as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['q'] = $q;
            }
        }
        // query params
        if ($overtaking !== null) {
            if('form' === 'form' && is_array($overtaking)) {
                foreach($overtaking as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['overtaking'] = $overtaking;
            }
        }
        // query params
        if ($start !== null) {
            if('form' === 'form' && is_array($start)) {
                foreach($start as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start'] = $start;
            }
        }
        // query params
        if ($end !== null) {
            if('form' === 'form' && is_array($end)) {
                foreach($end as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['end'] = $end;
            }
        }
        // query params
        if ($archived !== null) {
            if('form' === 'form' && is_array($archived)) {
                foreach($archived as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['archived'] = $archived;
            }
        }
        // query params
        if ($exclude_done !== null) {
            if('form' === 'form' && is_array($exclude_done)) {
                foreach($exclude_done as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['excludeDone'] = $exclude_done;
            }
        }
        // query params
        if ($include_children !== null) {
            if('form' === 'form' && is_array($include_children)) {
                foreach($include_children as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['includeChildren'] = $include_children;
            }
        }
        // query params
        if ($parent_id !== null) {
            if('form' === 'form' && is_array($parent_id)) {
                foreach($parent_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['parentId'] = $parent_id;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($size !== null) {
            if('form' === 'form' && is_array($size)) {
                foreach($size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['size'] = $size;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['skip'] = $skip;
            }
        }
        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortBy'] = $sort_by;
            }
        }
        // query params
        if ($asc !== null) {
            if('form' === 'form' && is_array($asc)) {
                foreach($asc as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['asc'] = $asc;
            }
        }


        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tasksListGrouped
     *
     * Get tasks grouped by workflow steps
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  int[] $tags tags (optional)
     * @param  int[] $users users (optional)
     * @param  \OpenAPI\Client\Model\TaskObjectType[] $object_types object_types (optional)
     * @param  string[] $object_ids object_ids (optional)
     * @param  \OpenAPI\Client\Model\Priority[] $prios prios (optional)
     * @param  \OpenAPI\Client\Model\TaskState[] $states states (optional)
     * @param  int[] $workflows workflows (optional)
     * @param  int $area_id area_id (optional)
     * @param  string $project_id project_id (optional)
     * @param  string $iteration iteration (optional)
     * @param  string $q q (optional)
     * @param  bool $overtaking overtaking (optional)
     * @param  \DateTime $start start (optional)
     * @param  \DateTime $end end (optional)
     * @param  bool $archived archived (optional)
     * @param  bool $exclude_done exclude_done (optional)
     * @param  bool $include_children include_children (optional)
     * @param  int $parent_id parent_id (optional)
     * @param  int $page page (optional)
     * @param  int $size size (optional)
     * @param  int $skip skip (optional)
     * @param  string $sort_by sort_by (optional)
     * @param  bool $asc asc (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function tasksListGrouped($tenant_id, $workspace_id, $tags = null, $users = null, $object_types = null, $object_ids = null, $prios = null, $states = null, $workflows = null, $area_id = null, $project_id = null, $iteration = null, $q = null, $overtaking = null, $start = null, $end = null, $archived = null, $exclude_done = null, $include_children = null, $parent_id = null, $page = null, $size = null, $skip = null, $sort_by = null, $asc = null)
    {
        $this->tasksListGroupedWithHttpInfo($tenant_id, $workspace_id, $tags, $users, $object_types, $object_ids, $prios, $states, $workflows, $area_id, $project_id, $iteration, $q, $overtaking, $start, $end, $archived, $exclude_done, $include_children, $parent_id, $page, $size, $skip, $sort_by, $asc);
    }

    /**
     * Operation tasksListGroupedWithHttpInfo
     *
     * Get tasks grouped by workflow steps
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  int[] $tags (optional)
     * @param  int[] $users (optional)
     * @param  \OpenAPI\Client\Model\TaskObjectType[] $object_types (optional)
     * @param  string[] $object_ids (optional)
     * @param  \OpenAPI\Client\Model\Priority[] $prios (optional)
     * @param  \OpenAPI\Client\Model\TaskState[] $states (optional)
     * @param  int[] $workflows (optional)
     * @param  int $area_id (optional)
     * @param  string $project_id (optional)
     * @param  string $iteration (optional)
     * @param  string $q (optional)
     * @param  bool $overtaking (optional)
     * @param  \DateTime $start (optional)
     * @param  \DateTime $end (optional)
     * @param  bool $archived (optional)
     * @param  bool $exclude_done (optional)
     * @param  bool $include_children (optional)
     * @param  int $parent_id (optional)
     * @param  int $page (optional)
     * @param  int $size (optional)
     * @param  int $skip (optional)
     * @param  string $sort_by (optional)
     * @param  bool $asc (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksListGroupedWithHttpInfo($tenant_id, $workspace_id, $tags = null, $users = null, $object_types = null, $object_ids = null, $prios = null, $states = null, $workflows = null, $area_id = null, $project_id = null, $iteration = null, $q = null, $overtaking = null, $start = null, $end = null, $archived = null, $exclude_done = null, $include_children = null, $parent_id = null, $page = null, $size = null, $skip = null, $sort_by = null, $asc = null)
    {
        $request = $this->tasksListGroupedRequest($tenant_id, $workspace_id, $tags, $users, $object_types, $object_ids, $prios, $states, $workflows, $area_id, $project_id, $iteration, $q, $overtaking, $start, $end, $archived, $exclude_done, $include_children, $parent_id, $page, $size, $skip, $sort_by, $asc);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation tasksListGroupedAsync
     *
     * Get tasks grouped by workflow steps
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  int[] $tags (optional)
     * @param  int[] $users (optional)
     * @param  \OpenAPI\Client\Model\TaskObjectType[] $object_types (optional)
     * @param  string[] $object_ids (optional)
     * @param  \OpenAPI\Client\Model\Priority[] $prios (optional)
     * @param  \OpenAPI\Client\Model\TaskState[] $states (optional)
     * @param  int[] $workflows (optional)
     * @param  int $area_id (optional)
     * @param  string $project_id (optional)
     * @param  string $iteration (optional)
     * @param  string $q (optional)
     * @param  bool $overtaking (optional)
     * @param  \DateTime $start (optional)
     * @param  \DateTime $end (optional)
     * @param  bool $archived (optional)
     * @param  bool $exclude_done (optional)
     * @param  bool $include_children (optional)
     * @param  int $parent_id (optional)
     * @param  int $page (optional)
     * @param  int $size (optional)
     * @param  int $skip (optional)
     * @param  string $sort_by (optional)
     * @param  bool $asc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksListGroupedAsync($tenant_id, $workspace_id, $tags = null, $users = null, $object_types = null, $object_ids = null, $prios = null, $states = null, $workflows = null, $area_id = null, $project_id = null, $iteration = null, $q = null, $overtaking = null, $start = null, $end = null, $archived = null, $exclude_done = null, $include_children = null, $parent_id = null, $page = null, $size = null, $skip = null, $sort_by = null, $asc = null)
    {
        return $this->tasksListGroupedAsyncWithHttpInfo($tenant_id, $workspace_id, $tags, $users, $object_types, $object_ids, $prios, $states, $workflows, $area_id, $project_id, $iteration, $q, $overtaking, $start, $end, $archived, $exclude_done, $include_children, $parent_id, $page, $size, $skip, $sort_by, $asc)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tasksListGroupedAsyncWithHttpInfo
     *
     * Get tasks grouped by workflow steps
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  int[] $tags (optional)
     * @param  int[] $users (optional)
     * @param  \OpenAPI\Client\Model\TaskObjectType[] $object_types (optional)
     * @param  string[] $object_ids (optional)
     * @param  \OpenAPI\Client\Model\Priority[] $prios (optional)
     * @param  \OpenAPI\Client\Model\TaskState[] $states (optional)
     * @param  int[] $workflows (optional)
     * @param  int $area_id (optional)
     * @param  string $project_id (optional)
     * @param  string $iteration (optional)
     * @param  string $q (optional)
     * @param  bool $overtaking (optional)
     * @param  \DateTime $start (optional)
     * @param  \DateTime $end (optional)
     * @param  bool $archived (optional)
     * @param  bool $exclude_done (optional)
     * @param  bool $include_children (optional)
     * @param  int $parent_id (optional)
     * @param  int $page (optional)
     * @param  int $size (optional)
     * @param  int $skip (optional)
     * @param  string $sort_by (optional)
     * @param  bool $asc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksListGroupedAsyncWithHttpInfo($tenant_id, $workspace_id, $tags = null, $users = null, $object_types = null, $object_ids = null, $prios = null, $states = null, $workflows = null, $area_id = null, $project_id = null, $iteration = null, $q = null, $overtaking = null, $start = null, $end = null, $archived = null, $exclude_done = null, $include_children = null, $parent_id = null, $page = null, $size = null, $skip = null, $sort_by = null, $asc = null)
    {
        $returnType = '';
        $request = $this->tasksListGroupedRequest($tenant_id, $workspace_id, $tags, $users, $object_types, $object_ids, $prios, $states, $workflows, $area_id, $project_id, $iteration, $q, $overtaking, $start, $end, $archived, $exclude_done, $include_children, $parent_id, $page, $size, $skip, $sort_by, $asc);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tasksListGrouped'
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  int[] $tags (optional)
     * @param  int[] $users (optional)
     * @param  \OpenAPI\Client\Model\TaskObjectType[] $object_types (optional)
     * @param  string[] $object_ids (optional)
     * @param  \OpenAPI\Client\Model\Priority[] $prios (optional)
     * @param  \OpenAPI\Client\Model\TaskState[] $states (optional)
     * @param  int[] $workflows (optional)
     * @param  int $area_id (optional)
     * @param  string $project_id (optional)
     * @param  string $iteration (optional)
     * @param  string $q (optional)
     * @param  bool $overtaking (optional)
     * @param  \DateTime $start (optional)
     * @param  \DateTime $end (optional)
     * @param  bool $archived (optional)
     * @param  bool $exclude_done (optional)
     * @param  bool $include_children (optional)
     * @param  int $parent_id (optional)
     * @param  int $page (optional)
     * @param  int $size (optional)
     * @param  int $skip (optional)
     * @param  string $sort_by (optional)
     * @param  bool $asc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tasksListGroupedRequest($tenant_id, $workspace_id, $tags = null, $users = null, $object_types = null, $object_ids = null, $prios = null, $states = null, $workflows = null, $area_id = null, $project_id = null, $iteration = null, $q = null, $overtaking = null, $start = null, $end = null, $archived = null, $exclude_done = null, $include_children = null, $parent_id = null, $page = null, $size = null, $skip = null, $sort_by = null, $asc = null)
    {
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling tasksListGrouped'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling tasksListGrouped'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/Tasks/grouped';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tags !== null) {
            if('form' === 'form' && is_array($tags)) {
                foreach($tags as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tags'] = $tags;
            }
        }
        // query params
        if ($users !== null) {
            if('form' === 'form' && is_array($users)) {
                foreach($users as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['users'] = $users;
            }
        }
        // query params
        if ($object_types !== null) {
            if('form' === 'form' && is_array($object_types)) {
                foreach($object_types as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['objectTypes'] = $object_types;
            }
        }
        // query params
        if ($object_ids !== null) {
            if('form' === 'form' && is_array($object_ids)) {
                foreach($object_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['objectIds'] = $object_ids;
            }
        }
        // query params
        if ($prios !== null) {
            if('form' === 'form' && is_array($prios)) {
                foreach($prios as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['prios'] = $prios;
            }
        }
        // query params
        if ($states !== null) {
            if('form' === 'form' && is_array($states)) {
                foreach($states as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['states'] = $states;
            }
        }
        // query params
        if ($workflows !== null) {
            if('form' === 'form' && is_array($workflows)) {
                foreach($workflows as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['workflows'] = $workflows;
            }
        }
        // query params
        if ($area_id !== null) {
            if('form' === 'form' && is_array($area_id)) {
                foreach($area_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['areaId'] = $area_id;
            }
        }
        // query params
        if ($project_id !== null) {
            if('form' === 'form' && is_array($project_id)) {
                foreach($project_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['projectId'] = $project_id;
            }
        }
        // query params
        if ($iteration !== null) {
            if('form' === 'form' && is_array($iteration)) {
                foreach($iteration as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['iteration'] = $iteration;
            }
        }
        // query params
        if ($q !== null) {
            if('form' === 'form' && is_array($q)) {
                foreach($q as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['q'] = $q;
            }
        }
        // query params
        if ($overtaking !== null) {
            if('form' === 'form' && is_array($overtaking)) {
                foreach($overtaking as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['overtaking'] = $overtaking;
            }
        }
        // query params
        if ($start !== null) {
            if('form' === 'form' && is_array($start)) {
                foreach($start as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start'] = $start;
            }
        }
        // query params
        if ($end !== null) {
            if('form' === 'form' && is_array($end)) {
                foreach($end as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['end'] = $end;
            }
        }
        // query params
        if ($archived !== null) {
            if('form' === 'form' && is_array($archived)) {
                foreach($archived as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['archived'] = $archived;
            }
        }
        // query params
        if ($exclude_done !== null) {
            if('form' === 'form' && is_array($exclude_done)) {
                foreach($exclude_done as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['excludeDone'] = $exclude_done;
            }
        }
        // query params
        if ($include_children !== null) {
            if('form' === 'form' && is_array($include_children)) {
                foreach($include_children as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['includeChildren'] = $include_children;
            }
        }
        // query params
        if ($parent_id !== null) {
            if('form' === 'form' && is_array($parent_id)) {
                foreach($parent_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['parentId'] = $parent_id;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($size !== null) {
            if('form' === 'form' && is_array($size)) {
                foreach($size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['size'] = $size;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['skip'] = $skip;
            }
        }
        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortBy'] = $sort_by;
            }
        }
        // query params
        if ($asc !== null) {
            if('form' === 'form' && is_array($asc)) {
                foreach($asc as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['asc'] = $asc;
            }
        }


        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tasksPatch
     *
     * @param  int $id id (required)
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  \OpenAPI\Client\Model\Operation[] $operation operation (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function tasksPatch($id, $tenant_id, $workspace_id, $operation = null)
    {
        $this->tasksPatchWithHttpInfo($id, $tenant_id, $workspace_id, $operation);
    }

    /**
     * Operation tasksPatchWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\Operation[] $operation (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksPatchWithHttpInfo($id, $tenant_id, $workspace_id, $operation = null)
    {
        $request = $this->tasksPatchRequest($id, $tenant_id, $workspace_id, $operation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation tasksPatchAsync
     *
     * 
     *
     * @param  int $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\Operation[] $operation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksPatchAsync($id, $tenant_id, $workspace_id, $operation = null)
    {
        return $this->tasksPatchAsyncWithHttpInfo($id, $tenant_id, $workspace_id, $operation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tasksPatchAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\Operation[] $operation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksPatchAsyncWithHttpInfo($id, $tenant_id, $workspace_id, $operation = null)
    {
        $returnType = '';
        $request = $this->tasksPatchRequest($id, $tenant_id, $workspace_id, $operation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tasksPatch'
     *
     * @param  int $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\Operation[] $operation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tasksPatchRequest($id, $tenant_id, $workspace_id, $operation = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling tasksPatch'
            );
        }
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling tasksPatch'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling tasksPatch'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/Tasks/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($operation)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($operation));
            } else {
                $httpBody = $operation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tasksReporting
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  string $project_id project_id (optional)
     * @param  string $iteration_id iteration_id (optional)
     * @param  int $area_id area_id (optional)
     * @param  string $object_id object_id (optional)
     * @param  \OpenAPI\Client\Model\TaskObjectType $object_type object_type (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TaskStatsDto
     */
    public function tasksReporting($tenant_id, $workspace_id, $project_id = null, $iteration_id = null, $area_id = null, $object_id = null, $object_type = null)
    {
        list($response) = $this->tasksReportingWithHttpInfo($tenant_id, $workspace_id, $project_id, $iteration_id, $area_id, $object_id, $object_type);
        return $response;
    }

    /**
     * Operation tasksReportingWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $project_id (optional)
     * @param  string $iteration_id (optional)
     * @param  int $area_id (optional)
     * @param  string $object_id (optional)
     * @param  \OpenAPI\Client\Model\TaskObjectType $object_type (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TaskStatsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksReportingWithHttpInfo($tenant_id, $workspace_id, $project_id = null, $iteration_id = null, $area_id = null, $object_id = null, $object_type = null)
    {
        $request = $this->tasksReportingRequest($tenant_id, $workspace_id, $project_id, $iteration_id, $area_id, $object_id, $object_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TaskStatsDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TaskStatsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TaskStatsDto';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TaskStatsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tasksReportingAsync
     *
     * 
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $project_id (optional)
     * @param  string $iteration_id (optional)
     * @param  int $area_id (optional)
     * @param  string $object_id (optional)
     * @param  \OpenAPI\Client\Model\TaskObjectType $object_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksReportingAsync($tenant_id, $workspace_id, $project_id = null, $iteration_id = null, $area_id = null, $object_id = null, $object_type = null)
    {
        return $this->tasksReportingAsyncWithHttpInfo($tenant_id, $workspace_id, $project_id, $iteration_id, $area_id, $object_id, $object_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tasksReportingAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $project_id (optional)
     * @param  string $iteration_id (optional)
     * @param  int $area_id (optional)
     * @param  string $object_id (optional)
     * @param  \OpenAPI\Client\Model\TaskObjectType $object_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksReportingAsyncWithHttpInfo($tenant_id, $workspace_id, $project_id = null, $iteration_id = null, $area_id = null, $object_id = null, $object_type = null)
    {
        $returnType = '\OpenAPI\Client\Model\TaskStatsDto';
        $request = $this->tasksReportingRequest($tenant_id, $workspace_id, $project_id, $iteration_id, $area_id, $object_id, $object_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tasksReporting'
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $project_id (optional)
     * @param  string $iteration_id (optional)
     * @param  int $area_id (optional)
     * @param  string $object_id (optional)
     * @param  \OpenAPI\Client\Model\TaskObjectType $object_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tasksReportingRequest($tenant_id, $workspace_id, $project_id = null, $iteration_id = null, $area_id = null, $object_id = null, $object_type = null)
    {
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling tasksReporting'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling tasksReporting'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/Tasks/task-reporting';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($project_id !== null) {
            if('form' === 'form' && is_array($project_id)) {
                foreach($project_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['projectId'] = $project_id;
            }
        }
        // query params
        if ($iteration_id !== null) {
            if('form' === 'form' && is_array($iteration_id)) {
                foreach($iteration_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['iterationId'] = $iteration_id;
            }
        }
        // query params
        if ($area_id !== null) {
            if('form' === 'form' && is_array($area_id)) {
                foreach($area_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['areaId'] = $area_id;
            }
        }
        // query params
        if ($object_id !== null) {
            if('form' === 'form' && is_array($object_id)) {
                foreach($object_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['objectId'] = $object_id;
            }
        }
        // query params
        if ($object_type !== null) {
            if('form' === 'form' && is_array($object_type)) {
                foreach($object_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['objectType'] = $object_type;
            }
        }


        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tasksSortOrder
     *
     * Switching the current state of the element  Using this system   https://stackoverflow.com/questions/398425/maintaining-sort-order-of-database-table-rows
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  \OpenAPI\Client\Model\Int32SortQueryDto $int32_sort_query_dto int32_sort_query_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function tasksSortOrder($tenant_id, $workspace_id, $int32_sort_query_dto = null)
    {
        $this->tasksSortOrderWithHttpInfo($tenant_id, $workspace_id, $int32_sort_query_dto);
    }

    /**
     * Operation tasksSortOrderWithHttpInfo
     *
     * Switching the current state of the element  Using this system   https://stackoverflow.com/questions/398425/maintaining-sort-order-of-database-table-rows
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\Int32SortQueryDto $int32_sort_query_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksSortOrderWithHttpInfo($tenant_id, $workspace_id, $int32_sort_query_dto = null)
    {
        $request = $this->tasksSortOrderRequest($tenant_id, $workspace_id, $int32_sort_query_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation tasksSortOrderAsync
     *
     * Switching the current state of the element  Using this system   https://stackoverflow.com/questions/398425/maintaining-sort-order-of-database-table-rows
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\Int32SortQueryDto $int32_sort_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksSortOrderAsync($tenant_id, $workspace_id, $int32_sort_query_dto = null)
    {
        return $this->tasksSortOrderAsyncWithHttpInfo($tenant_id, $workspace_id, $int32_sort_query_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tasksSortOrderAsyncWithHttpInfo
     *
     * Switching the current state of the element  Using this system   https://stackoverflow.com/questions/398425/maintaining-sort-order-of-database-table-rows
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\Int32SortQueryDto $int32_sort_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksSortOrderAsyncWithHttpInfo($tenant_id, $workspace_id, $int32_sort_query_dto = null)
    {
        $returnType = '';
        $request = $this->tasksSortOrderRequest($tenant_id, $workspace_id, $int32_sort_query_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tasksSortOrder'
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\Int32SortQueryDto $int32_sort_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tasksSortOrderRequest($tenant_id, $workspace_id, $int32_sort_query_dto = null)
    {
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling tasksSortOrder'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling tasksSortOrder'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/Tasks/sortOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($int32_sort_query_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($int32_sort_query_dto));
            } else {
                $httpBody = $int32_sort_query_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tasksStats
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  int $area_id area_id (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TaskStatsDto
     */
    public function tasksStats($tenant_id, $workspace_id, $area_id = null)
    {
        list($response) = $this->tasksStatsWithHttpInfo($tenant_id, $workspace_id, $area_id);
        return $response;
    }

    /**
     * Operation tasksStatsWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  int $area_id (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TaskStatsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksStatsWithHttpInfo($tenant_id, $workspace_id, $area_id = null)
    {
        $request = $this->tasksStatsRequest($tenant_id, $workspace_id, $area_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TaskStatsDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TaskStatsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TaskStatsDto';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TaskStatsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tasksStatsAsync
     *
     * 
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  int $area_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksStatsAsync($tenant_id, $workspace_id, $area_id = null)
    {
        return $this->tasksStatsAsyncWithHttpInfo($tenant_id, $workspace_id, $area_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tasksStatsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  int $area_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksStatsAsyncWithHttpInfo($tenant_id, $workspace_id, $area_id = null)
    {
        $returnType = '\OpenAPI\Client\Model\TaskStatsDto';
        $request = $this->tasksStatsRequest($tenant_id, $workspace_id, $area_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tasksStats'
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  int $area_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tasksStatsRequest($tenant_id, $workspace_id, $area_id = null)
    {
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling tasksStats'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling tasksStats'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/Tasks/stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($area_id !== null) {
            if('form' === 'form' && is_array($area_id)) {
                foreach($area_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['areaId'] = $area_id;
            }
        }


        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tasksUpdate
     *
     * Task update
     *
     * @param  int $id id (required)
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  \OpenAPI\Client\Model\TaskDto $task_dto task_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function tasksUpdate($id, $tenant_id, $workspace_id, $task_dto = null)
    {
        $this->tasksUpdateWithHttpInfo($id, $tenant_id, $workspace_id, $task_dto);
    }

    /**
     * Operation tasksUpdateWithHttpInfo
     *
     * Task update
     *
     * @param  int $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\TaskDto $task_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksUpdateWithHttpInfo($id, $tenant_id, $workspace_id, $task_dto = null)
    {
        $request = $this->tasksUpdateRequest($id, $tenant_id, $workspace_id, $task_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation tasksUpdateAsync
     *
     * Task update
     *
     * @param  int $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\TaskDto $task_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksUpdateAsync($id, $tenant_id, $workspace_id, $task_dto = null)
    {
        return $this->tasksUpdateAsyncWithHttpInfo($id, $tenant_id, $workspace_id, $task_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tasksUpdateAsyncWithHttpInfo
     *
     * Task update
     *
     * @param  int $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\TaskDto $task_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksUpdateAsyncWithHttpInfo($id, $tenant_id, $workspace_id, $task_dto = null)
    {
        $returnType = '';
        $request = $this->tasksUpdateRequest($id, $tenant_id, $workspace_id, $task_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tasksUpdate'
     *
     * @param  int $id (required)
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\TaskDto $task_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tasksUpdateRequest($id, $tenant_id, $workspace_id, $task_dto = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling tasksUpdate'
            );
        }
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling tasksUpdate'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling tasksUpdate'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/Tasks/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($task_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($task_dto));
            } else {
                $httpBody = $task_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tasksUpdateWorkflow
     *
     * Switching the current state of the element
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  \OpenAPI\Client\Model\Int32WorkflowUpdateDto $int32_workflow_update_dto int32_workflow_update_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function tasksUpdateWorkflow($tenant_id, $workspace_id, $int32_workflow_update_dto = null)
    {
        $this->tasksUpdateWorkflowWithHttpInfo($tenant_id, $workspace_id, $int32_workflow_update_dto);
    }

    /**
     * Operation tasksUpdateWorkflowWithHttpInfo
     *
     * Switching the current state of the element
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\Int32WorkflowUpdateDto $int32_workflow_update_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksUpdateWorkflowWithHttpInfo($tenant_id, $workspace_id, $int32_workflow_update_dto = null)
    {
        $request = $this->tasksUpdateWorkflowRequest($tenant_id, $workspace_id, $int32_workflow_update_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation tasksUpdateWorkflowAsync
     *
     * Switching the current state of the element
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\Int32WorkflowUpdateDto $int32_workflow_update_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksUpdateWorkflowAsync($tenant_id, $workspace_id, $int32_workflow_update_dto = null)
    {
        return $this->tasksUpdateWorkflowAsyncWithHttpInfo($tenant_id, $workspace_id, $int32_workflow_update_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tasksUpdateWorkflowAsyncWithHttpInfo
     *
     * Switching the current state of the element
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\Int32WorkflowUpdateDto $int32_workflow_update_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksUpdateWorkflowAsyncWithHttpInfo($tenant_id, $workspace_id, $int32_workflow_update_dto = null)
    {
        $returnType = '';
        $request = $this->tasksUpdateWorkflowRequest($tenant_id, $workspace_id, $int32_workflow_update_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tasksUpdateWorkflow'
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\Int32WorkflowUpdateDto $int32_workflow_update_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tasksUpdateWorkflowRequest($tenant_id, $workspace_id, $int32_workflow_update_dto = null)
    {
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling tasksUpdateWorkflow'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling tasksUpdateWorkflow'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/Tasks/workflow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($int32_workflow_update_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($int32_workflow_update_dto));
            } else {
                $httpBody = $int32_workflow_update_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tasksVelocityChart
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  string $project_id project_id (optional)
     * @param  int $area_id area_id (optional)
     * @param  int $nb_iterations nb_iterations (optional, default to 10)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TaskStatsDto
     */
    public function tasksVelocityChart($tenant_id, $workspace_id, $project_id = null, $area_id = null, $nb_iterations = 10)
    {
        list($response) = $this->tasksVelocityChartWithHttpInfo($tenant_id, $workspace_id, $project_id, $area_id, $nb_iterations);
        return $response;
    }

    /**
     * Operation tasksVelocityChartWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $project_id (optional)
     * @param  int $area_id (optional)
     * @param  int $nb_iterations (optional, default to 10)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TaskStatsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksVelocityChartWithHttpInfo($tenant_id, $workspace_id, $project_id = null, $area_id = null, $nb_iterations = 10)
    {
        $request = $this->tasksVelocityChartRequest($tenant_id, $workspace_id, $project_id, $area_id, $nb_iterations);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TaskStatsDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TaskStatsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TaskStatsDto';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TaskStatsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tasksVelocityChartAsync
     *
     * 
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $project_id (optional)
     * @param  int $area_id (optional)
     * @param  int $nb_iterations (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksVelocityChartAsync($tenant_id, $workspace_id, $project_id = null, $area_id = null, $nb_iterations = 10)
    {
        return $this->tasksVelocityChartAsyncWithHttpInfo($tenant_id, $workspace_id, $project_id, $area_id, $nb_iterations)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tasksVelocityChartAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $project_id (optional)
     * @param  int $area_id (optional)
     * @param  int $nb_iterations (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksVelocityChartAsyncWithHttpInfo($tenant_id, $workspace_id, $project_id = null, $area_id = null, $nb_iterations = 10)
    {
        $returnType = '\OpenAPI\Client\Model\TaskStatsDto';
        $request = $this->tasksVelocityChartRequest($tenant_id, $workspace_id, $project_id, $area_id, $nb_iterations);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tasksVelocityChart'
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  string $project_id (optional)
     * @param  int $area_id (optional)
     * @param  int $nb_iterations (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tasksVelocityChartRequest($tenant_id, $workspace_id, $project_id = null, $area_id = null, $nb_iterations = 10)
    {
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling tasksVelocityChart'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling tasksVelocityChart'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/Tasks/velocity-chart';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($project_id !== null) {
            if('form' === 'form' && is_array($project_id)) {
                foreach($project_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['projectId'] = $project_id;
            }
        }
        // query params
        if ($area_id !== null) {
            if('form' === 'form' && is_array($area_id)) {
                foreach($area_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['areaId'] = $area_id;
            }
        }
        // query params
        if ($nb_iterations !== null) {
            if('form' === 'form' && is_array($nb_iterations)) {
                foreach($nb_iterations as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['nbIterations'] = $nb_iterations;
            }
        }


        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tasksWorkflowStats
     *
     * Get the workflow stats
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  \OpenAPI\Client\Model\TaskQuery $task_query task_query (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function tasksWorkflowStats($tenant_id, $workspace_id, $task_query = null)
    {
        $this->tasksWorkflowStatsWithHttpInfo($tenant_id, $workspace_id, $task_query);
    }

    /**
     * Operation tasksWorkflowStatsWithHttpInfo
     *
     * Get the workflow stats
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\TaskQuery $task_query (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksWorkflowStatsWithHttpInfo($tenant_id, $workspace_id, $task_query = null)
    {
        $request = $this->tasksWorkflowStatsRequest($tenant_id, $workspace_id, $task_query);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation tasksWorkflowStatsAsync
     *
     * Get the workflow stats
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\TaskQuery $task_query (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksWorkflowStatsAsync($tenant_id, $workspace_id, $task_query = null)
    {
        return $this->tasksWorkflowStatsAsyncWithHttpInfo($tenant_id, $workspace_id, $task_query)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tasksWorkflowStatsAsyncWithHttpInfo
     *
     * Get the workflow stats
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\TaskQuery $task_query (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksWorkflowStatsAsyncWithHttpInfo($tenant_id, $workspace_id, $task_query = null)
    {
        $returnType = '';
        $request = $this->tasksWorkflowStatsRequest($tenant_id, $workspace_id, $task_query);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tasksWorkflowStats'
     *
     * @param  string $tenant_id (required)
     * @param  string $workspace_id (required)
     * @param  \OpenAPI\Client\Model\TaskQuery $task_query (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tasksWorkflowStatsRequest($tenant_id, $workspace_id, $task_query = null)
    {
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling tasksWorkflowStats'
            );
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling tasksWorkflowStats'
            );
        }

        $resourcePath = '/v1/tenant/{tenantId}/ws/{workspaceId}/Tasks/workflow-stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($task_query)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($task_query));
            } else {
                $httpBody = $task_query;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
