<?php
/**
 * WorkFlowStepDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dastra API
 *
 * Dastra's public REST API
 *
 * The version of the OpenAPI document: v1
 * Contact: antoine.bidault@dastra.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * WorkFlowStepDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class WorkFlowStepDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WorkFlowStepDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'label' => 'string',
        'color' => 'string',
        'order' => 'int',
        'item_limit' => 'int',
        'type' => '\OpenAPI\Client\Model\WorkFlowType',
        'work_space_id' => 'int',
        'final_step' => 'bool',
        'initial_step' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'label' => null,
        'color' => null,
        'order' => 'int32',
        'item_limit' => 'int32',
        'type' => null,
        'work_space_id' => 'int32',
        'final_step' => null,
        'initial_step' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'label' => 'label',
        'color' => 'color',
        'order' => 'order',
        'item_limit' => 'itemLimit',
        'type' => 'type',
        'work_space_id' => 'workSpaceId',
        'final_step' => 'finalStep',
        'initial_step' => 'initialStep'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'label' => 'setLabel',
        'color' => 'setColor',
        'order' => 'setOrder',
        'item_limit' => 'setItemLimit',
        'type' => 'setType',
        'work_space_id' => 'setWorkSpaceId',
        'final_step' => 'setFinalStep',
        'initial_step' => 'setInitialStep'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'label' => 'getLabel',
        'color' => 'getColor',
        'order' => 'getOrder',
        'item_limit' => 'getItemLimit',
        'type' => 'getType',
        'work_space_id' => 'getWorkSpaceId',
        'final_step' => 'getFinalStep',
        'initial_step' => 'getInitialStep'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['label'] = $data['label'] ?? null;
        $this->container['color'] = $data['color'] ?? null;
        $this->container['order'] = $data['order'] ?? null;
        $this->container['item_limit'] = $data['item_limit'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['work_space_id'] = $data['work_space_id'] ?? null;
        $this->container['final_step'] = $data['final_step'] ?? null;
        $this->container['initial_step'] = $data['initial_step'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['label'] === null) {
            $invalidProperties[] = "'label' can't be null";
        }
        if ((mb_strlen($this->container['label']) > 120)) {
            $invalidProperties[] = "invalid value for 'label', the character length must be smaller than or equal to 120.";
        }

        if (!is_null($this->container['color']) && (mb_strlen($this->container['color']) > 9)) {
            $invalidProperties[] = "invalid value for 'color', the character length must be smaller than or equal to 9.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        if ((mb_strlen($label) > 120)) {
            throw new \InvalidArgumentException('invalid length for $label when calling WorkFlowStepDto., must be smaller than or equal to 120.');
        }

        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color color
     *
     * @return self
     */
    public function setColor($color)
    {
        if (!is_null($color) && (mb_strlen($color) > 9)) {
            throw new \InvalidArgumentException('invalid length for $color when calling WorkFlowStepDto., must be smaller than or equal to 9.');
        }

        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets item_limit
     *
     * @return int|null
     */
    public function getItemLimit()
    {
        return $this->container['item_limit'];
    }

    /**
     * Sets item_limit
     *
     * @param int|null $item_limit item_limit
     *
     * @return self
     */
    public function setItemLimit($item_limit)
    {
        $this->container['item_limit'] = $item_limit;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\WorkFlowType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\WorkFlowType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets work_space_id
     *
     * @return int|null
     */
    public function getWorkSpaceId()
    {
        return $this->container['work_space_id'];
    }

    /**
     * Sets work_space_id
     *
     * @param int|null $work_space_id work_space_id
     *
     * @return self
     */
    public function setWorkSpaceId($work_space_id)
    {
        $this->container['work_space_id'] = $work_space_id;

        return $this;
    }

    /**
     * Gets final_step
     *
     * @return bool|null
     */
    public function getFinalStep()
    {
        return $this->container['final_step'];
    }

    /**
     * Sets final_step
     *
     * @param bool|null $final_step final_step
     *
     * @return self
     */
    public function setFinalStep($final_step)
    {
        $this->container['final_step'] = $final_step;

        return $this;
    }

    /**
     * Gets initial_step
     *
     * @return bool|null
     */
    public function getInitialStep()
    {
        return $this->container['initial_step'];
    }

    /**
     * Sets initial_step
     *
     * @param bool|null $initial_step initial_step
     *
     * @return self
     */
    public function setInitialStep($initial_step)
    {
        $this->container['initial_step'] = $initial_step;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


