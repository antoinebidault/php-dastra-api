<?php
/**
 * UserRequestDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dastra API
 *
 * Dastra's public REST API
 *
 * The version of the OpenAPI document: v1
 * Contact: antoine.bidault@dastra.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UserRequestDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class UserRequestDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserRequestDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'closed_by_user' => '\OpenAPI\Client\Model\UserLightDto',
        'area' => '\OpenAPI\Client\Model\AreaDto',
        'creator' => '\OpenAPI\Client\Model\UserLightDto',
        'operator' => '\OpenAPI\Client\Model\UserLightDto',
        'attachments' => '\OpenAPI\Client\Model\UserRequestAttachmentDto[]',
        'tags' => '\OpenAPI\Client\Model\TagDto[]',
        'id' => 'int',
        'title' => 'string',
        'locale' => 'string',
        'archived' => 'bool',
        'complex' => 'bool',
        'date_closed' => '\DateTime',
        'area_id' => 'int',
        'state' => '\OpenAPI\Client\Model\UserRequestState',
        'description' => 'string',
        'message' => 'string',
        'email' => 'string',
        'phone_number' => 'string',
        'given_name' => 'string',
        'family_name' => 'string',
        'date_creation' => '\DateTime',
        'date_update' => '\DateTime',
        'work_flow_step' => '\OpenAPI\Client\Model\WorkFlowStepDto',
        'channel' => '\OpenAPI\Client\Model\UserRequestSource',
        'ref_id' => 'string',
        'user_id' => 'string',
        'purpose' => '\OpenAPI\Client\Model\PurposeType',
        'closed_reason' => '\OpenAPI\Client\Model\ClosedReason',
        'closed_reason_description' => 'string',
        'expiry_time' => '\DateTime',
        'address' => 'string',
        'zip_code' => 'string',
        'city' => 'string',
        'country_code' => 'string',
        'nb_messages' => 'int',
        'nb_messages_not_viewed' => 'int',
        'remaining_days' => 'int',
        'closing_time' => 'int',
        'additional_datas' => 'mixed',
        'user_notified' => 'bool',
        'date_user_notified' => '\DateTime',
        'send_notification' => 'bool',
        'email_validation_date' => '\DateTime',
        'mail_validated' => 'bool',
        'referrer_url' => 'string',
        'demand_id' => 'string',
        'identity_validated' => 'bool',
        'date_identity_validated' => '\DateTime',
        'widget_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'closed_by_user' => null,
        'area' => null,
        'creator' => null,
        'operator' => null,
        'attachments' => null,
        'tags' => null,
        'id' => 'int32',
        'title' => null,
        'locale' => null,
        'archived' => null,
        'complex' => null,
        'date_closed' => 'date-time',
        'area_id' => 'int32',
        'state' => null,
        'description' => null,
        'message' => null,
        'email' => null,
        'phone_number' => null,
        'given_name' => null,
        'family_name' => null,
        'date_creation' => 'date-time',
        'date_update' => 'date-time',
        'work_flow_step' => null,
        'channel' => null,
        'ref_id' => null,
        'user_id' => null,
        'purpose' => null,
        'closed_reason' => null,
        'closed_reason_description' => null,
        'expiry_time' => 'date-time',
        'address' => null,
        'zip_code' => null,
        'city' => null,
        'country_code' => null,
        'nb_messages' => 'int32',
        'nb_messages_not_viewed' => 'int32',
        'remaining_days' => 'int32',
        'closing_time' => 'int32',
        'additional_datas' => null,
        'user_notified' => null,
        'date_user_notified' => 'date-time',
        'send_notification' => null,
        'email_validation_date' => 'date-time',
        'mail_validated' => null,
        'referrer_url' => null,
        'demand_id' => null,
        'identity_validated' => null,
        'date_identity_validated' => 'date-time',
        'widget_id' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'closed_by_user' => 'closedByUser',
        'area' => 'area',
        'creator' => 'creator',
        'operator' => 'operator',
        'attachments' => 'attachments',
        'tags' => 'tags',
        'id' => 'id',
        'title' => 'title',
        'locale' => 'locale',
        'archived' => 'archived',
        'complex' => 'complex',
        'date_closed' => 'dateClosed',
        'area_id' => 'areaId',
        'state' => 'state',
        'description' => 'description',
        'message' => 'message',
        'email' => 'email',
        'phone_number' => 'phoneNumber',
        'given_name' => 'givenName',
        'family_name' => 'familyName',
        'date_creation' => 'dateCreation',
        'date_update' => 'dateUpdate',
        'work_flow_step' => 'workFlowStep',
        'channel' => 'channel',
        'ref_id' => 'refId',
        'user_id' => 'userId',
        'purpose' => 'purpose',
        'closed_reason' => 'closedReason',
        'closed_reason_description' => 'closedReasonDescription',
        'expiry_time' => 'expiryTime',
        'address' => 'address',
        'zip_code' => 'zipCode',
        'city' => 'city',
        'country_code' => 'countryCode',
        'nb_messages' => 'nbMessages',
        'nb_messages_not_viewed' => 'nbMessagesNotViewed',
        'remaining_days' => 'remainingDays',
        'closing_time' => 'closingTime',
        'additional_datas' => 'additionalDatas',
        'user_notified' => 'userNotified',
        'date_user_notified' => 'dateUserNotified',
        'send_notification' => 'sendNotification',
        'email_validation_date' => 'emailValidationDate',
        'mail_validated' => 'mailValidated',
        'referrer_url' => 'referrerUrl',
        'demand_id' => 'demandId',
        'identity_validated' => 'identityValidated',
        'date_identity_validated' => 'dateIdentityValidated',
        'widget_id' => 'widgetId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'closed_by_user' => 'setClosedByUser',
        'area' => 'setArea',
        'creator' => 'setCreator',
        'operator' => 'setOperator',
        'attachments' => 'setAttachments',
        'tags' => 'setTags',
        'id' => 'setId',
        'title' => 'setTitle',
        'locale' => 'setLocale',
        'archived' => 'setArchived',
        'complex' => 'setComplex',
        'date_closed' => 'setDateClosed',
        'area_id' => 'setAreaId',
        'state' => 'setState',
        'description' => 'setDescription',
        'message' => 'setMessage',
        'email' => 'setEmail',
        'phone_number' => 'setPhoneNumber',
        'given_name' => 'setGivenName',
        'family_name' => 'setFamilyName',
        'date_creation' => 'setDateCreation',
        'date_update' => 'setDateUpdate',
        'work_flow_step' => 'setWorkFlowStep',
        'channel' => 'setChannel',
        'ref_id' => 'setRefId',
        'user_id' => 'setUserId',
        'purpose' => 'setPurpose',
        'closed_reason' => 'setClosedReason',
        'closed_reason_description' => 'setClosedReasonDescription',
        'expiry_time' => 'setExpiryTime',
        'address' => 'setAddress',
        'zip_code' => 'setZipCode',
        'city' => 'setCity',
        'country_code' => 'setCountryCode',
        'nb_messages' => 'setNbMessages',
        'nb_messages_not_viewed' => 'setNbMessagesNotViewed',
        'remaining_days' => 'setRemainingDays',
        'closing_time' => 'setClosingTime',
        'additional_datas' => 'setAdditionalDatas',
        'user_notified' => 'setUserNotified',
        'date_user_notified' => 'setDateUserNotified',
        'send_notification' => 'setSendNotification',
        'email_validation_date' => 'setEmailValidationDate',
        'mail_validated' => 'setMailValidated',
        'referrer_url' => 'setReferrerUrl',
        'demand_id' => 'setDemandId',
        'identity_validated' => 'setIdentityValidated',
        'date_identity_validated' => 'setDateIdentityValidated',
        'widget_id' => 'setWidgetId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'closed_by_user' => 'getClosedByUser',
        'area' => 'getArea',
        'creator' => 'getCreator',
        'operator' => 'getOperator',
        'attachments' => 'getAttachments',
        'tags' => 'getTags',
        'id' => 'getId',
        'title' => 'getTitle',
        'locale' => 'getLocale',
        'archived' => 'getArchived',
        'complex' => 'getComplex',
        'date_closed' => 'getDateClosed',
        'area_id' => 'getAreaId',
        'state' => 'getState',
        'description' => 'getDescription',
        'message' => 'getMessage',
        'email' => 'getEmail',
        'phone_number' => 'getPhoneNumber',
        'given_name' => 'getGivenName',
        'family_name' => 'getFamilyName',
        'date_creation' => 'getDateCreation',
        'date_update' => 'getDateUpdate',
        'work_flow_step' => 'getWorkFlowStep',
        'channel' => 'getChannel',
        'ref_id' => 'getRefId',
        'user_id' => 'getUserId',
        'purpose' => 'getPurpose',
        'closed_reason' => 'getClosedReason',
        'closed_reason_description' => 'getClosedReasonDescription',
        'expiry_time' => 'getExpiryTime',
        'address' => 'getAddress',
        'zip_code' => 'getZipCode',
        'city' => 'getCity',
        'country_code' => 'getCountryCode',
        'nb_messages' => 'getNbMessages',
        'nb_messages_not_viewed' => 'getNbMessagesNotViewed',
        'remaining_days' => 'getRemainingDays',
        'closing_time' => 'getClosingTime',
        'additional_datas' => 'getAdditionalDatas',
        'user_notified' => 'getUserNotified',
        'date_user_notified' => 'getDateUserNotified',
        'send_notification' => 'getSendNotification',
        'email_validation_date' => 'getEmailValidationDate',
        'mail_validated' => 'getMailValidated',
        'referrer_url' => 'getReferrerUrl',
        'demand_id' => 'getDemandId',
        'identity_validated' => 'getIdentityValidated',
        'date_identity_validated' => 'getDateIdentityValidated',
        'widget_id' => 'getWidgetId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['closed_by_user'] = $data['closed_by_user'] ?? null;
        $this->container['area'] = $data['area'] ?? null;
        $this->container['creator'] = $data['creator'] ?? null;
        $this->container['operator'] = $data['operator'] ?? null;
        $this->container['attachments'] = $data['attachments'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['locale'] = $data['locale'] ?? null;
        $this->container['archived'] = $data['archived'] ?? null;
        $this->container['complex'] = $data['complex'] ?? null;
        $this->container['date_closed'] = $data['date_closed'] ?? null;
        $this->container['area_id'] = $data['area_id'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['message'] = $data['message'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['phone_number'] = $data['phone_number'] ?? null;
        $this->container['given_name'] = $data['given_name'] ?? null;
        $this->container['family_name'] = $data['family_name'] ?? null;
        $this->container['date_creation'] = $data['date_creation'] ?? null;
        $this->container['date_update'] = $data['date_update'] ?? null;
        $this->container['work_flow_step'] = $data['work_flow_step'] ?? null;
        $this->container['channel'] = $data['channel'] ?? null;
        $this->container['ref_id'] = $data['ref_id'] ?? null;
        $this->container['user_id'] = $data['user_id'] ?? null;
        $this->container['purpose'] = $data['purpose'] ?? null;
        $this->container['closed_reason'] = $data['closed_reason'] ?? null;
        $this->container['closed_reason_description'] = $data['closed_reason_description'] ?? null;
        $this->container['expiry_time'] = $data['expiry_time'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['zip_code'] = $data['zip_code'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['country_code'] = $data['country_code'] ?? null;
        $this->container['nb_messages'] = $data['nb_messages'] ?? null;
        $this->container['nb_messages_not_viewed'] = $data['nb_messages_not_viewed'] ?? null;
        $this->container['remaining_days'] = $data['remaining_days'] ?? null;
        $this->container['closing_time'] = $data['closing_time'] ?? null;
        $this->container['additional_datas'] = $data['additional_datas'] ?? null;
        $this->container['user_notified'] = $data['user_notified'] ?? null;
        $this->container['date_user_notified'] = $data['date_user_notified'] ?? null;
        $this->container['send_notification'] = $data['send_notification'] ?? null;
        $this->container['email_validation_date'] = $data['email_validation_date'] ?? null;
        $this->container['mail_validated'] = $data['mail_validated'] ?? null;
        $this->container['referrer_url'] = $data['referrer_url'] ?? null;
        $this->container['demand_id'] = $data['demand_id'] ?? null;
        $this->container['identity_validated'] = $data['identity_validated'] ?? null;
        $this->container['date_identity_validated'] = $data['date_identity_validated'] ?? null;
        $this->container['widget_id'] = $data['widget_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['locale'] === null) {
            $invalidProperties[] = "'locale' can't be null";
        }
        if ((mb_strlen($this->container['locale']) > 10)) {
            $invalidProperties[] = "invalid value for 'locale', the character length must be smaller than or equal to 10.";
        }

        if ($this->container['area_id'] === null) {
            $invalidProperties[] = "'area_id' can't be null";
        }
        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 255)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['phone_number']) && (mb_strlen($this->container['phone_number']) > 60)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['given_name']) && (mb_strlen($this->container['given_name']) > 180)) {
            $invalidProperties[] = "invalid value for 'given_name', the character length must be smaller than or equal to 180.";
        }

        if (!is_null($this->container['family_name']) && (mb_strlen($this->container['family_name']) > 180)) {
            $invalidProperties[] = "invalid value for 'family_name', the character length must be smaller than or equal to 180.";
        }

        if (!is_null($this->container['ref_id']) && (mb_strlen($this->container['ref_id']) > 355)) {
            $invalidProperties[] = "invalid value for 'ref_id', the character length must be smaller than or equal to 355.";
        }

        if (!is_null($this->container['user_id']) && (mb_strlen($this->container['user_id']) > 355)) {
            $invalidProperties[] = "invalid value for 'user_id', the character length must be smaller than or equal to 355.";
        }

        if ($this->container['purpose'] === null) {
            $invalidProperties[] = "'purpose' can't be null";
        }
        if (!is_null($this->container['address']) && (mb_strlen($this->container['address']) > 350)) {
            $invalidProperties[] = "invalid value for 'address', the character length must be smaller than or equal to 350.";
        }

        if (!is_null($this->container['zip_code']) && (mb_strlen($this->container['zip_code']) > 8)) {
            $invalidProperties[] = "invalid value for 'zip_code', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 255)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['country_code']) && (mb_strlen($this->container['country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be smaller than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets closed_by_user
     *
     * @return \OpenAPI\Client\Model\UserLightDto|null
     */
    public function getClosedByUser()
    {
        return $this->container['closed_by_user'];
    }

    /**
     * Sets closed_by_user
     *
     * @param \OpenAPI\Client\Model\UserLightDto|null $closed_by_user closed_by_user
     *
     * @return self
     */
    public function setClosedByUser($closed_by_user)
    {
        $this->container['closed_by_user'] = $closed_by_user;

        return $this;
    }

    /**
     * Gets area
     *
     * @return \OpenAPI\Client\Model\AreaDto|null
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param \OpenAPI\Client\Model\AreaDto|null $area area
     *
     * @return self
     */
    public function setArea($area)
    {
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return \OpenAPI\Client\Model\UserLightDto|null
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param \OpenAPI\Client\Model\UserLightDto|null $creator creator
     *
     * @return self
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return \OpenAPI\Client\Model\UserLightDto|null
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param \OpenAPI\Client\Model\UserLightDto|null $operator operator
     *
     * @return self
     */
    public function setOperator($operator)
    {
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \OpenAPI\Client\Model\UserRequestAttachmentDto[]|null
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \OpenAPI\Client\Model\UserRequestAttachmentDto[]|null $attachments attachments
     *
     * @return self
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \OpenAPI\Client\Model\TagDto[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \OpenAPI\Client\Model\TagDto[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale locale
     *
     * @return self
     */
    public function setLocale($locale)
    {
        if ((mb_strlen($locale) > 10)) {
            throw new \InvalidArgumentException('invalid length for $locale when calling UserRequestDto., must be smaller than or equal to 10.');
        }

        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived archived
     *
     * @return self
     */
    public function setArchived($archived)
    {
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets complex
     *
     * @return bool|null
     */
    public function getComplex()
    {
        return $this->container['complex'];
    }

    /**
     * Sets complex
     *
     * @param bool|null $complex Wether it's a complex demand or not
     *
     * @return self
     */
    public function setComplex($complex)
    {
        $this->container['complex'] = $complex;

        return $this;
    }

    /**
     * Gets date_closed
     *
     * @return \DateTime|null
     */
    public function getDateClosed()
    {
        return $this->container['date_closed'];
    }

    /**
     * Sets date_closed
     *
     * @param \DateTime|null $date_closed date_closed
     *
     * @return self
     */
    public function setDateClosed($date_closed)
    {
        $this->container['date_closed'] = $date_closed;

        return $this;
    }

    /**
     * Gets area_id
     *
     * @return int
     */
    public function getAreaId()
    {
        return $this->container['area_id'];
    }

    /**
     * Sets area_id
     *
     * @param int $area_id area_id
     *
     * @return self
     */
    public function setAreaId($area_id)
    {
        $this->container['area_id'] = $area_id;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \OpenAPI\Client\Model\UserRequestState|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \OpenAPI\Client\Model\UserRequestState|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message message
     *
     * @return self
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (mb_strlen($email) > 255)) {
            throw new \InvalidArgumentException('invalid length for $email when calling UserRequestDto., must be smaller than or equal to 255.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number phone_number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (!is_null($phone_number) && (mb_strlen($phone_number) > 60)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling UserRequestDto., must be smaller than or equal to 60.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets given_name
     *
     * @return string|null
     */
    public function getGivenName()
    {
        return $this->container['given_name'];
    }

    /**
     * Sets given_name
     *
     * @param string|null $given_name given_name
     *
     * @return self
     */
    public function setGivenName($given_name)
    {
        if (!is_null($given_name) && (mb_strlen($given_name) > 180)) {
            throw new \InvalidArgumentException('invalid length for $given_name when calling UserRequestDto., must be smaller than or equal to 180.');
        }

        $this->container['given_name'] = $given_name;

        return $this;
    }

    /**
     * Gets family_name
     *
     * @return string|null
     */
    public function getFamilyName()
    {
        return $this->container['family_name'];
    }

    /**
     * Sets family_name
     *
     * @param string|null $family_name family_name
     *
     * @return self
     */
    public function setFamilyName($family_name)
    {
        if (!is_null($family_name) && (mb_strlen($family_name) > 180)) {
            throw new \InvalidArgumentException('invalid length for $family_name when calling UserRequestDto., must be smaller than or equal to 180.');
        }

        $this->container['family_name'] = $family_name;

        return $this;
    }

    /**
     * Gets date_creation
     *
     * @return \DateTime|null
     */
    public function getDateCreation()
    {
        return $this->container['date_creation'];
    }

    /**
     * Sets date_creation
     *
     * @param \DateTime|null $date_creation date_creation
     *
     * @return self
     */
    public function setDateCreation($date_creation)
    {
        $this->container['date_creation'] = $date_creation;

        return $this;
    }

    /**
     * Gets date_update
     *
     * @return \DateTime|null
     */
    public function getDateUpdate()
    {
        return $this->container['date_update'];
    }

    /**
     * Sets date_update
     *
     * @param \DateTime|null $date_update date_update
     *
     * @return self
     */
    public function setDateUpdate($date_update)
    {
        $this->container['date_update'] = $date_update;

        return $this;
    }

    /**
     * Gets work_flow_step
     *
     * @return \OpenAPI\Client\Model\WorkFlowStepDto|null
     */
    public function getWorkFlowStep()
    {
        return $this->container['work_flow_step'];
    }

    /**
     * Sets work_flow_step
     *
     * @param \OpenAPI\Client\Model\WorkFlowStepDto|null $work_flow_step work_flow_step
     *
     * @return self
     */
    public function setWorkFlowStep($work_flow_step)
    {
        $this->container['work_flow_step'] = $work_flow_step;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return \OpenAPI\Client\Model\UserRequestSource|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param \OpenAPI\Client\Model\UserRequestSource|null $channel channel
     *
     * @return self
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets ref_id
     *
     * @return string|null
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     *
     * @param string|null $ref_id ref_id
     *
     * @return self
     */
    public function setRefId($ref_id)
    {
        if (!is_null($ref_id) && (mb_strlen($ref_id) > 355)) {
            throw new \InvalidArgumentException('invalid length for $ref_id when calling UserRequestDto., must be smaller than or equal to 355.');
        }

        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (!is_null($user_id) && (mb_strlen($user_id) > 355)) {
            throw new \InvalidArgumentException('invalid length for $user_id when calling UserRequestDto., must be smaller than or equal to 355.');
        }

        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets purpose
     *
     * @return \OpenAPI\Client\Model\PurposeType
     */
    public function getPurpose()
    {
        return $this->container['purpose'];
    }

    /**
     * Sets purpose
     *
     * @param \OpenAPI\Client\Model\PurposeType $purpose purpose
     *
     * @return self
     */
    public function setPurpose($purpose)
    {
        $this->container['purpose'] = $purpose;

        return $this;
    }

    /**
     * Gets closed_reason
     *
     * @return \OpenAPI\Client\Model\ClosedReason|null
     */
    public function getClosedReason()
    {
        return $this->container['closed_reason'];
    }

    /**
     * Sets closed_reason
     *
     * @param \OpenAPI\Client\Model\ClosedReason|null $closed_reason closed_reason
     *
     * @return self
     */
    public function setClosedReason($closed_reason)
    {
        $this->container['closed_reason'] = $closed_reason;

        return $this;
    }

    /**
     * Gets closed_reason_description
     *
     * @return string|null
     */
    public function getClosedReasonDescription()
    {
        return $this->container['closed_reason_description'];
    }

    /**
     * Sets closed_reason_description
     *
     * @param string|null $closed_reason_description closed_reason_description
     *
     * @return self
     */
    public function setClosedReasonDescription($closed_reason_description)
    {
        $this->container['closed_reason_description'] = $closed_reason_description;

        return $this;
    }

    /**
     * Gets expiry_time
     *
     * @return \DateTime|null
     */
    public function getExpiryTime()
    {
        return $this->container['expiry_time'];
    }

    /**
     * Sets expiry_time
     *
     * @param \DateTime|null $expiry_time expiry_time
     *
     * @return self
     */
    public function setExpiryTime($expiry_time)
    {
        $this->container['expiry_time'] = $expiry_time;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (!is_null($address) && (mb_strlen($address) > 350)) {
            throw new \InvalidArgumentException('invalid length for $address when calling UserRequestDto., must be smaller than or equal to 350.');
        }

        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string|null
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string|null $zip_code zip_code
     *
     * @return self
     */
    public function setZipCode($zip_code)
    {
        if (!is_null($zip_code) && (mb_strlen($zip_code) > 8)) {
            throw new \InvalidArgumentException('invalid length for $zip_code when calling UserRequestDto., must be smaller than or equal to 8.');
        }

        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (!is_null($city) && (mb_strlen($city) > 255)) {
            throw new \InvalidArgumentException('invalid length for $city when calling UserRequestDto., must be smaller than or equal to 255.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code country_code
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        if (!is_null($country_code) && (mb_strlen($country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling UserRequestDto., must be smaller than or equal to 2.');
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets nb_messages
     *
     * @return int|null
     */
    public function getNbMessages()
    {
        return $this->container['nb_messages'];
    }

    /**
     * Sets nb_messages
     *
     * @param int|null $nb_messages nb_messages
     *
     * @return self
     */
    public function setNbMessages($nb_messages)
    {
        $this->container['nb_messages'] = $nb_messages;

        return $this;
    }

    /**
     * Gets nb_messages_not_viewed
     *
     * @return int|null
     */
    public function getNbMessagesNotViewed()
    {
        return $this->container['nb_messages_not_viewed'];
    }

    /**
     * Sets nb_messages_not_viewed
     *
     * @param int|null $nb_messages_not_viewed nb_messages_not_viewed
     *
     * @return self
     */
    public function setNbMessagesNotViewed($nb_messages_not_viewed)
    {
        $this->container['nb_messages_not_viewed'] = $nb_messages_not_viewed;

        return $this;
    }

    /**
     * Gets remaining_days
     *
     * @return int|null
     */
    public function getRemainingDays()
    {
        return $this->container['remaining_days'];
    }

    /**
     * Sets remaining_days
     *
     * @param int|null $remaining_days remaining_days
     *
     * @return self
     */
    public function setRemainingDays($remaining_days)
    {
        $this->container['remaining_days'] = $remaining_days;

        return $this;
    }

    /**
     * Gets closing_time
     *
     * @return int|null
     */
    public function getClosingTime()
    {
        return $this->container['closing_time'];
    }

    /**
     * Sets closing_time
     *
     * @param int|null $closing_time closing_time
     *
     * @return self
     */
    public function setClosingTime($closing_time)
    {
        $this->container['closing_time'] = $closing_time;

        return $this;
    }

    /**
     * Gets additional_datas
     *
     * @return mixed|null
     */
    public function getAdditionalDatas()
    {
        return $this->container['additional_datas'];
    }

    /**
     * Sets additional_datas
     *
     * @param mixed|null $additional_datas additional_datas
     *
     * @return self
     */
    public function setAdditionalDatas($additional_datas)
    {
        $this->container['additional_datas'] = $additional_datas;

        return $this;
    }

    /**
     * Gets user_notified
     *
     * @return bool|null
     */
    public function getUserNotified()
    {
        return $this->container['user_notified'];
    }

    /**
     * Sets user_notified
     *
     * @param bool|null $user_notified user_notified
     *
     * @return self
     */
    public function setUserNotified($user_notified)
    {
        $this->container['user_notified'] = $user_notified;

        return $this;
    }

    /**
     * Gets date_user_notified
     *
     * @return \DateTime|null
     */
    public function getDateUserNotified()
    {
        return $this->container['date_user_notified'];
    }

    /**
     * Sets date_user_notified
     *
     * @param \DateTime|null $date_user_notified date_user_notified
     *
     * @return self
     */
    public function setDateUserNotified($date_user_notified)
    {
        $this->container['date_user_notified'] = $date_user_notified;

        return $this;
    }

    /**
     * Gets send_notification
     *
     * @return bool|null
     */
    public function getSendNotification()
    {
        return $this->container['send_notification'];
    }

    /**
     * Sets send_notification
     *
     * @param bool|null $send_notification send_notification
     *
     * @return self
     */
    public function setSendNotification($send_notification)
    {
        $this->container['send_notification'] = $send_notification;

        return $this;
    }

    /**
     * Gets email_validation_date
     *
     * @return \DateTime|null
     */
    public function getEmailValidationDate()
    {
        return $this->container['email_validation_date'];
    }

    /**
     * Sets email_validation_date
     *
     * @param \DateTime|null $email_validation_date email_validation_date
     *
     * @return self
     */
    public function setEmailValidationDate($email_validation_date)
    {
        $this->container['email_validation_date'] = $email_validation_date;

        return $this;
    }

    /**
     * Gets mail_validated
     *
     * @return bool|null
     */
    public function getMailValidated()
    {
        return $this->container['mail_validated'];
    }

    /**
     * Sets mail_validated
     *
     * @param bool|null $mail_validated mail_validated
     *
     * @return self
     */
    public function setMailValidated($mail_validated)
    {
        $this->container['mail_validated'] = $mail_validated;

        return $this;
    }

    /**
     * Gets referrer_url
     *
     * @return string|null
     */
    public function getReferrerUrl()
    {
        return $this->container['referrer_url'];
    }

    /**
     * Sets referrer_url
     *
     * @param string|null $referrer_url referrer_url
     *
     * @return self
     */
    public function setReferrerUrl($referrer_url)
    {
        $this->container['referrer_url'] = $referrer_url;

        return $this;
    }

    /**
     * Gets demand_id
     *
     * @return string|null
     */
    public function getDemandId()
    {
        return $this->container['demand_id'];
    }

    /**
     * Sets demand_id
     *
     * @param string|null $demand_id demand_id
     *
     * @return self
     */
    public function setDemandId($demand_id)
    {
        $this->container['demand_id'] = $demand_id;

        return $this;
    }

    /**
     * Gets identity_validated
     *
     * @return bool|null
     */
    public function getIdentityValidated()
    {
        return $this->container['identity_validated'];
    }

    /**
     * Sets identity_validated
     *
     * @param bool|null $identity_validated identity_validated
     *
     * @return self
     */
    public function setIdentityValidated($identity_validated)
    {
        $this->container['identity_validated'] = $identity_validated;

        return $this;
    }

    /**
     * Gets date_identity_validated
     *
     * @return \DateTime|null
     */
    public function getDateIdentityValidated()
    {
        return $this->container['date_identity_validated'];
    }

    /**
     * Sets date_identity_validated
     *
     * @param \DateTime|null $date_identity_validated date_identity_validated
     *
     * @return self
     */
    public function setDateIdentityValidated($date_identity_validated)
    {
        $this->container['date_identity_validated'] = $date_identity_validated;

        return $this;
    }

    /**
     * Gets widget_id
     *
     * @return int|null
     */
    public function getWidgetId()
    {
        return $this->container['widget_id'];
    }

    /**
     * Sets widget_id
     *
     * @param int|null $widget_id widget_id
     *
     * @return self
     */
    public function setWidgetId($widget_id)
    {
        $this->container['widget_id'] = $widget_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


