<?php
/**
 * AttachmentDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dastra API
 *
 * Dastra's public REST API
 *
 * The version of the OpenAPI document: v1
 * Contact: antoine.bidault@dastra.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AttachmentDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class AttachmentDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AttachmentDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'order' => 'int',
        'size' => 'int',
        'built_in' => 'bool',
        'label' => 'string',
        'area_id' => 'int',
        'slug' => 'string',
        'file_name' => 'string',
        'extension' => 'string',
        'color' => 'string',
        'data' => 'string',
        'document_content' => 'string',
        'parent_id' => 'int',
        'deleted' => 'bool',
        'nb_download' => 'int',
        'nb_files' => 'int',
        'date_creation' => '\DateTime',
        'date_update' => '\DateTime',
        'date_deleted' => '\DateTime',
        'deleted_by' => '\OpenAPI\Client\Model\UserLightDto',
        'creator' => '\OpenAPI\Client\Model\UserLightDto',
        'type' => '\OpenAPI\Client\Model\AttachmentType',
        'is_folder' => 'bool',
        'is_editable' => 'bool',
        'children' => '\OpenAPI\Client\Model\AttachmentDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'order' => 'int32',
        'size' => 'int64',
        'built_in' => null,
        'label' => null,
        'area_id' => 'int32',
        'slug' => null,
        'file_name' => null,
        'extension' => null,
        'color' => null,
        'data' => null,
        'document_content' => null,
        'parent_id' => 'int32',
        'deleted' => null,
        'nb_download' => 'int32',
        'nb_files' => 'int32',
        'date_creation' => 'date-time',
        'date_update' => 'date-time',
        'date_deleted' => 'date-time',
        'deleted_by' => null,
        'creator' => null,
        'type' => null,
        'is_folder' => null,
        'is_editable' => null,
        'children' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'order' => 'order',
        'size' => 'size',
        'built_in' => 'builtIn',
        'label' => 'label',
        'area_id' => 'areaId',
        'slug' => 'slug',
        'file_name' => 'fileName',
        'extension' => 'extension',
        'color' => 'color',
        'data' => 'data',
        'document_content' => 'documentContent',
        'parent_id' => 'parentId',
        'deleted' => 'deleted',
        'nb_download' => 'nbDownload',
        'nb_files' => 'nbFiles',
        'date_creation' => 'dateCreation',
        'date_update' => 'dateUpdate',
        'date_deleted' => 'dateDeleted',
        'deleted_by' => 'deletedBy',
        'creator' => 'creator',
        'type' => 'type',
        'is_folder' => 'isFolder',
        'is_editable' => 'isEditable',
        'children' => 'children'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'order' => 'setOrder',
        'size' => 'setSize',
        'built_in' => 'setBuiltIn',
        'label' => 'setLabel',
        'area_id' => 'setAreaId',
        'slug' => 'setSlug',
        'file_name' => 'setFileName',
        'extension' => 'setExtension',
        'color' => 'setColor',
        'data' => 'setData',
        'document_content' => 'setDocumentContent',
        'parent_id' => 'setParentId',
        'deleted' => 'setDeleted',
        'nb_download' => 'setNbDownload',
        'nb_files' => 'setNbFiles',
        'date_creation' => 'setDateCreation',
        'date_update' => 'setDateUpdate',
        'date_deleted' => 'setDateDeleted',
        'deleted_by' => 'setDeletedBy',
        'creator' => 'setCreator',
        'type' => 'setType',
        'is_folder' => 'setIsFolder',
        'is_editable' => 'setIsEditable',
        'children' => 'setChildren'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'order' => 'getOrder',
        'size' => 'getSize',
        'built_in' => 'getBuiltIn',
        'label' => 'getLabel',
        'area_id' => 'getAreaId',
        'slug' => 'getSlug',
        'file_name' => 'getFileName',
        'extension' => 'getExtension',
        'color' => 'getColor',
        'data' => 'getData',
        'document_content' => 'getDocumentContent',
        'parent_id' => 'getParentId',
        'deleted' => 'getDeleted',
        'nb_download' => 'getNbDownload',
        'nb_files' => 'getNbFiles',
        'date_creation' => 'getDateCreation',
        'date_update' => 'getDateUpdate',
        'date_deleted' => 'getDateDeleted',
        'deleted_by' => 'getDeletedBy',
        'creator' => 'getCreator',
        'type' => 'getType',
        'is_folder' => 'getIsFolder',
        'is_editable' => 'getIsEditable',
        'children' => 'getChildren'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['order'] = $data['order'] ?? null;
        $this->container['size'] = $data['size'] ?? null;
        $this->container['built_in'] = $data['built_in'] ?? null;
        $this->container['label'] = $data['label'] ?? null;
        $this->container['area_id'] = $data['area_id'] ?? null;
        $this->container['slug'] = $data['slug'] ?? null;
        $this->container['file_name'] = $data['file_name'] ?? null;
        $this->container['extension'] = $data['extension'] ?? null;
        $this->container['color'] = $data['color'] ?? null;
        $this->container['data'] = $data['data'] ?? null;
        $this->container['document_content'] = $data['document_content'] ?? null;
        $this->container['parent_id'] = $data['parent_id'] ?? null;
        $this->container['deleted'] = $data['deleted'] ?? null;
        $this->container['nb_download'] = $data['nb_download'] ?? null;
        $this->container['nb_files'] = $data['nb_files'] ?? null;
        $this->container['date_creation'] = $data['date_creation'] ?? null;
        $this->container['date_update'] = $data['date_update'] ?? null;
        $this->container['date_deleted'] = $data['date_deleted'] ?? null;
        $this->container['deleted_by'] = $data['deleted_by'] ?? null;
        $this->container['creator'] = $data['creator'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['is_folder'] = $data['is_folder'] ?? null;
        $this->container['is_editable'] = $data['is_editable'] ?? null;
        $this->container['children'] = $data['children'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['label'] === null) {
            $invalidProperties[] = "'label' can't be null";
        }
        if ((mb_strlen($this->container['label']) > 255)) {
            $invalidProperties[] = "invalid value for 'label', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int|null $size size
     *
     * @return self
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets built_in
     *
     * @return bool|null
     */
    public function getBuiltIn()
    {
        return $this->container['built_in'];
    }

    /**
     * Sets built_in
     *
     * @param bool|null $built_in built_in
     *
     * @return self
     */
    public function setBuiltIn($built_in)
    {
        $this->container['built_in'] = $built_in;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        if ((mb_strlen($label) > 255)) {
            throw new \InvalidArgumentException('invalid length for $label when calling AttachmentDto., must be smaller than or equal to 255.');
        }

        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets area_id
     *
     * @return int|null
     */
    public function getAreaId()
    {
        return $this->container['area_id'];
    }

    /**
     * Sets area_id
     *
     * @param int|null $area_id area_id
     *
     * @return self
     */
    public function setAreaId($area_id)
    {
        $this->container['area_id'] = $area_id;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string|null
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string|null $slug slug
     *
     * @return self
     */
    public function setSlug($slug)
    {
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string|null
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string|null $file_name file_name
     *
     * @return self
     */
    public function setFileName($file_name)
    {
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets extension
     *
     * @return string|null
     */
    public function getExtension()
    {
        return $this->container['extension'];
    }

    /**
     * Sets extension
     *
     * @param string|null $extension extension
     *
     * @return self
     */
    public function setExtension($extension)
    {
        $this->container['extension'] = $extension;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color color
     *
     * @return self
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string|null $data data
     *
     * @return self
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets document_content
     *
     * @return string|null
     */
    public function getDocumentContent()
    {
        return $this->container['document_content'];
    }

    /**
     * Sets document_content
     *
     * @param string|null $document_content document_content
     *
     * @return self
     */
    public function setDocumentContent($document_content)
    {
        $this->container['document_content'] = $document_content;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int|null
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int|null $parent_id parent_id
     *
     * @return self
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool|null
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool|null $deleted deleted
     *
     * @return self
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets nb_download
     *
     * @return int|null
     */
    public function getNbDownload()
    {
        return $this->container['nb_download'];
    }

    /**
     * Sets nb_download
     *
     * @param int|null $nb_download nb_download
     *
     * @return self
     */
    public function setNbDownload($nb_download)
    {
        $this->container['nb_download'] = $nb_download;

        return $this;
    }

    /**
     * Gets nb_files
     *
     * @return int|null
     */
    public function getNbFiles()
    {
        return $this->container['nb_files'];
    }

    /**
     * Sets nb_files
     *
     * @param int|null $nb_files nb_files
     *
     * @return self
     */
    public function setNbFiles($nb_files)
    {
        $this->container['nb_files'] = $nb_files;

        return $this;
    }

    /**
     * Gets date_creation
     *
     * @return \DateTime|null
     */
    public function getDateCreation()
    {
        return $this->container['date_creation'];
    }

    /**
     * Sets date_creation
     *
     * @param \DateTime|null $date_creation date_creation
     *
     * @return self
     */
    public function setDateCreation($date_creation)
    {
        $this->container['date_creation'] = $date_creation;

        return $this;
    }

    /**
     * Gets date_update
     *
     * @return \DateTime|null
     */
    public function getDateUpdate()
    {
        return $this->container['date_update'];
    }

    /**
     * Sets date_update
     *
     * @param \DateTime|null $date_update date_update
     *
     * @return self
     */
    public function setDateUpdate($date_update)
    {
        $this->container['date_update'] = $date_update;

        return $this;
    }

    /**
     * Gets date_deleted
     *
     * @return \DateTime|null
     */
    public function getDateDeleted()
    {
        return $this->container['date_deleted'];
    }

    /**
     * Sets date_deleted
     *
     * @param \DateTime|null $date_deleted date_deleted
     *
     * @return self
     */
    public function setDateDeleted($date_deleted)
    {
        $this->container['date_deleted'] = $date_deleted;

        return $this;
    }

    /**
     * Gets deleted_by
     *
     * @return \OpenAPI\Client\Model\UserLightDto|null
     */
    public function getDeletedBy()
    {
        return $this->container['deleted_by'];
    }

    /**
     * Sets deleted_by
     *
     * @param \OpenAPI\Client\Model\UserLightDto|null $deleted_by deleted_by
     *
     * @return self
     */
    public function setDeletedBy($deleted_by)
    {
        $this->container['deleted_by'] = $deleted_by;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return \OpenAPI\Client\Model\UserLightDto|null
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param \OpenAPI\Client\Model\UserLightDto|null $creator creator
     *
     * @return self
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\AttachmentType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\AttachmentType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets is_folder
     *
     * @return bool|null
     */
    public function getIsFolder()
    {
        return $this->container['is_folder'];
    }

    /**
     * Sets is_folder
     *
     * @param bool|null $is_folder is_folder
     *
     * @return self
     */
    public function setIsFolder($is_folder)
    {
        $this->container['is_folder'] = $is_folder;

        return $this;
    }

    /**
     * Gets is_editable
     *
     * @return bool|null
     */
    public function getIsEditable()
    {
        return $this->container['is_editable'];
    }

    /**
     * Sets is_editable
     *
     * @param bool|null $is_editable is_editable
     *
     * @return self
     */
    public function setIsEditable($is_editable)
    {
        $this->container['is_editable'] = $is_editable;

        return $this;
    }

    /**
     * Gets children
     *
     * @return \OpenAPI\Client\Model\AttachmentDto[]|null
     */
    public function getChildren()
    {
        return $this->container['children'];
    }

    /**
     * Sets children
     *
     * @param \OpenAPI\Client\Model\AttachmentDto[]|null $children children
     *
     * @return self
     */
    public function setChildren($children)
    {
        $this->container['children'] = $children;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


