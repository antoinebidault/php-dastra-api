<?php
/**
 * DataProcessingStatsDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dastra API
 *
 * Dastra's public REST API
 *
 * The version of the OpenAPI document: v1
 * Contact: antoine.bidault@dastra.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DataProcessingStatsDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DataProcessingStatsDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DataProcessingStatsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'percentage_accomplished' => 'double',
        'percentage_complete' => 'double',
        'nb_treatment_complete' => 'int',
        'nb_treatment_not_complete' => 'int',
        'nb_treatment_published' => 'int',
        'work_flow_steps' => '\OpenAPI\Client\Model\SerieValue[]',
        'stats' => '\OpenAPI\Client\Model\DataProcessingStatValueDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'percentage_accomplished' => 'double',
        'percentage_complete' => 'double',
        'nb_treatment_complete' => 'int32',
        'nb_treatment_not_complete' => 'int32',
        'nb_treatment_published' => 'int32',
        'work_flow_steps' => null,
        'stats' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'percentage_accomplished' => 'percentageAccomplished',
        'percentage_complete' => 'percentageComplete',
        'nb_treatment_complete' => 'nbTreatmentComplete',
        'nb_treatment_not_complete' => 'nbTreatmentNotComplete',
        'nb_treatment_published' => 'nbTreatmentPublished',
        'work_flow_steps' => 'workFlowSteps',
        'stats' => 'stats'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'percentage_accomplished' => 'setPercentageAccomplished',
        'percentage_complete' => 'setPercentageComplete',
        'nb_treatment_complete' => 'setNbTreatmentComplete',
        'nb_treatment_not_complete' => 'setNbTreatmentNotComplete',
        'nb_treatment_published' => 'setNbTreatmentPublished',
        'work_flow_steps' => 'setWorkFlowSteps',
        'stats' => 'setStats'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'percentage_accomplished' => 'getPercentageAccomplished',
        'percentage_complete' => 'getPercentageComplete',
        'nb_treatment_complete' => 'getNbTreatmentComplete',
        'nb_treatment_not_complete' => 'getNbTreatmentNotComplete',
        'nb_treatment_published' => 'getNbTreatmentPublished',
        'work_flow_steps' => 'getWorkFlowSteps',
        'stats' => 'getStats'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['percentage_accomplished'] = $data['percentage_accomplished'] ?? null;
        $this->container['percentage_complete'] = $data['percentage_complete'] ?? null;
        $this->container['nb_treatment_complete'] = $data['nb_treatment_complete'] ?? null;
        $this->container['nb_treatment_not_complete'] = $data['nb_treatment_not_complete'] ?? null;
        $this->container['nb_treatment_published'] = $data['nb_treatment_published'] ?? null;
        $this->container['work_flow_steps'] = $data['work_flow_steps'] ?? null;
        $this->container['stats'] = $data['stats'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets percentage_accomplished
     *
     * @return double|null
     */
    public function getPercentageAccomplished()
    {
        return $this->container['percentage_accomplished'];
    }

    /**
     * Sets percentage_accomplished
     *
     * @param double|null $percentage_accomplished percentage_accomplished
     *
     * @return self
     */
    public function setPercentageAccomplished($percentage_accomplished)
    {
        $this->container['percentage_accomplished'] = $percentage_accomplished;

        return $this;
    }

    /**
     * Gets percentage_complete
     *
     * @return double|null
     */
    public function getPercentageComplete()
    {
        return $this->container['percentage_complete'];
    }

    /**
     * Sets percentage_complete
     *
     * @param double|null $percentage_complete percentage_complete
     *
     * @return self
     */
    public function setPercentageComplete($percentage_complete)
    {
        $this->container['percentage_complete'] = $percentage_complete;

        return $this;
    }

    /**
     * Gets nb_treatment_complete
     *
     * @return int|null
     */
    public function getNbTreatmentComplete()
    {
        return $this->container['nb_treatment_complete'];
    }

    /**
     * Sets nb_treatment_complete
     *
     * @param int|null $nb_treatment_complete nb_treatment_complete
     *
     * @return self
     */
    public function setNbTreatmentComplete($nb_treatment_complete)
    {
        $this->container['nb_treatment_complete'] = $nb_treatment_complete;

        return $this;
    }

    /**
     * Gets nb_treatment_not_complete
     *
     * @return int|null
     */
    public function getNbTreatmentNotComplete()
    {
        return $this->container['nb_treatment_not_complete'];
    }

    /**
     * Sets nb_treatment_not_complete
     *
     * @param int|null $nb_treatment_not_complete nb_treatment_not_complete
     *
     * @return self
     */
    public function setNbTreatmentNotComplete($nb_treatment_not_complete)
    {
        $this->container['nb_treatment_not_complete'] = $nb_treatment_not_complete;

        return $this;
    }

    /**
     * Gets nb_treatment_published
     *
     * @return int|null
     */
    public function getNbTreatmentPublished()
    {
        return $this->container['nb_treatment_published'];
    }

    /**
     * Sets nb_treatment_published
     *
     * @param int|null $nb_treatment_published nb_treatment_published
     *
     * @return self
     */
    public function setNbTreatmentPublished($nb_treatment_published)
    {
        $this->container['nb_treatment_published'] = $nb_treatment_published;

        return $this;
    }

    /**
     * Gets work_flow_steps
     *
     * @return \OpenAPI\Client\Model\SerieValue[]|null
     */
    public function getWorkFlowSteps()
    {
        return $this->container['work_flow_steps'];
    }

    /**
     * Sets work_flow_steps
     *
     * @param \OpenAPI\Client\Model\SerieValue[]|null $work_flow_steps work_flow_steps
     *
     * @return self
     */
    public function setWorkFlowSteps($work_flow_steps)
    {
        $this->container['work_flow_steps'] = $work_flow_steps;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return \OpenAPI\Client\Model\DataProcessingStatValueDto[]|null
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param \OpenAPI\Client\Model\DataProcessingStatValueDto[]|null $stats stats
     *
     * @return self
     */
    public function setStats($stats)
    {
        $this->container['stats'] = $stats;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


