<?php
/**
 * TaskDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dastra API
 *
 * Dastra's public REST API
 *
 * The version of the OpenAPI document: v1
 * Contact: antoine.bidault@dastra.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TaskDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class TaskDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TaskDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'archived' => 'bool',
        'project' => '\OpenAPI\Client\Model\ProjectDto',
        'iteration' => '\OpenAPI\Client\Model\IterationDto',
        'label' => 'string',
        'description_html' => 'string',
        'description_plain_text' => 'string',
        'order' => 'int',
        'object_id' => 'string',
        'object_type' => '\OpenAPI\Client\Model\TaskObjectType',
        'priority' => '\OpenAPI\Client\Model\Priority',
        'state' => '\OpenAPI\Client\Model\TaskState',
        'work_flow_step' => '\OpenAPI\Client\Model\WorkFlowStepDto',
        'deadline' => '\DateTime',
        'attachments' => '\OpenAPI\Client\Model\AttachmentDto[]',
        'tags' => '\OpenAPI\Client\Model\TagDto[]',
        'owner' => '\OpenAPI\Client\Model\UserLightDto',
        'assigned_to_user' => '\OpenAPI\Client\Model\UserLightDto',
        'area' => '\OpenAPI\Client\Model\AreaDto',
        'area_id' => 'int',
        'workspace_id' => 'int',
        'date_closed' => '\DateTime',
        'date_activated' => '\DateTime',
        'date_creation' => '\DateTime',
        'date_update' => '\DateTime',
        'remaining_days' => 'int',
        'closing_time' => 'int',
        'additional_datas' => 'array<string,mixed>',
        'parent_id' => 'int',
        'children' => '\OpenAPI\Client\Model\TaskDto[]',
        'nb_sub_tasks' => 'int',
        'nb_sub_tasks_closed' => 'int',
        'object_type_details' => '\OpenAPI\Client\Model\SelectListItemResource'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'archived' => null,
        'project' => null,
        'iteration' => null,
        'label' => null,
        'description_html' => null,
        'description_plain_text' => null,
        'order' => 'int64',
        'object_id' => null,
        'object_type' => null,
        'priority' => null,
        'state' => null,
        'work_flow_step' => null,
        'deadline' => 'date-time',
        'attachments' => null,
        'tags' => null,
        'owner' => null,
        'assigned_to_user' => null,
        'area' => null,
        'area_id' => 'int32',
        'workspace_id' => 'int32',
        'date_closed' => 'date-time',
        'date_activated' => 'date-time',
        'date_creation' => 'date-time',
        'date_update' => 'date-time',
        'remaining_days' => 'int32',
        'closing_time' => 'int32',
        'additional_datas' => null,
        'parent_id' => 'int32',
        'children' => null,
        'nb_sub_tasks' => 'int32',
        'nb_sub_tasks_closed' => 'int32',
        'object_type_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'archived' => 'archived',
        'project' => 'project',
        'iteration' => 'iteration',
        'label' => 'label',
        'description_html' => 'descriptionHtml',
        'description_plain_text' => 'descriptionPlainText',
        'order' => 'order',
        'object_id' => 'objectId',
        'object_type' => 'objectType',
        'priority' => 'priority',
        'state' => 'state',
        'work_flow_step' => 'workFlowStep',
        'deadline' => 'deadline',
        'attachments' => 'attachments',
        'tags' => 'tags',
        'owner' => 'owner',
        'assigned_to_user' => 'assignedToUser',
        'area' => 'area',
        'area_id' => 'areaId',
        'workspace_id' => 'workspaceId',
        'date_closed' => 'dateClosed',
        'date_activated' => 'dateActivated',
        'date_creation' => 'dateCreation',
        'date_update' => 'dateUpdate',
        'remaining_days' => 'remainingDays',
        'closing_time' => 'closingTime',
        'additional_datas' => 'additionalDatas',
        'parent_id' => 'parentId',
        'children' => 'children',
        'nb_sub_tasks' => 'nbSubTasks',
        'nb_sub_tasks_closed' => 'nbSubTasksClosed',
        'object_type_details' => 'objectTypeDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'archived' => 'setArchived',
        'project' => 'setProject',
        'iteration' => 'setIteration',
        'label' => 'setLabel',
        'description_html' => 'setDescriptionHtml',
        'description_plain_text' => 'setDescriptionPlainText',
        'order' => 'setOrder',
        'object_id' => 'setObjectId',
        'object_type' => 'setObjectType',
        'priority' => 'setPriority',
        'state' => 'setState',
        'work_flow_step' => 'setWorkFlowStep',
        'deadline' => 'setDeadline',
        'attachments' => 'setAttachments',
        'tags' => 'setTags',
        'owner' => 'setOwner',
        'assigned_to_user' => 'setAssignedToUser',
        'area' => 'setArea',
        'area_id' => 'setAreaId',
        'workspace_id' => 'setWorkspaceId',
        'date_closed' => 'setDateClosed',
        'date_activated' => 'setDateActivated',
        'date_creation' => 'setDateCreation',
        'date_update' => 'setDateUpdate',
        'remaining_days' => 'setRemainingDays',
        'closing_time' => 'setClosingTime',
        'additional_datas' => 'setAdditionalDatas',
        'parent_id' => 'setParentId',
        'children' => 'setChildren',
        'nb_sub_tasks' => 'setNbSubTasks',
        'nb_sub_tasks_closed' => 'setNbSubTasksClosed',
        'object_type_details' => 'setObjectTypeDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'archived' => 'getArchived',
        'project' => 'getProject',
        'iteration' => 'getIteration',
        'label' => 'getLabel',
        'description_html' => 'getDescriptionHtml',
        'description_plain_text' => 'getDescriptionPlainText',
        'order' => 'getOrder',
        'object_id' => 'getObjectId',
        'object_type' => 'getObjectType',
        'priority' => 'getPriority',
        'state' => 'getState',
        'work_flow_step' => 'getWorkFlowStep',
        'deadline' => 'getDeadline',
        'attachments' => 'getAttachments',
        'tags' => 'getTags',
        'owner' => 'getOwner',
        'assigned_to_user' => 'getAssignedToUser',
        'area' => 'getArea',
        'area_id' => 'getAreaId',
        'workspace_id' => 'getWorkspaceId',
        'date_closed' => 'getDateClosed',
        'date_activated' => 'getDateActivated',
        'date_creation' => 'getDateCreation',
        'date_update' => 'getDateUpdate',
        'remaining_days' => 'getRemainingDays',
        'closing_time' => 'getClosingTime',
        'additional_datas' => 'getAdditionalDatas',
        'parent_id' => 'getParentId',
        'children' => 'getChildren',
        'nb_sub_tasks' => 'getNbSubTasks',
        'nb_sub_tasks_closed' => 'getNbSubTasksClosed',
        'object_type_details' => 'getObjectTypeDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['archived'] = $data['archived'] ?? null;
        $this->container['project'] = $data['project'] ?? null;
        $this->container['iteration'] = $data['iteration'] ?? null;
        $this->container['label'] = $data['label'] ?? null;
        $this->container['description_html'] = $data['description_html'] ?? null;
        $this->container['description_plain_text'] = $data['description_plain_text'] ?? null;
        $this->container['order'] = $data['order'] ?? null;
        $this->container['object_id'] = $data['object_id'] ?? null;
        $this->container['object_type'] = $data['object_type'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['work_flow_step'] = $data['work_flow_step'] ?? null;
        $this->container['deadline'] = $data['deadline'] ?? null;
        $this->container['attachments'] = $data['attachments'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
        $this->container['owner'] = $data['owner'] ?? null;
        $this->container['assigned_to_user'] = $data['assigned_to_user'] ?? null;
        $this->container['area'] = $data['area'] ?? null;
        $this->container['area_id'] = $data['area_id'] ?? null;
        $this->container['workspace_id'] = $data['workspace_id'] ?? null;
        $this->container['date_closed'] = $data['date_closed'] ?? null;
        $this->container['date_activated'] = $data['date_activated'] ?? null;
        $this->container['date_creation'] = $data['date_creation'] ?? null;
        $this->container['date_update'] = $data['date_update'] ?? null;
        $this->container['remaining_days'] = $data['remaining_days'] ?? null;
        $this->container['closing_time'] = $data['closing_time'] ?? null;
        $this->container['additional_datas'] = $data['additional_datas'] ?? null;
        $this->container['parent_id'] = $data['parent_id'] ?? null;
        $this->container['children'] = $data['children'] ?? null;
        $this->container['nb_sub_tasks'] = $data['nb_sub_tasks'] ?? null;
        $this->container['nb_sub_tasks_closed'] = $data['nb_sub_tasks_closed'] ?? null;
        $this->container['object_type_details'] = $data['object_type_details'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['label'] === null) {
            $invalidProperties[] = "'label' can't be null";
        }
        if ((mb_strlen($this->container['label']) > 120)) {
            $invalidProperties[] = "invalid value for 'label', the character length must be smaller than or equal to 120.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived archived
     *
     * @return self
     */
    public function setArchived($archived)
    {
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \OpenAPI\Client\Model\ProjectDto|null
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \OpenAPI\Client\Model\ProjectDto|null $project project
     *
     * @return self
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets iteration
     *
     * @return \OpenAPI\Client\Model\IterationDto|null
     */
    public function getIteration()
    {
        return $this->container['iteration'];
    }

    /**
     * Sets iteration
     *
     * @param \OpenAPI\Client\Model\IterationDto|null $iteration iteration
     *
     * @return self
     */
    public function setIteration($iteration)
    {
        $this->container['iteration'] = $iteration;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label Action label
     *
     * @return self
     */
    public function setLabel($label)
    {
        if ((mb_strlen($label) > 120)) {
            throw new \InvalidArgumentException('invalid length for $label when calling TaskDto., must be smaller than or equal to 120.');
        }

        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets description_html
     *
     * @return string|null
     */
    public function getDescriptionHtml()
    {
        return $this->container['description_html'];
    }

    /**
     * Sets description_html
     *
     * @param string|null $description_html Description
     *
     * @return self
     */
    public function setDescriptionHtml($description_html)
    {
        $this->container['description_html'] = $description_html;

        return $this;
    }

    /**
     * Gets description_plain_text
     *
     * @return string|null
     */
    public function getDescriptionPlainText()
    {
        return $this->container['description_plain_text'];
    }

    /**
     * Sets description_plain_text
     *
     * @param string|null $description_plain_text description_plain_text
     *
     * @return self
     */
    public function setDescriptionPlainText($description_plain_text)
    {
        $this->container['description_plain_text'] = $description_plain_text;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets object_id
     *
     * @return string|null
     */
    public function getObjectId()
    {
        return $this->container['object_id'];
    }

    /**
     * Sets object_id
     *
     * @param string|null $object_id Object id
     *
     * @return self
     */
    public function setObjectId($object_id)
    {
        $this->container['object_id'] = $object_id;

        return $this;
    }

    /**
     * Gets object_type
     *
     * @return \OpenAPI\Client\Model\TaskObjectType|null
     */
    public function getObjectType()
    {
        return $this->container['object_type'];
    }

    /**
     * Sets object_type
     *
     * @param \OpenAPI\Client\Model\TaskObjectType|null $object_type object_type
     *
     * @return self
     */
    public function setObjectType($object_type)
    {
        $this->container['object_type'] = $object_type;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return \OpenAPI\Client\Model\Priority|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param \OpenAPI\Client\Model\Priority|null $priority priority
     *
     * @return self
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \OpenAPI\Client\Model\TaskState|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \OpenAPI\Client\Model\TaskState|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets work_flow_step
     *
     * @return \OpenAPI\Client\Model\WorkFlowStepDto|null
     */
    public function getWorkFlowStep()
    {
        return $this->container['work_flow_step'];
    }

    /**
     * Sets work_flow_step
     *
     * @param \OpenAPI\Client\Model\WorkFlowStepDto|null $work_flow_step work_flow_step
     *
     * @return self
     */
    public function setWorkFlowStep($work_flow_step)
    {
        $this->container['work_flow_step'] = $work_flow_step;

        return $this;
    }

    /**
     * Gets deadline
     *
     * @return \DateTime|null
     */
    public function getDeadline()
    {
        return $this->container['deadline'];
    }

    /**
     * Sets deadline
     *
     * @param \DateTime|null $deadline Dead line
     *
     * @return self
     */
    public function setDeadline($deadline)
    {
        $this->container['deadline'] = $deadline;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \OpenAPI\Client\Model\AttachmentDto[]|null
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \OpenAPI\Client\Model\AttachmentDto[]|null $attachments Associated tags with colors
     *
     * @return self
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \OpenAPI\Client\Model\TagDto[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \OpenAPI\Client\Model\TagDto[]|null $tags Associated tags with colors
     *
     * @return self
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \OpenAPI\Client\Model\UserLightDto|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \OpenAPI\Client\Model\UserLightDto|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets assigned_to_user
     *
     * @return \OpenAPI\Client\Model\UserLightDto|null
     */
    public function getAssignedToUser()
    {
        return $this->container['assigned_to_user'];
    }

    /**
     * Sets assigned_to_user
     *
     * @param \OpenAPI\Client\Model\UserLightDto|null $assigned_to_user assigned_to_user
     *
     * @return self
     */
    public function setAssignedToUser($assigned_to_user)
    {
        $this->container['assigned_to_user'] = $assigned_to_user;

        return $this;
    }

    /**
     * Gets area
     *
     * @return \OpenAPI\Client\Model\AreaDto|null
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param \OpenAPI\Client\Model\AreaDto|null $area area
     *
     * @return self
     */
    public function setArea($area)
    {
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets area_id
     *
     * @return int|null
     */
    public function getAreaId()
    {
        return $this->container['area_id'];
    }

    /**
     * Sets area_id
     *
     * @param int|null $area_id area_id
     *
     * @return self
     */
    public function setAreaId($area_id)
    {
        $this->container['area_id'] = $area_id;

        return $this;
    }

    /**
     * Gets workspace_id
     *
     * @return int|null
     */
    public function getWorkspaceId()
    {
        return $this->container['workspace_id'];
    }

    /**
     * Sets workspace_id
     *
     * @param int|null $workspace_id workspace_id
     *
     * @return self
     */
    public function setWorkspaceId($workspace_id)
    {
        $this->container['workspace_id'] = $workspace_id;

        return $this;
    }

    /**
     * Gets date_closed
     *
     * @return \DateTime|null
     */
    public function getDateClosed()
    {
        return $this->container['date_closed'];
    }

    /**
     * Sets date_closed
     *
     * @param \DateTime|null $date_closed date_closed
     *
     * @return self
     */
    public function setDateClosed($date_closed)
    {
        $this->container['date_closed'] = $date_closed;

        return $this;
    }

    /**
     * Gets date_activated
     *
     * @return \DateTime|null
     */
    public function getDateActivated()
    {
        return $this->container['date_activated'];
    }

    /**
     * Sets date_activated
     *
     * @param \DateTime|null $date_activated date_activated
     *
     * @return self
     */
    public function setDateActivated($date_activated)
    {
        $this->container['date_activated'] = $date_activated;

        return $this;
    }

    /**
     * Gets date_creation
     *
     * @return \DateTime|null
     */
    public function getDateCreation()
    {
        return $this->container['date_creation'];
    }

    /**
     * Sets date_creation
     *
     * @param \DateTime|null $date_creation date_creation
     *
     * @return self
     */
    public function setDateCreation($date_creation)
    {
        $this->container['date_creation'] = $date_creation;

        return $this;
    }

    /**
     * Gets date_update
     *
     * @return \DateTime|null
     */
    public function getDateUpdate()
    {
        return $this->container['date_update'];
    }

    /**
     * Sets date_update
     *
     * @param \DateTime|null $date_update date_update
     *
     * @return self
     */
    public function setDateUpdate($date_update)
    {
        $this->container['date_update'] = $date_update;

        return $this;
    }

    /**
     * Gets remaining_days
     *
     * @return int|null
     */
    public function getRemainingDays()
    {
        return $this->container['remaining_days'];
    }

    /**
     * Sets remaining_days
     *
     * @param int|null $remaining_days remaining_days
     *
     * @return self
     */
    public function setRemainingDays($remaining_days)
    {
        $this->container['remaining_days'] = $remaining_days;

        return $this;
    }

    /**
     * Gets closing_time
     *
     * @return int|null
     */
    public function getClosingTime()
    {
        return $this->container['closing_time'];
    }

    /**
     * Sets closing_time
     *
     * @param int|null $closing_time Action label
     *
     * @return self
     */
    public function setClosingTime($closing_time)
    {
        $this->container['closing_time'] = $closing_time;

        return $this;
    }

    /**
     * Gets additional_datas
     *
     * @return array<string,mixed>|null
     */
    public function getAdditionalDatas()
    {
        return $this->container['additional_datas'];
    }

    /**
     * Sets additional_datas
     *
     * @param array<string,mixed>|null $additional_datas additional_datas
     *
     * @return self
     */
    public function setAdditionalDatas($additional_datas)
    {
        $this->container['additional_datas'] = $additional_datas;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int|null
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int|null $parent_id parent_id
     *
     * @return self
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets children
     *
     * @return \OpenAPI\Client\Model\TaskDto[]|null
     */
    public function getChildren()
    {
        return $this->container['children'];
    }

    /**
     * Sets children
     *
     * @param \OpenAPI\Client\Model\TaskDto[]|null $children children
     *
     * @return self
     */
    public function setChildren($children)
    {
        $this->container['children'] = $children;

        return $this;
    }

    /**
     * Gets nb_sub_tasks
     *
     * @return int|null
     */
    public function getNbSubTasks()
    {
        return $this->container['nb_sub_tasks'];
    }

    /**
     * Sets nb_sub_tasks
     *
     * @param int|null $nb_sub_tasks nb_sub_tasks
     *
     * @return self
     */
    public function setNbSubTasks($nb_sub_tasks)
    {
        $this->container['nb_sub_tasks'] = $nb_sub_tasks;

        return $this;
    }

    /**
     * Gets nb_sub_tasks_closed
     *
     * @return int|null
     */
    public function getNbSubTasksClosed()
    {
        return $this->container['nb_sub_tasks_closed'];
    }

    /**
     * Sets nb_sub_tasks_closed
     *
     * @param int|null $nb_sub_tasks_closed nb_sub_tasks_closed
     *
     * @return self
     */
    public function setNbSubTasksClosed($nb_sub_tasks_closed)
    {
        $this->container['nb_sub_tasks_closed'] = $nb_sub_tasks_closed;

        return $this;
    }

    /**
     * Gets object_type_details
     *
     * @return \OpenAPI\Client\Model\SelectListItemResource|null
     */
    public function getObjectTypeDetails()
    {
        return $this->container['object_type_details'];
    }

    /**
     * Sets object_type_details
     *
     * @param \OpenAPI\Client\Model\SelectListItemResource|null $object_type_details object_type_details
     *
     * @return self
     */
    public function setObjectTypeDetails($object_type_details)
    {
        $this->container['object_type_details'] = $object_type_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


