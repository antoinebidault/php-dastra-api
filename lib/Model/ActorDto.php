<?php
/**
 * ActorDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dastra API
 *
 * Dastra's public REST API
 *
 * The version of the OpenAPI document: v1
 * Contact: antoine.bidault@dastra.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ActorDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ActorDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ActorDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'display_name' => 'string',
        'date_creation' => '\DateTime',
        'logo_url' => 'string',
        'actor_type' => '\OpenAPI\Client\Model\ActorType',
        'vendor_type' => '\OpenAPI\Client\Model\VendorType',
        'access_level' => '\OpenAPI\Client\Model\AccessLevel',
        'given_name' => 'string',
        'family_name' => 'string',
        'company_name' => 'string',
        'description' => 'string',
        'immatriculation_number' => 'string',
        'website_url' => 'string',
        'address' => 'string',
        'zip_code' => 'string',
        'city' => 'string',
        'country_code' => 'string',
        'email' => 'string',
        'phone_number' => 'string',
        'readonly' => 'bool',
        'attachments' => '\OpenAPI\Client\Model\AttachmentDto[]',
        'tags' => '\OpenAPI\Client\Model\TagDto[]',
        'audit_score' => 'int',
        'nb_audits' => 'int',
        'date_last_audit' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'display_name' => null,
        'date_creation' => 'date-time',
        'logo_url' => null,
        'actor_type' => null,
        'vendor_type' => null,
        'access_level' => null,
        'given_name' => null,
        'family_name' => null,
        'company_name' => null,
        'description' => null,
        'immatriculation_number' => null,
        'website_url' => null,
        'address' => null,
        'zip_code' => null,
        'city' => null,
        'country_code' => null,
        'email' => null,
        'phone_number' => null,
        'readonly' => null,
        'attachments' => null,
        'tags' => null,
        'audit_score' => 'int32',
        'nb_audits' => 'int32',
        'date_last_audit' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'display_name' => 'displayName',
        'date_creation' => 'dateCreation',
        'logo_url' => 'logoUrl',
        'actor_type' => 'actorType',
        'vendor_type' => 'vendorType',
        'access_level' => 'accessLevel',
        'given_name' => 'givenName',
        'family_name' => 'familyName',
        'company_name' => 'companyName',
        'description' => 'description',
        'immatriculation_number' => 'immatriculationNumber',
        'website_url' => 'websiteUrl',
        'address' => 'address',
        'zip_code' => 'zipCode',
        'city' => 'city',
        'country_code' => 'countryCode',
        'email' => 'email',
        'phone_number' => 'phoneNumber',
        'readonly' => 'readonly',
        'attachments' => 'attachments',
        'tags' => 'tags',
        'audit_score' => 'auditScore',
        'nb_audits' => 'nbAudits',
        'date_last_audit' => 'dateLastAudit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'display_name' => 'setDisplayName',
        'date_creation' => 'setDateCreation',
        'logo_url' => 'setLogoUrl',
        'actor_type' => 'setActorType',
        'vendor_type' => 'setVendorType',
        'access_level' => 'setAccessLevel',
        'given_name' => 'setGivenName',
        'family_name' => 'setFamilyName',
        'company_name' => 'setCompanyName',
        'description' => 'setDescription',
        'immatriculation_number' => 'setImmatriculationNumber',
        'website_url' => 'setWebsiteUrl',
        'address' => 'setAddress',
        'zip_code' => 'setZipCode',
        'city' => 'setCity',
        'country_code' => 'setCountryCode',
        'email' => 'setEmail',
        'phone_number' => 'setPhoneNumber',
        'readonly' => 'setReadonly',
        'attachments' => 'setAttachments',
        'tags' => 'setTags',
        'audit_score' => 'setAuditScore',
        'nb_audits' => 'setNbAudits',
        'date_last_audit' => 'setDateLastAudit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'display_name' => 'getDisplayName',
        'date_creation' => 'getDateCreation',
        'logo_url' => 'getLogoUrl',
        'actor_type' => 'getActorType',
        'vendor_type' => 'getVendorType',
        'access_level' => 'getAccessLevel',
        'given_name' => 'getGivenName',
        'family_name' => 'getFamilyName',
        'company_name' => 'getCompanyName',
        'description' => 'getDescription',
        'immatriculation_number' => 'getImmatriculationNumber',
        'website_url' => 'getWebsiteUrl',
        'address' => 'getAddress',
        'zip_code' => 'getZipCode',
        'city' => 'getCity',
        'country_code' => 'getCountryCode',
        'email' => 'getEmail',
        'phone_number' => 'getPhoneNumber',
        'readonly' => 'getReadonly',
        'attachments' => 'getAttachments',
        'tags' => 'getTags',
        'audit_score' => 'getAuditScore',
        'nb_audits' => 'getNbAudits',
        'date_last_audit' => 'getDateLastAudit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['date_creation'] = $data['date_creation'] ?? null;
        $this->container['logo_url'] = $data['logo_url'] ?? null;
        $this->container['actor_type'] = $data['actor_type'] ?? null;
        $this->container['vendor_type'] = $data['vendor_type'] ?? null;
        $this->container['access_level'] = $data['access_level'] ?? null;
        $this->container['given_name'] = $data['given_name'] ?? null;
        $this->container['family_name'] = $data['family_name'] ?? null;
        $this->container['company_name'] = $data['company_name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['immatriculation_number'] = $data['immatriculation_number'] ?? null;
        $this->container['website_url'] = $data['website_url'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['zip_code'] = $data['zip_code'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['country_code'] = $data['country_code'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['phone_number'] = $data['phone_number'] ?? null;
        $this->container['readonly'] = $data['readonly'] ?? null;
        $this->container['attachments'] = $data['attachments'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
        $this->container['audit_score'] = $data['audit_score'] ?? null;
        $this->container['nb_audits'] = $data['nb_audits'] ?? null;
        $this->container['date_last_audit'] = $data['date_last_audit'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['zip_code']) && (mb_strlen($this->container['zip_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'zip_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 300)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['country_code']) && (mb_strlen($this->container['country_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 255)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['phone_number']) && (mb_strlen($this->container['phone_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name display_name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets date_creation
     *
     * @return \DateTime|null
     */
    public function getDateCreation()
    {
        return $this->container['date_creation'];
    }

    /**
     * Sets date_creation
     *
     * @param \DateTime|null $date_creation date_creation
     *
     * @return self
     */
    public function setDateCreation($date_creation)
    {
        $this->container['date_creation'] = $date_creation;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string|null
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string|null $logo_url logo_url
     *
     * @return self
     */
    public function setLogoUrl($logo_url)
    {
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets actor_type
     *
     * @return \OpenAPI\Client\Model\ActorType|null
     */
    public function getActorType()
    {
        return $this->container['actor_type'];
    }

    /**
     * Sets actor_type
     *
     * @param \OpenAPI\Client\Model\ActorType|null $actor_type actor_type
     *
     * @return self
     */
    public function setActorType($actor_type)
    {
        $this->container['actor_type'] = $actor_type;

        return $this;
    }

    /**
     * Gets vendor_type
     *
     * @return \OpenAPI\Client\Model\VendorType|null
     */
    public function getVendorType()
    {
        return $this->container['vendor_type'];
    }

    /**
     * Sets vendor_type
     *
     * @param \OpenAPI\Client\Model\VendorType|null $vendor_type vendor_type
     *
     * @return self
     */
    public function setVendorType($vendor_type)
    {
        $this->container['vendor_type'] = $vendor_type;

        return $this;
    }

    /**
     * Gets access_level
     *
     * @return \OpenAPI\Client\Model\AccessLevel|null
     */
    public function getAccessLevel()
    {
        return $this->container['access_level'];
    }

    /**
     * Sets access_level
     *
     * @param \OpenAPI\Client\Model\AccessLevel|null $access_level access_level
     *
     * @return self
     */
    public function setAccessLevel($access_level)
    {
        $this->container['access_level'] = $access_level;

        return $this;
    }

    /**
     * Gets given_name
     *
     * @return string|null
     */
    public function getGivenName()
    {
        return $this->container['given_name'];
    }

    /**
     * Sets given_name
     *
     * @param string|null $given_name given_name
     *
     * @return self
     */
    public function setGivenName($given_name)
    {
        $this->container['given_name'] = $given_name;

        return $this;
    }

    /**
     * Gets family_name
     *
     * @return string|null
     */
    public function getFamilyName()
    {
        return $this->container['family_name'];
    }

    /**
     * Sets family_name
     *
     * @param string|null $family_name family_name
     *
     * @return self
     */
    public function setFamilyName($family_name)
    {
        $this->container['family_name'] = $family_name;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string|null $company_name company_name
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets immatriculation_number
     *
     * @return string|null
     */
    public function getImmatriculationNumber()
    {
        return $this->container['immatriculation_number'];
    }

    /**
     * Sets immatriculation_number
     *
     * @param string|null $immatriculation_number immatriculation_number
     *
     * @return self
     */
    public function setImmatriculationNumber($immatriculation_number)
    {
        $this->container['immatriculation_number'] = $immatriculation_number;

        return $this;
    }

    /**
     * Gets website_url
     *
     * @return string|null
     */
    public function getWebsiteUrl()
    {
        return $this->container['website_url'];
    }

    /**
     * Sets website_url
     *
     * @param string|null $website_url website_url
     *
     * @return self
     */
    public function setWebsiteUrl($website_url)
    {
        $this->container['website_url'] = $website_url;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string|null
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string|null $zip_code zip_code
     *
     * @return self
     */
    public function setZipCode($zip_code)
    {
        if (!is_null($zip_code) && (mb_strlen($zip_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $zip_code when calling ActorDto., must be smaller than or equal to 10.');
        }

        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (!is_null($city) && (mb_strlen($city) > 300)) {
            throw new \InvalidArgumentException('invalid length for $city when calling ActorDto., must be smaller than or equal to 300.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code country_code
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        if (!is_null($country_code) && (mb_strlen($country_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling ActorDto., must be smaller than or equal to 3.');
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (mb_strlen($email) > 255)) {
            throw new \InvalidArgumentException('invalid length for $email when calling ActorDto., must be smaller than or equal to 255.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number phone_number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (!is_null($phone_number) && (mb_strlen($phone_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling ActorDto., must be smaller than or equal to 20.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets readonly
     *
     * @return bool|null
     */
    public function getReadonly()
    {
        return $this->container['readonly'];
    }

    /**
     * Sets readonly
     *
     * @param bool|null $readonly readonly
     *
     * @return self
     */
    public function setReadonly($readonly)
    {
        $this->container['readonly'] = $readonly;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \OpenAPI\Client\Model\AttachmentDto[]|null
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \OpenAPI\Client\Model\AttachmentDto[]|null $attachments attachments
     *
     * @return self
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \OpenAPI\Client\Model\TagDto[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \OpenAPI\Client\Model\TagDto[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets audit_score
     *
     * @return int|null
     */
    public function getAuditScore()
    {
        return $this->container['audit_score'];
    }

    /**
     * Sets audit_score
     *
     * @param int|null $audit_score audit_score
     *
     * @return self
     */
    public function setAuditScore($audit_score)
    {
        $this->container['audit_score'] = $audit_score;

        return $this;
    }

    /**
     * Gets nb_audits
     *
     * @return int|null
     */
    public function getNbAudits()
    {
        return $this->container['nb_audits'];
    }

    /**
     * Sets nb_audits
     *
     * @param int|null $nb_audits nb_audits
     *
     * @return self
     */
    public function setNbAudits($nb_audits)
    {
        $this->container['nb_audits'] = $nb_audits;

        return $this;
    }

    /**
     * Gets date_last_audit
     *
     * @return \DateTime|null
     */
    public function getDateLastAudit()
    {
        return $this->container['date_last_audit'];
    }

    /**
     * Sets date_last_audit
     *
     * @param \DateTime|null $date_last_audit date_last_audit
     *
     * @return self
     */
    public function setDateLastAudit($date_last_audit)
    {
        $this->container['date_last_audit'] = $date_last_audit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


