<?php
/**
 * DataBreachDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dastra API
 *
 * Dastra's public REST API
 *
 * The version of the OpenAPI document: v1
 * Contact: antoine.bidault@dastra.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DataBreachDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DataBreachDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DataBreachDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'label' => 'string',
        'description_html' => 'string',
        'location' => 'string',
        'access' => 'bool',
        'integrity' => 'bool',
        'availability' => 'bool',
        'state' => '\OpenAPI\Client\Model\DataBreachState',
        'reason' => '\OpenAPI\Client\Model\DataBreachReason',
        'reason_description' => 'string',
        'processor_involved' => 'bool',
        'processors' => '\OpenAPI\Client\Model\ActorDto[]',
        'person_categories' => '\OpenAPI\Client\Model\DataBreachPersonCategoryDto[]',
        'data_description_html' => 'string',
        'sensitive_data' => 'bool',
        'probability_score' => '\OpenAPI\Client\Model\DataBreachProbabilityScore',
        'impact_score' => '\OpenAPI\Client\Model\DataBreachImpactScore',
        'risk_analysis_done' => 'bool',
        'score' => 'int',
        'risk_level' => '\OpenAPI\Client\Model\DataBreachRiskLevel',
        'risk_level_forced' => '\OpenAPI\Client\Model\DataBreachRiskLevel',
        'risk_analysis_html_content' => 'string',
        'data_volume' => 'int',
        'data_support' => 'string',
        'communication_done' => 'bool',
        'no_communication_reason' => '\OpenAPI\Client\Model\NoCommunicationReason',
        'no_communication_justification' => 'string',
        'notifications' => '\OpenAPI\Client\Model\DataBreachNotificationDto[]',
        'period' => 'string',
        'start_date' => '\DateTime',
        'start_hour' => 'string',
        'end_date' => '\DateTime',
        'end_hour' => 'string',
        'constatation_date' => '\DateTime',
        'constatation_hour' => 'string',
        'operator' => '\OpenAPI\Client\Model\UserLightDto',
        'work_flow_step' => '\OpenAPI\Client\Model\WorkFlowStepDto',
        'area' => '\OpenAPI\Client\Model\AreaDto',
        'area_id' => 'int',
        'date_creation' => '\DateTime',
        'date_update' => '\DateTime',
        'work_space' => '\OpenAPI\Client\Model\WorkSpaceDto',
        'post_mortem_done' => 'bool',
        'post_mortem_date' => '\DateTime',
        'post_mortem_ref' => 'string',
        'post_mortem_html' => 'string',
        'security_measures' => 'string',
        'adopted_security_measures' => 'string',
        'attachments' => '\OpenAPI\Client\Model\AttachmentDto[]',
        'tags' => '\OpenAPI\Client\Model\TagDto[]',
        'complementary_informations' => 'string',
        'data_processings' => '\OpenAPI\Client\Model\DataProcessingLightDto[]',
        'date_closed' => '\DateTime',
        'date_archived' => '\DateTime',
        'archived' => 'bool',
        'creator' => '\OpenAPI\Client\Model\UserLightDto'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'label' => null,
        'description_html' => null,
        'location' => null,
        'access' => null,
        'integrity' => null,
        'availability' => null,
        'state' => null,
        'reason' => null,
        'reason_description' => null,
        'processor_involved' => null,
        'processors' => null,
        'person_categories' => null,
        'data_description_html' => null,
        'sensitive_data' => null,
        'probability_score' => null,
        'impact_score' => null,
        'risk_analysis_done' => null,
        'score' => 'int32',
        'risk_level' => null,
        'risk_level_forced' => null,
        'risk_analysis_html_content' => null,
        'data_volume' => 'int64',
        'data_support' => null,
        'communication_done' => null,
        'no_communication_reason' => null,
        'no_communication_justification' => null,
        'notifications' => null,
        'period' => null,
        'start_date' => 'date-time',
        'start_hour' => null,
        'end_date' => 'date-time',
        'end_hour' => null,
        'constatation_date' => 'date-time',
        'constatation_hour' => null,
        'operator' => null,
        'work_flow_step' => null,
        'area' => null,
        'area_id' => 'int32',
        'date_creation' => 'date-time',
        'date_update' => 'date-time',
        'work_space' => null,
        'post_mortem_done' => null,
        'post_mortem_date' => 'date-time',
        'post_mortem_ref' => null,
        'post_mortem_html' => null,
        'security_measures' => null,
        'adopted_security_measures' => null,
        'attachments' => null,
        'tags' => null,
        'complementary_informations' => null,
        'data_processings' => null,
        'date_closed' => 'date-time',
        'date_archived' => 'date-time',
        'archived' => null,
        'creator' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'label' => 'label',
        'description_html' => 'descriptionHtml',
        'location' => 'location',
        'access' => 'access',
        'integrity' => 'integrity',
        'availability' => 'availability',
        'state' => 'state',
        'reason' => 'reason',
        'reason_description' => 'reasonDescription',
        'processor_involved' => 'processorInvolved',
        'processors' => 'processors',
        'person_categories' => 'personCategories',
        'data_description_html' => 'dataDescriptionHtml',
        'sensitive_data' => 'sensitiveData',
        'probability_score' => 'probabilityScore',
        'impact_score' => 'impactScore',
        'risk_analysis_done' => 'riskAnalysisDone',
        'score' => 'score',
        'risk_level' => 'riskLevel',
        'risk_level_forced' => 'riskLevelForced',
        'risk_analysis_html_content' => 'riskAnalysisHtmlContent',
        'data_volume' => 'dataVolume',
        'data_support' => 'dataSupport',
        'communication_done' => 'communicationDone',
        'no_communication_reason' => 'noCommunicationReason',
        'no_communication_justification' => 'noCommunicationJustification',
        'notifications' => 'notifications',
        'period' => 'period',
        'start_date' => 'startDate',
        'start_hour' => 'startHour',
        'end_date' => 'endDate',
        'end_hour' => 'endHour',
        'constatation_date' => 'constatationDate',
        'constatation_hour' => 'constatationHour',
        'operator' => 'operator',
        'work_flow_step' => 'workFlowStep',
        'area' => 'area',
        'area_id' => 'areaId',
        'date_creation' => 'dateCreation',
        'date_update' => 'dateUpdate',
        'work_space' => 'workSpace',
        'post_mortem_done' => 'postMortemDone',
        'post_mortem_date' => 'postMortemDate',
        'post_mortem_ref' => 'postMortemRef',
        'post_mortem_html' => 'postMortemHtml',
        'security_measures' => 'securityMeasures',
        'adopted_security_measures' => 'adoptedSecurityMeasures',
        'attachments' => 'attachments',
        'tags' => 'tags',
        'complementary_informations' => 'complementaryInformations',
        'data_processings' => 'dataProcessings',
        'date_closed' => 'dateClosed',
        'date_archived' => 'dateArchived',
        'archived' => 'archived',
        'creator' => 'creator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'label' => 'setLabel',
        'description_html' => 'setDescriptionHtml',
        'location' => 'setLocation',
        'access' => 'setAccess',
        'integrity' => 'setIntegrity',
        'availability' => 'setAvailability',
        'state' => 'setState',
        'reason' => 'setReason',
        'reason_description' => 'setReasonDescription',
        'processor_involved' => 'setProcessorInvolved',
        'processors' => 'setProcessors',
        'person_categories' => 'setPersonCategories',
        'data_description_html' => 'setDataDescriptionHtml',
        'sensitive_data' => 'setSensitiveData',
        'probability_score' => 'setProbabilityScore',
        'impact_score' => 'setImpactScore',
        'risk_analysis_done' => 'setRiskAnalysisDone',
        'score' => 'setScore',
        'risk_level' => 'setRiskLevel',
        'risk_level_forced' => 'setRiskLevelForced',
        'risk_analysis_html_content' => 'setRiskAnalysisHtmlContent',
        'data_volume' => 'setDataVolume',
        'data_support' => 'setDataSupport',
        'communication_done' => 'setCommunicationDone',
        'no_communication_reason' => 'setNoCommunicationReason',
        'no_communication_justification' => 'setNoCommunicationJustification',
        'notifications' => 'setNotifications',
        'period' => 'setPeriod',
        'start_date' => 'setStartDate',
        'start_hour' => 'setStartHour',
        'end_date' => 'setEndDate',
        'end_hour' => 'setEndHour',
        'constatation_date' => 'setConstatationDate',
        'constatation_hour' => 'setConstatationHour',
        'operator' => 'setOperator',
        'work_flow_step' => 'setWorkFlowStep',
        'area' => 'setArea',
        'area_id' => 'setAreaId',
        'date_creation' => 'setDateCreation',
        'date_update' => 'setDateUpdate',
        'work_space' => 'setWorkSpace',
        'post_mortem_done' => 'setPostMortemDone',
        'post_mortem_date' => 'setPostMortemDate',
        'post_mortem_ref' => 'setPostMortemRef',
        'post_mortem_html' => 'setPostMortemHtml',
        'security_measures' => 'setSecurityMeasures',
        'adopted_security_measures' => 'setAdoptedSecurityMeasures',
        'attachments' => 'setAttachments',
        'tags' => 'setTags',
        'complementary_informations' => 'setComplementaryInformations',
        'data_processings' => 'setDataProcessings',
        'date_closed' => 'setDateClosed',
        'date_archived' => 'setDateArchived',
        'archived' => 'setArchived',
        'creator' => 'setCreator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'label' => 'getLabel',
        'description_html' => 'getDescriptionHtml',
        'location' => 'getLocation',
        'access' => 'getAccess',
        'integrity' => 'getIntegrity',
        'availability' => 'getAvailability',
        'state' => 'getState',
        'reason' => 'getReason',
        'reason_description' => 'getReasonDescription',
        'processor_involved' => 'getProcessorInvolved',
        'processors' => 'getProcessors',
        'person_categories' => 'getPersonCategories',
        'data_description_html' => 'getDataDescriptionHtml',
        'sensitive_data' => 'getSensitiveData',
        'probability_score' => 'getProbabilityScore',
        'impact_score' => 'getImpactScore',
        'risk_analysis_done' => 'getRiskAnalysisDone',
        'score' => 'getScore',
        'risk_level' => 'getRiskLevel',
        'risk_level_forced' => 'getRiskLevelForced',
        'risk_analysis_html_content' => 'getRiskAnalysisHtmlContent',
        'data_volume' => 'getDataVolume',
        'data_support' => 'getDataSupport',
        'communication_done' => 'getCommunicationDone',
        'no_communication_reason' => 'getNoCommunicationReason',
        'no_communication_justification' => 'getNoCommunicationJustification',
        'notifications' => 'getNotifications',
        'period' => 'getPeriod',
        'start_date' => 'getStartDate',
        'start_hour' => 'getStartHour',
        'end_date' => 'getEndDate',
        'end_hour' => 'getEndHour',
        'constatation_date' => 'getConstatationDate',
        'constatation_hour' => 'getConstatationHour',
        'operator' => 'getOperator',
        'work_flow_step' => 'getWorkFlowStep',
        'area' => 'getArea',
        'area_id' => 'getAreaId',
        'date_creation' => 'getDateCreation',
        'date_update' => 'getDateUpdate',
        'work_space' => 'getWorkSpace',
        'post_mortem_done' => 'getPostMortemDone',
        'post_mortem_date' => 'getPostMortemDate',
        'post_mortem_ref' => 'getPostMortemRef',
        'post_mortem_html' => 'getPostMortemHtml',
        'security_measures' => 'getSecurityMeasures',
        'adopted_security_measures' => 'getAdoptedSecurityMeasures',
        'attachments' => 'getAttachments',
        'tags' => 'getTags',
        'complementary_informations' => 'getComplementaryInformations',
        'data_processings' => 'getDataProcessings',
        'date_closed' => 'getDateClosed',
        'date_archived' => 'getDateArchived',
        'archived' => 'getArchived',
        'creator' => 'getCreator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['label'] = $data['label'] ?? null;
        $this->container['description_html'] = $data['description_html'] ?? null;
        $this->container['location'] = $data['location'] ?? null;
        $this->container['access'] = $data['access'] ?? null;
        $this->container['integrity'] = $data['integrity'] ?? null;
        $this->container['availability'] = $data['availability'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['reason'] = $data['reason'] ?? null;
        $this->container['reason_description'] = $data['reason_description'] ?? null;
        $this->container['processor_involved'] = $data['processor_involved'] ?? null;
        $this->container['processors'] = $data['processors'] ?? null;
        $this->container['person_categories'] = $data['person_categories'] ?? null;
        $this->container['data_description_html'] = $data['data_description_html'] ?? null;
        $this->container['sensitive_data'] = $data['sensitive_data'] ?? null;
        $this->container['probability_score'] = $data['probability_score'] ?? null;
        $this->container['impact_score'] = $data['impact_score'] ?? null;
        $this->container['risk_analysis_done'] = $data['risk_analysis_done'] ?? null;
        $this->container['score'] = $data['score'] ?? null;
        $this->container['risk_level'] = $data['risk_level'] ?? null;
        $this->container['risk_level_forced'] = $data['risk_level_forced'] ?? null;
        $this->container['risk_analysis_html_content'] = $data['risk_analysis_html_content'] ?? null;
        $this->container['data_volume'] = $data['data_volume'] ?? null;
        $this->container['data_support'] = $data['data_support'] ?? null;
        $this->container['communication_done'] = $data['communication_done'] ?? null;
        $this->container['no_communication_reason'] = $data['no_communication_reason'] ?? null;
        $this->container['no_communication_justification'] = $data['no_communication_justification'] ?? null;
        $this->container['notifications'] = $data['notifications'] ?? null;
        $this->container['period'] = $data['period'] ?? null;
        $this->container['start_date'] = $data['start_date'] ?? null;
        $this->container['start_hour'] = $data['start_hour'] ?? null;
        $this->container['end_date'] = $data['end_date'] ?? null;
        $this->container['end_hour'] = $data['end_hour'] ?? null;
        $this->container['constatation_date'] = $data['constatation_date'] ?? null;
        $this->container['constatation_hour'] = $data['constatation_hour'] ?? null;
        $this->container['operator'] = $data['operator'] ?? null;
        $this->container['work_flow_step'] = $data['work_flow_step'] ?? null;
        $this->container['area'] = $data['area'] ?? null;
        $this->container['area_id'] = $data['area_id'] ?? null;
        $this->container['date_creation'] = $data['date_creation'] ?? null;
        $this->container['date_update'] = $data['date_update'] ?? null;
        $this->container['work_space'] = $data['work_space'] ?? null;
        $this->container['post_mortem_done'] = $data['post_mortem_done'] ?? null;
        $this->container['post_mortem_date'] = $data['post_mortem_date'] ?? null;
        $this->container['post_mortem_ref'] = $data['post_mortem_ref'] ?? null;
        $this->container['post_mortem_html'] = $data['post_mortem_html'] ?? null;
        $this->container['security_measures'] = $data['security_measures'] ?? null;
        $this->container['adopted_security_measures'] = $data['adopted_security_measures'] ?? null;
        $this->container['attachments'] = $data['attachments'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
        $this->container['complementary_informations'] = $data['complementary_informations'] ?? null;
        $this->container['data_processings'] = $data['data_processings'] ?? null;
        $this->container['date_closed'] = $data['date_closed'] ?? null;
        $this->container['date_archived'] = $data['date_archived'] ?? null;
        $this->container['archived'] = $data['archived'] ?? null;
        $this->container['creator'] = $data['creator'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['label'] === null) {
            $invalidProperties[] = "'label' can't be null";
        }
        if (!is_null($this->container['reason_description']) && (mb_strlen($this->container['reason_description']) > 1000)) {
            $invalidProperties[] = "invalid value for 'reason_description', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['data_support']) && (mb_strlen($this->container['data_support']) > 1000)) {
            $invalidProperties[] = "invalid value for 'data_support', the character length must be smaller than or equal to 1000.";
        }

        if ($this->container['start_date'] === null) {
            $invalidProperties[] = "'start_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label Text label of the data breach
     *
     * @return self
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets description_html
     *
     * @return string|null
     */
    public function getDescriptionHtml()
    {
        return $this->container['description_html'];
    }

    /**
     * Sets description_html
     *
     * @param string|null $description_html Description of the data breach (HTML / rich text editor)  Html is automatically controller
     *
     * @return self
     */
    public function setDescriptionHtml($description_html)
    {
        $this->container['description_html'] = $description_html;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location Location of the breach (Text description)
     *
     * @return self
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets access
     *
     * @return bool|null
     */
    public function getAccess()
    {
        return $this->container['access'];
    }

    /**
     * Sets access
     *
     * @param bool|null $access Data breach type
     *
     * @return self
     */
    public function setAccess($access)
    {
        $this->container['access'] = $access;

        return $this;
    }

    /**
     * Gets integrity
     *
     * @return bool|null
     */
    public function getIntegrity()
    {
        return $this->container['integrity'];
    }

    /**
     * Sets integrity
     *
     * @param bool|null $integrity integrity
     *
     * @return self
     */
    public function setIntegrity($integrity)
    {
        $this->container['integrity'] = $integrity;

        return $this;
    }

    /**
     * Gets availability
     *
     * @return bool|null
     */
    public function getAvailability()
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     *
     * @param bool|null $availability availability
     *
     * @return self
     */
    public function setAvailability($availability)
    {
        $this->container['availability'] = $availability;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \OpenAPI\Client\Model\DataBreachState|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \OpenAPI\Client\Model\DataBreachState|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return \OpenAPI\Client\Model\DataBreachReason|null
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param \OpenAPI\Client\Model\DataBreachReason|null $reason reason
     *
     * @return self
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets reason_description
     *
     * @return string|null
     */
    public function getReasonDescription()
    {
        return $this->container['reason_description'];
    }

    /**
     * Sets reason_description
     *
     * @param string|null $reason_description Further details on the data breach reason (text without html)
     *
     * @return self
     */
    public function setReasonDescription($reason_description)
    {
        if (!is_null($reason_description) && (mb_strlen($reason_description) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $reason_description when calling DataBreachDto., must be smaller than or equal to 1000.');
        }

        $this->container['reason_description'] = $reason_description;

        return $this;
    }

    /**
     * Gets processor_involved
     *
     * @return bool|null
     */
    public function getProcessorInvolved()
    {
        return $this->container['processor_involved'];
    }

    /**
     * Sets processor_involved
     *
     * @param bool|null $processor_involved Wether the data breach involves or not processors
     *
     * @return self
     */
    public function setProcessorInvolved($processor_involved)
    {
        $this->container['processor_involved'] = $processor_involved;

        return $this;
    }

    /**
     * Gets processors
     *
     * @return \OpenAPI\Client\Model\ActorDto[]|null
     */
    public function getProcessors()
    {
        return $this->container['processors'];
    }

    /**
     * Sets processors
     *
     * @param \OpenAPI\Client\Model\ActorDto[]|null $processors Data processors list involved
     *
     * @return self
     */
    public function setProcessors($processors)
    {
        $this->container['processors'] = $processors;

        return $this;
    }

    /**
     * Gets person_categories
     *
     * @return \OpenAPI\Client\Model\DataBreachPersonCategoryDto[]|null
     */
    public function getPersonCategories()
    {
        return $this->container['person_categories'];
    }

    /**
     * Sets person_categories
     *
     * @param \OpenAPI\Client\Model\DataBreachPersonCategoryDto[]|null $person_categories List of person categories concerned
     *
     * @return self
     */
    public function setPersonCategories($person_categories)
    {
        $this->container['person_categories'] = $person_categories;

        return $this;
    }

    /**
     * Gets data_description_html
     *
     * @return string|null
     */
    public function getDataDescriptionHtml()
    {
        return $this->container['data_description_html'];
    }

    /**
     * Sets data_description_html
     *
     * @param string|null $data_description_html data_description_html
     *
     * @return self
     */
    public function setDataDescriptionHtml($data_description_html)
    {
        $this->container['data_description_html'] = $data_description_html;

        return $this;
    }

    /**
     * Gets sensitive_data
     *
     * @return bool|null
     */
    public function getSensitiveData()
    {
        return $this->container['sensitive_data'];
    }

    /**
     * Sets sensitive_data
     *
     * @param bool|null $sensitive_data sensitive_data
     *
     * @return self
     */
    public function setSensitiveData($sensitive_data)
    {
        $this->container['sensitive_data'] = $sensitive_data;

        return $this;
    }

    /**
     * Gets probability_score
     *
     * @return \OpenAPI\Client\Model\DataBreachProbabilityScore|null
     */
    public function getProbabilityScore()
    {
        return $this->container['probability_score'];
    }

    /**
     * Sets probability_score
     *
     * @param \OpenAPI\Client\Model\DataBreachProbabilityScore|null $probability_score probability_score
     *
     * @return self
     */
    public function setProbabilityScore($probability_score)
    {
        $this->container['probability_score'] = $probability_score;

        return $this;
    }

    /**
     * Gets impact_score
     *
     * @return \OpenAPI\Client\Model\DataBreachImpactScore|null
     */
    public function getImpactScore()
    {
        return $this->container['impact_score'];
    }

    /**
     * Sets impact_score
     *
     * @param \OpenAPI\Client\Model\DataBreachImpactScore|null $impact_score impact_score
     *
     * @return self
     */
    public function setImpactScore($impact_score)
    {
        $this->container['impact_score'] = $impact_score;

        return $this;
    }

    /**
     * Gets risk_analysis_done
     *
     * @return bool|null
     */
    public function getRiskAnalysisDone()
    {
        return $this->container['risk_analysis_done'];
    }

    /**
     * Sets risk_analysis_done
     *
     * @param bool|null $risk_analysis_done risk_analysis_done
     *
     * @return self
     */
    public function setRiskAnalysisDone($risk_analysis_done)
    {
        $this->container['risk_analysis_done'] = $risk_analysis_done;

        return $this;
    }

    /**
     * Gets score
     *
     * @return int|null
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param int|null $score score
     *
     * @return self
     */
    public function setScore($score)
    {
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets risk_level
     *
     * @return \OpenAPI\Client\Model\DataBreachRiskLevel|null
     */
    public function getRiskLevel()
    {
        return $this->container['risk_level'];
    }

    /**
     * Sets risk_level
     *
     * @param \OpenAPI\Client\Model\DataBreachRiskLevel|null $risk_level risk_level
     *
     * @return self
     */
    public function setRiskLevel($risk_level)
    {
        $this->container['risk_level'] = $risk_level;

        return $this;
    }

    /**
     * Gets risk_level_forced
     *
     * @return \OpenAPI\Client\Model\DataBreachRiskLevel|null
     */
    public function getRiskLevelForced()
    {
        return $this->container['risk_level_forced'];
    }

    /**
     * Sets risk_level_forced
     *
     * @param \OpenAPI\Client\Model\DataBreachRiskLevel|null $risk_level_forced risk_level_forced
     *
     * @return self
     */
    public function setRiskLevelForced($risk_level_forced)
    {
        $this->container['risk_level_forced'] = $risk_level_forced;

        return $this;
    }

    /**
     * Gets risk_analysis_html_content
     *
     * @return string|null
     */
    public function getRiskAnalysisHtmlContent()
    {
        return $this->container['risk_analysis_html_content'];
    }

    /**
     * Sets risk_analysis_html_content
     *
     * @param string|null $risk_analysis_html_content risk_analysis_html_content
     *
     * @return self
     */
    public function setRiskAnalysisHtmlContent($risk_analysis_html_content)
    {
        $this->container['risk_analysis_html_content'] = $risk_analysis_html_content;

        return $this;
    }

    /**
     * Gets data_volume
     *
     * @return int|null
     */
    public function getDataVolume()
    {
        return $this->container['data_volume'];
    }

    /**
     * Sets data_volume
     *
     * @param int|null $data_volume Nb data involved
     *
     * @return self
     */
    public function setDataVolume($data_volume)
    {
        $this->container['data_volume'] = $data_volume;

        return $this;
    }

    /**
     * Gets data_support
     *
     * @return string|null
     */
    public function getDataSupport()
    {
        return $this->container['data_support'];
    }

    /**
     * Sets data_support
     *
     * @param string|null $data_support data_support
     *
     * @return self
     */
    public function setDataSupport($data_support)
    {
        if (!is_null($data_support) && (mb_strlen($data_support) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $data_support when calling DataBreachDto., must be smaller than or equal to 1000.');
        }

        $this->container['data_support'] = $data_support;

        return $this;
    }

    /**
     * Gets communication_done
     *
     * @return bool|null
     */
    public function getCommunicationDone()
    {
        return $this->container['communication_done'];
    }

    /**
     * Sets communication_done
     *
     * @param bool|null $communication_done communication_done
     *
     * @return self
     */
    public function setCommunicationDone($communication_done)
    {
        $this->container['communication_done'] = $communication_done;

        return $this;
    }

    /**
     * Gets no_communication_reason
     *
     * @return \OpenAPI\Client\Model\NoCommunicationReason|null
     */
    public function getNoCommunicationReason()
    {
        return $this->container['no_communication_reason'];
    }

    /**
     * Sets no_communication_reason
     *
     * @param \OpenAPI\Client\Model\NoCommunicationReason|null $no_communication_reason no_communication_reason
     *
     * @return self
     */
    public function setNoCommunicationReason($no_communication_reason)
    {
        $this->container['no_communication_reason'] = $no_communication_reason;

        return $this;
    }

    /**
     * Gets no_communication_justification
     *
     * @return string|null
     */
    public function getNoCommunicationJustification()
    {
        return $this->container['no_communication_justification'];
    }

    /**
     * Sets no_communication_justification
     *
     * @param string|null $no_communication_justification no_communication_justification
     *
     * @return self
     */
    public function setNoCommunicationJustification($no_communication_justification)
    {
        $this->container['no_communication_justification'] = $no_communication_justification;

        return $this;
    }

    /**
     * Gets notifications
     *
     * @return \OpenAPI\Client\Model\DataBreachNotificationDto[]|null
     */
    public function getNotifications()
    {
        return $this->container['notifications'];
    }

    /**
     * Sets notifications
     *
     * @param \OpenAPI\Client\Model\DataBreachNotificationDto[]|null $notifications Notification types
     *
     * @return self
     */
    public function setNotifications($notifications)
    {
        $this->container['notifications'] = $notifications;

        return $this;
    }

    /**
     * Gets period
     *
     * @return string|null
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param string|null $period period
     *
     * @return self
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date Start date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets start_hour
     *
     * @return string|null
     */
    public function getStartHour()
    {
        return $this->container['start_hour'];
    }

    /**
     * Sets start_hour
     *
     * @param string|null $start_hour hh:mm:ss string format
     *
     * @return self
     */
    public function setStartHour($start_hour)
    {
        $this->container['start_hour'] = $start_hour;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets end_hour
     *
     * @return string|null
     */
    public function getEndHour()
    {
        return $this->container['end_hour'];
    }

    /**
     * Sets end_hour
     *
     * @param string|null $end_hour hh:mm:ss string format
     *
     * @return self
     */
    public function setEndHour($end_hour)
    {
        $this->container['end_hour'] = $end_hour;

        return $this;
    }

    /**
     * Gets constatation_date
     *
     * @return \DateTime|null
     */
    public function getConstatationDate()
    {
        return $this->container['constatation_date'];
    }

    /**
     * Sets constatation_date
     *
     * @param \DateTime|null $constatation_date constatation_date
     *
     * @return self
     */
    public function setConstatationDate($constatation_date)
    {
        $this->container['constatation_date'] = $constatation_date;

        return $this;
    }

    /**
     * Gets constatation_hour
     *
     * @return string|null
     */
    public function getConstatationHour()
    {
        return $this->container['constatation_hour'];
    }

    /**
     * Sets constatation_hour
     *
     * @param string|null $constatation_hour hh:mm:ss string format
     *
     * @return self
     */
    public function setConstatationHour($constatation_hour)
    {
        $this->container['constatation_hour'] = $constatation_hour;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return \OpenAPI\Client\Model\UserLightDto|null
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param \OpenAPI\Client\Model\UserLightDto|null $operator operator
     *
     * @return self
     */
    public function setOperator($operator)
    {
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets work_flow_step
     *
     * @return \OpenAPI\Client\Model\WorkFlowStepDto|null
     */
    public function getWorkFlowStep()
    {
        return $this->container['work_flow_step'];
    }

    /**
     * Sets work_flow_step
     *
     * @param \OpenAPI\Client\Model\WorkFlowStepDto|null $work_flow_step work_flow_step
     *
     * @return self
     */
    public function setWorkFlowStep($work_flow_step)
    {
        $this->container['work_flow_step'] = $work_flow_step;

        return $this;
    }

    /**
     * Gets area
     *
     * @return \OpenAPI\Client\Model\AreaDto|null
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param \OpenAPI\Client\Model\AreaDto|null $area area
     *
     * @return self
     */
    public function setArea($area)
    {
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets area_id
     *
     * @return int|null
     */
    public function getAreaId()
    {
        return $this->container['area_id'];
    }

    /**
     * Sets area_id
     *
     * @param int|null $area_id area_id
     *
     * @return self
     */
    public function setAreaId($area_id)
    {
        $this->container['area_id'] = $area_id;

        return $this;
    }

    /**
     * Gets date_creation
     *
     * @return \DateTime|null
     */
    public function getDateCreation()
    {
        return $this->container['date_creation'];
    }

    /**
     * Sets date_creation
     *
     * @param \DateTime|null $date_creation date_creation
     *
     * @return self
     */
    public function setDateCreation($date_creation)
    {
        $this->container['date_creation'] = $date_creation;

        return $this;
    }

    /**
     * Gets date_update
     *
     * @return \DateTime|null
     */
    public function getDateUpdate()
    {
        return $this->container['date_update'];
    }

    /**
     * Sets date_update
     *
     * @param \DateTime|null $date_update date_update
     *
     * @return self
     */
    public function setDateUpdate($date_update)
    {
        $this->container['date_update'] = $date_update;

        return $this;
    }

    /**
     * Gets work_space
     *
     * @return \OpenAPI\Client\Model\WorkSpaceDto|null
     */
    public function getWorkSpace()
    {
        return $this->container['work_space'];
    }

    /**
     * Sets work_space
     *
     * @param \OpenAPI\Client\Model\WorkSpaceDto|null $work_space work_space
     *
     * @return self
     */
    public function setWorkSpace($work_space)
    {
        $this->container['work_space'] = $work_space;

        return $this;
    }

    /**
     * Gets post_mortem_done
     *
     * @return bool|null
     */
    public function getPostMortemDone()
    {
        return $this->container['post_mortem_done'];
    }

    /**
     * Sets post_mortem_done
     *
     * @param bool|null $post_mortem_done post_mortem_done
     *
     * @return self
     */
    public function setPostMortemDone($post_mortem_done)
    {
        $this->container['post_mortem_done'] = $post_mortem_done;

        return $this;
    }

    /**
     * Gets post_mortem_date
     *
     * @return \DateTime|null
     */
    public function getPostMortemDate()
    {
        return $this->container['post_mortem_date'];
    }

    /**
     * Sets post_mortem_date
     *
     * @param \DateTime|null $post_mortem_date post_mortem_date
     *
     * @return self
     */
    public function setPostMortemDate($post_mortem_date)
    {
        $this->container['post_mortem_date'] = $post_mortem_date;

        return $this;
    }

    /**
     * Gets post_mortem_ref
     *
     * @return string|null
     */
    public function getPostMortemRef()
    {
        return $this->container['post_mortem_ref'];
    }

    /**
     * Sets post_mortem_ref
     *
     * @param string|null $post_mortem_ref post_mortem_ref
     *
     * @return self
     */
    public function setPostMortemRef($post_mortem_ref)
    {
        $this->container['post_mortem_ref'] = $post_mortem_ref;

        return $this;
    }

    /**
     * Gets post_mortem_html
     *
     * @return string|null
     */
    public function getPostMortemHtml()
    {
        return $this->container['post_mortem_html'];
    }

    /**
     * Sets post_mortem_html
     *
     * @param string|null $post_mortem_html post_mortem_html
     *
     * @return self
     */
    public function setPostMortemHtml($post_mortem_html)
    {
        $this->container['post_mortem_html'] = $post_mortem_html;

        return $this;
    }

    /**
     * Gets security_measures
     *
     * @return string|null
     */
    public function getSecurityMeasures()
    {
        return $this->container['security_measures'];
    }

    /**
     * Sets security_measures
     *
     * @param string|null $security_measures security_measures
     *
     * @return self
     */
    public function setSecurityMeasures($security_measures)
    {
        $this->container['security_measures'] = $security_measures;

        return $this;
    }

    /**
     * Gets adopted_security_measures
     *
     * @return string|null
     */
    public function getAdoptedSecurityMeasures()
    {
        return $this->container['adopted_security_measures'];
    }

    /**
     * Sets adopted_security_measures
     *
     * @param string|null $adopted_security_measures adopted_security_measures
     *
     * @return self
     */
    public function setAdoptedSecurityMeasures($adopted_security_measures)
    {
        $this->container['adopted_security_measures'] = $adopted_security_measures;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \OpenAPI\Client\Model\AttachmentDto[]|null
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \OpenAPI\Client\Model\AttachmentDto[]|null $attachments attachments
     *
     * @return self
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \OpenAPI\Client\Model\TagDto[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \OpenAPI\Client\Model\TagDto[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets complementary_informations
     *
     * @return string|null
     */
    public function getComplementaryInformations()
    {
        return $this->container['complementary_informations'];
    }

    /**
     * Sets complementary_informations
     *
     * @param string|null $complementary_informations complementary_informations
     *
     * @return self
     */
    public function setComplementaryInformations($complementary_informations)
    {
        $this->container['complementary_informations'] = $complementary_informations;

        return $this;
    }

    /**
     * Gets data_processings
     *
     * @return \OpenAPI\Client\Model\DataProcessingLightDto[]|null
     */
    public function getDataProcessings()
    {
        return $this->container['data_processings'];
    }

    /**
     * Sets data_processings
     *
     * @param \OpenAPI\Client\Model\DataProcessingLightDto[]|null $data_processings data_processings
     *
     * @return self
     */
    public function setDataProcessings($data_processings)
    {
        $this->container['data_processings'] = $data_processings;

        return $this;
    }

    /**
     * Gets date_closed
     *
     * @return \DateTime|null
     */
    public function getDateClosed()
    {
        return $this->container['date_closed'];
    }

    /**
     * Sets date_closed
     *
     * @param \DateTime|null $date_closed date_closed
     *
     * @return self
     */
    public function setDateClosed($date_closed)
    {
        $this->container['date_closed'] = $date_closed;

        return $this;
    }

    /**
     * Gets date_archived
     *
     * @return \DateTime|null
     */
    public function getDateArchived()
    {
        return $this->container['date_archived'];
    }

    /**
     * Sets date_archived
     *
     * @param \DateTime|null $date_archived date_archived
     *
     * @return self
     */
    public function setDateArchived($date_archived)
    {
        $this->container['date_archived'] = $date_archived;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived archived
     *
     * @return self
     */
    public function setArchived($archived)
    {
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return \OpenAPI\Client\Model\UserLightDto|null
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param \OpenAPI\Client\Model\UserLightDto|null $creator creator
     *
     * @return self
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


