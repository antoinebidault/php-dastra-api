<?php
/**
 * DataRetentionRuleDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dastra API
 *
 * Dastra's public REST API
 *
 * The version of the OpenAPI document: v1
 * Contact: antoine.bidault@dastra.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DataRetentionRuleDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DataRetentionRuleDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DataRetentionRuleDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'contacts' => '\OpenAPI\Client\Model\ActorDto[]',
        'data_fields' => '\OpenAPI\Client\Model\DataFieldDto[]',
        'tags' => '\OpenAPI\Client\Model\TagDto[]',
        'readonly' => 'bool',
        'purposes' => 'string[]',
        'id' => 'string',
        'label' => 'string',
        'description' => 'string',
        'date_creation' => '\DateTime',
        'date_update' => '\DateTime',
        'base_active_description' => 'string',
        'base_active_legal_basis' => 'string',
        'intermediate_archiving_legal_basis' => 'string',
        'intermediate_archiving_description' => 'string',
        'destruction_description' => 'string',
        'destruction_legal_basis' => 'string',
        'data_set_source' => '\OpenAPI\Client\Model\DataSetSource',
        'required' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'contacts' => null,
        'data_fields' => null,
        'tags' => null,
        'readonly' => null,
        'purposes' => 'uuid',
        'id' => 'uuid',
        'label' => null,
        'description' => null,
        'date_creation' => 'date-time',
        'date_update' => 'date-time',
        'base_active_description' => null,
        'base_active_legal_basis' => null,
        'intermediate_archiving_legal_basis' => null,
        'intermediate_archiving_description' => null,
        'destruction_description' => null,
        'destruction_legal_basis' => null,
        'data_set_source' => null,
        'required' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contacts' => 'contacts',
        'data_fields' => 'dataFields',
        'tags' => 'tags',
        'readonly' => 'readonly',
        'purposes' => 'purposes',
        'id' => 'id',
        'label' => 'label',
        'description' => 'description',
        'date_creation' => 'dateCreation',
        'date_update' => 'dateUpdate',
        'base_active_description' => 'baseActiveDescription',
        'base_active_legal_basis' => 'baseActiveLegalBasis',
        'intermediate_archiving_legal_basis' => 'intermediateArchivingLegalBasis',
        'intermediate_archiving_description' => 'intermediateArchivingDescription',
        'destruction_description' => 'destructionDescription',
        'destruction_legal_basis' => 'destructionLegalBasis',
        'data_set_source' => 'dataSetSource',
        'required' => 'required'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contacts' => 'setContacts',
        'data_fields' => 'setDataFields',
        'tags' => 'setTags',
        'readonly' => 'setReadonly',
        'purposes' => 'setPurposes',
        'id' => 'setId',
        'label' => 'setLabel',
        'description' => 'setDescription',
        'date_creation' => 'setDateCreation',
        'date_update' => 'setDateUpdate',
        'base_active_description' => 'setBaseActiveDescription',
        'base_active_legal_basis' => 'setBaseActiveLegalBasis',
        'intermediate_archiving_legal_basis' => 'setIntermediateArchivingLegalBasis',
        'intermediate_archiving_description' => 'setIntermediateArchivingDescription',
        'destruction_description' => 'setDestructionDescription',
        'destruction_legal_basis' => 'setDestructionLegalBasis',
        'data_set_source' => 'setDataSetSource',
        'required' => 'setRequired'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contacts' => 'getContacts',
        'data_fields' => 'getDataFields',
        'tags' => 'getTags',
        'readonly' => 'getReadonly',
        'purposes' => 'getPurposes',
        'id' => 'getId',
        'label' => 'getLabel',
        'description' => 'getDescription',
        'date_creation' => 'getDateCreation',
        'date_update' => 'getDateUpdate',
        'base_active_description' => 'getBaseActiveDescription',
        'base_active_legal_basis' => 'getBaseActiveLegalBasis',
        'intermediate_archiving_legal_basis' => 'getIntermediateArchivingLegalBasis',
        'intermediate_archiving_description' => 'getIntermediateArchivingDescription',
        'destruction_description' => 'getDestructionDescription',
        'destruction_legal_basis' => 'getDestructionLegalBasis',
        'data_set_source' => 'getDataSetSource',
        'required' => 'getRequired'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contacts'] = $data['contacts'] ?? null;
        $this->container['data_fields'] = $data['data_fields'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
        $this->container['readonly'] = $data['readonly'] ?? null;
        $this->container['purposes'] = $data['purposes'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['label'] = $data['label'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['date_creation'] = $data['date_creation'] ?? null;
        $this->container['date_update'] = $data['date_update'] ?? null;
        $this->container['base_active_description'] = $data['base_active_description'] ?? null;
        $this->container['base_active_legal_basis'] = $data['base_active_legal_basis'] ?? null;
        $this->container['intermediate_archiving_legal_basis'] = $data['intermediate_archiving_legal_basis'] ?? null;
        $this->container['intermediate_archiving_description'] = $data['intermediate_archiving_description'] ?? null;
        $this->container['destruction_description'] = $data['destruction_description'] ?? null;
        $this->container['destruction_legal_basis'] = $data['destruction_legal_basis'] ?? null;
        $this->container['data_set_source'] = $data['data_set_source'] ?? null;
        $this->container['required'] = $data['required'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['label'] === null) {
            $invalidProperties[] = "'label' can't be null";
        }
        if ((mb_strlen($this->container['label']) > 400)) {
            $invalidProperties[] = "invalid value for 'label', the character length must be smaller than or equal to 400.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 3000)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 3000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contacts
     *
     * @return \OpenAPI\Client\Model\ActorDto[]|null
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \OpenAPI\Client\Model\ActorDto[]|null $contacts contacts
     *
     * @return self
     */
    public function setContacts($contacts)
    {
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets data_fields
     *
     * @return \OpenAPI\Client\Model\DataFieldDto[]|null
     */
    public function getDataFields()
    {
        return $this->container['data_fields'];
    }

    /**
     * Sets data_fields
     *
     * @param \OpenAPI\Client\Model\DataFieldDto[]|null $data_fields data_fields
     *
     * @return self
     */
    public function setDataFields($data_fields)
    {
        $this->container['data_fields'] = $data_fields;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \OpenAPI\Client\Model\TagDto[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \OpenAPI\Client\Model\TagDto[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets readonly
     *
     * @return bool|null
     */
    public function getReadonly()
    {
        return $this->container['readonly'];
    }

    /**
     * Sets readonly
     *
     * @param bool|null $readonly readonly
     *
     * @return self
     */
    public function setReadonly($readonly)
    {
        $this->container['readonly'] = $readonly;

        return $this;
    }

    /**
     * Gets purposes
     *
     * @return string[]|null
     */
    public function getPurposes()
    {
        return $this->container['purposes'];
    }

    /**
     * Sets purposes
     *
     * @param string[]|null $purposes purposes
     *
     * @return self
     */
    public function setPurposes($purposes)
    {
        $this->container['purposes'] = $purposes;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        if ((mb_strlen($label) > 400)) {
            throw new \InvalidArgumentException('invalid length for $label when calling DataRetentionRuleDto., must be smaller than or equal to 400.');
        }

        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 3000)) {
            throw new \InvalidArgumentException('invalid length for $description when calling DataRetentionRuleDto., must be smaller than or equal to 3000.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets date_creation
     *
     * @return \DateTime|null
     */
    public function getDateCreation()
    {
        return $this->container['date_creation'];
    }

    /**
     * Sets date_creation
     *
     * @param \DateTime|null $date_creation date_creation
     *
     * @return self
     */
    public function setDateCreation($date_creation)
    {
        $this->container['date_creation'] = $date_creation;

        return $this;
    }

    /**
     * Gets date_update
     *
     * @return \DateTime|null
     */
    public function getDateUpdate()
    {
        return $this->container['date_update'];
    }

    /**
     * Sets date_update
     *
     * @param \DateTime|null $date_update date_update
     *
     * @return self
     */
    public function setDateUpdate($date_update)
    {
        $this->container['date_update'] = $date_update;

        return $this;
    }

    /**
     * Gets base_active_description
     *
     * @return string|null
     */
    public function getBaseActiveDescription()
    {
        return $this->container['base_active_description'];
    }

    /**
     * Sets base_active_description
     *
     * @param string|null $base_active_description base_active_description
     *
     * @return self
     */
    public function setBaseActiveDescription($base_active_description)
    {
        $this->container['base_active_description'] = $base_active_description;

        return $this;
    }

    /**
     * Gets base_active_legal_basis
     *
     * @return string|null
     */
    public function getBaseActiveLegalBasis()
    {
        return $this->container['base_active_legal_basis'];
    }

    /**
     * Sets base_active_legal_basis
     *
     * @param string|null $base_active_legal_basis base_active_legal_basis
     *
     * @return self
     */
    public function setBaseActiveLegalBasis($base_active_legal_basis)
    {
        $this->container['base_active_legal_basis'] = $base_active_legal_basis;

        return $this;
    }

    /**
     * Gets intermediate_archiving_legal_basis
     *
     * @return string|null
     */
    public function getIntermediateArchivingLegalBasis()
    {
        return $this->container['intermediate_archiving_legal_basis'];
    }

    /**
     * Sets intermediate_archiving_legal_basis
     *
     * @param string|null $intermediate_archiving_legal_basis Base légale
     *
     * @return self
     */
    public function setIntermediateArchivingLegalBasis($intermediate_archiving_legal_basis)
    {
        $this->container['intermediate_archiving_legal_basis'] = $intermediate_archiving_legal_basis;

        return $this;
    }

    /**
     * Gets intermediate_archiving_description
     *
     * @return string|null
     */
    public function getIntermediateArchivingDescription()
    {
        return $this->container['intermediate_archiving_description'];
    }

    /**
     * Sets intermediate_archiving_description
     *
     * @param string|null $intermediate_archiving_description Description du processus d'archivage
     *
     * @return self
     */
    public function setIntermediateArchivingDescription($intermediate_archiving_description)
    {
        $this->container['intermediate_archiving_description'] = $intermediate_archiving_description;

        return $this;
    }

    /**
     * Gets destruction_description
     *
     * @return string|null
     */
    public function getDestructionDescription()
    {
        return $this->container['destruction_description'];
    }

    /**
     * Sets destruction_description
     *
     * @param string|null $destruction_description destruction_description
     *
     * @return self
     */
    public function setDestructionDescription($destruction_description)
    {
        $this->container['destruction_description'] = $destruction_description;

        return $this;
    }

    /**
     * Gets destruction_legal_basis
     *
     * @return string|null
     */
    public function getDestructionLegalBasis()
    {
        return $this->container['destruction_legal_basis'];
    }

    /**
     * Sets destruction_legal_basis
     *
     * @param string|null $destruction_legal_basis destruction_legal_basis
     *
     * @return self
     */
    public function setDestructionLegalBasis($destruction_legal_basis)
    {
        $this->container['destruction_legal_basis'] = $destruction_legal_basis;

        return $this;
    }

    /**
     * Gets data_set_source
     *
     * @return \OpenAPI\Client\Model\DataSetSource|null
     */
    public function getDataSetSource()
    {
        return $this->container['data_set_source'];
    }

    /**
     * Sets data_set_source
     *
     * @param \OpenAPI\Client\Model\DataSetSource|null $data_set_source data_set_source
     *
     * @return self
     */
    public function setDataSetSource($data_set_source)
    {
        $this->container['data_set_source'] = $data_set_source;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool|null
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool|null $required required
     *
     * @return self
     */
    public function setRequired($required)
    {
        $this->container['required'] = $required;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


