<?php
/**
 * LogDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dastra API
 *
 * Dastra's public REST API
 *
 * The version of the OpenAPI document: v1
 * Contact: antoine.bidault@dastra.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LogDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class LogDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LogDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'label' => 'string',
        'description' => 'string',
        'object_type' => '\OpenAPI\Client\Model\LogObjectType',
        'channel' => '\OpenAPI\Client\Model\NotificationChannel',
        'ref_id' => 'string',
        'data' => 'mixed',
        'recipients' => '\OpenAPI\Client\Model\LogRecipientDto[]',
        'user' => '\OpenAPI\Client\Model\UserLightDto',
        'work_space_id' => 'int',
        'date' => '\DateTime',
        'date_user_viewed' => '\DateTime',
        'date_notification_sent' => '\DateTime',
        'send_notification' => 'bool',
        'work_space' => '\OpenAPI\Client\Model\WorkSpaceDto',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'label' => null,
        'description' => null,
        'object_type' => null,
        'channel' => null,
        'ref_id' => null,
        'data' => null,
        'recipients' => null,
        'user' => null,
        'work_space_id' => 'int32',
        'date' => 'date-time',
        'date_user_viewed' => 'date-time',
        'date_notification_sent' => 'date-time',
        'send_notification' => null,
        'work_space' => null,
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'label' => 'label',
        'description' => 'description',
        'object_type' => 'objectType',
        'channel' => 'channel',
        'ref_id' => 'refId',
        'data' => 'data',
        'recipients' => 'recipients',
        'user' => 'user',
        'work_space_id' => 'workSpaceId',
        'date' => 'date',
        'date_user_viewed' => 'dateUserViewed',
        'date_notification_sent' => 'dateNotificationSent',
        'send_notification' => 'sendNotification',
        'work_space' => 'workSpace',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'label' => 'setLabel',
        'description' => 'setDescription',
        'object_type' => 'setObjectType',
        'channel' => 'setChannel',
        'ref_id' => 'setRefId',
        'data' => 'setData',
        'recipients' => 'setRecipients',
        'user' => 'setUser',
        'work_space_id' => 'setWorkSpaceId',
        'date' => 'setDate',
        'date_user_viewed' => 'setDateUserViewed',
        'date_notification_sent' => 'setDateNotificationSent',
        'send_notification' => 'setSendNotification',
        'work_space' => 'setWorkSpace',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'label' => 'getLabel',
        'description' => 'getDescription',
        'object_type' => 'getObjectType',
        'channel' => 'getChannel',
        'ref_id' => 'getRefId',
        'data' => 'getData',
        'recipients' => 'getRecipients',
        'user' => 'getUser',
        'work_space_id' => 'getWorkSpaceId',
        'date' => 'getDate',
        'date_user_viewed' => 'getDateUserViewed',
        'date_notification_sent' => 'getDateNotificationSent',
        'send_notification' => 'getSendNotification',
        'work_space' => 'getWorkSpace',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['label'] = $data['label'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['object_type'] = $data['object_type'] ?? null;
        $this->container['channel'] = $data['channel'] ?? null;
        $this->container['ref_id'] = $data['ref_id'] ?? null;
        $this->container['data'] = $data['data'] ?? null;
        $this->container['recipients'] = $data['recipients'] ?? null;
        $this->container['user'] = $data['user'] ?? null;
        $this->container['work_space_id'] = $data['work_space_id'] ?? null;
        $this->container['date'] = $data['date'] ?? null;
        $this->container['date_user_viewed'] = $data['date_user_viewed'] ?? null;
        $this->container['date_notification_sent'] = $data['date_notification_sent'] ?? null;
        $this->container['send_notification'] = $data['send_notification'] ?? null;
        $this->container['work_space'] = $data['work_space'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets object_type
     *
     * @return \OpenAPI\Client\Model\LogObjectType|null
     */
    public function getObjectType()
    {
        return $this->container['object_type'];
    }

    /**
     * Sets object_type
     *
     * @param \OpenAPI\Client\Model\LogObjectType|null $object_type object_type
     *
     * @return self
     */
    public function setObjectType($object_type)
    {
        $this->container['object_type'] = $object_type;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return \OpenAPI\Client\Model\NotificationChannel|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param \OpenAPI\Client\Model\NotificationChannel|null $channel channel
     *
     * @return self
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets ref_id
     *
     * @return string|null
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     *
     * @param string|null $ref_id ref_id
     *
     * @return self
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets data
     *
     * @return mixed|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param mixed|null $data data
     *
     * @return self
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets recipients
     *
     * @return \OpenAPI\Client\Model\LogRecipientDto[]|null
     */
    public function getRecipients()
    {
        return $this->container['recipients'];
    }

    /**
     * Sets recipients
     *
     * @param \OpenAPI\Client\Model\LogRecipientDto[]|null $recipients recipients
     *
     * @return self
     */
    public function setRecipients($recipients)
    {
        $this->container['recipients'] = $recipients;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \OpenAPI\Client\Model\UserLightDto|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \OpenAPI\Client\Model\UserLightDto|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets work_space_id
     *
     * @return int|null
     */
    public function getWorkSpaceId()
    {
        return $this->container['work_space_id'];
    }

    /**
     * Sets work_space_id
     *
     * @param int|null $work_space_id work_space_id
     *
     * @return self
     */
    public function setWorkSpaceId($work_space_id)
    {
        $this->container['work_space_id'] = $work_space_id;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date date
     *
     * @return self
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets date_user_viewed
     *
     * @return \DateTime|null
     */
    public function getDateUserViewed()
    {
        return $this->container['date_user_viewed'];
    }

    /**
     * Sets date_user_viewed
     *
     * @param \DateTime|null $date_user_viewed date_user_viewed
     *
     * @return self
     */
    public function setDateUserViewed($date_user_viewed)
    {
        $this->container['date_user_viewed'] = $date_user_viewed;

        return $this;
    }

    /**
     * Gets date_notification_sent
     *
     * @return \DateTime|null
     */
    public function getDateNotificationSent()
    {
        return $this->container['date_notification_sent'];
    }

    /**
     * Sets date_notification_sent
     *
     * @param \DateTime|null $date_notification_sent date_notification_sent
     *
     * @return self
     */
    public function setDateNotificationSent($date_notification_sent)
    {
        $this->container['date_notification_sent'] = $date_notification_sent;

        return $this;
    }

    /**
     * Gets send_notification
     *
     * @return bool|null
     */
    public function getSendNotification()
    {
        return $this->container['send_notification'];
    }

    /**
     * Sets send_notification
     *
     * @param bool|null $send_notification send_notification
     *
     * @return self
     */
    public function setSendNotification($send_notification)
    {
        $this->container['send_notification'] = $send_notification;

        return $this;
    }

    /**
     * Gets work_space
     *
     * @return \OpenAPI\Client\Model\WorkSpaceDto|null
     */
    public function getWorkSpace()
    {
        return $this->container['work_space'];
    }

    /**
     * Sets work_space
     *
     * @param \OpenAPI\Client\Model\WorkSpaceDto|null $work_space work_space
     *
     * @return self
     */
    public function setWorkSpace($work_space)
    {
        $this->container['work_space'] = $work_space;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


