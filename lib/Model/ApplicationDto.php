<?php
/**
 * ApplicationDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dastra API
 *
 * Dastra's public REST API
 *
 * The version of the OpenAPI document: v1
 * Contact: antoine.bidault@dastra.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ApplicationDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ApplicationDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ApplicationDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'label' => 'string',
        'description' => 'string',
        'host_name' => 'string',
        'logo_url' => 'string',
        'application_state' => '\OpenAPI\Client\Model\ApplicationState',
        'application_type' => '\OpenAPI\Client\Model\ApplicationType',
        'hosting_type' => '\OpenAPI\Client\Model\HostingType',
        'development_type' => '\OpenAPI\Client\Model\DevelopmentType',
        'support_type' => '\OpenAPI\Client\Model\SupportType',
        'availability' => 'int',
        'integrity' => 'int',
        'confidentiality' => 'int',
        'proof' => 'int',
        'sensibility' => 'int',
        'purposes' => 'string[]',
        'tags' => '\OpenAPI\Client\Model\TagDto[]',
        'readonly' => 'bool',
        'date_creation' => '\DateTime',
        'date_update' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'label' => null,
        'description' => null,
        'host_name' => null,
        'logo_url' => null,
        'application_state' => null,
        'application_type' => null,
        'hosting_type' => null,
        'development_type' => null,
        'support_type' => null,
        'availability' => 'int32',
        'integrity' => 'int32',
        'confidentiality' => 'int32',
        'proof' => 'int32',
        'sensibility' => 'int32',
        'purposes' => 'uuid',
        'tags' => null,
        'readonly' => null,
        'date_creation' => 'date-time',
        'date_update' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'label' => 'label',
        'description' => 'description',
        'host_name' => 'hostName',
        'logo_url' => 'logoUrl',
        'application_state' => 'applicationState',
        'application_type' => 'applicationType',
        'hosting_type' => 'hostingType',
        'development_type' => 'developmentType',
        'support_type' => 'supportType',
        'availability' => 'availability',
        'integrity' => 'integrity',
        'confidentiality' => 'confidentiality',
        'proof' => 'proof',
        'sensibility' => 'sensibility',
        'purposes' => 'purposes',
        'tags' => 'tags',
        'readonly' => 'readonly',
        'date_creation' => 'dateCreation',
        'date_update' => 'dateUpdate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'label' => 'setLabel',
        'description' => 'setDescription',
        'host_name' => 'setHostName',
        'logo_url' => 'setLogoUrl',
        'application_state' => 'setApplicationState',
        'application_type' => 'setApplicationType',
        'hosting_type' => 'setHostingType',
        'development_type' => 'setDevelopmentType',
        'support_type' => 'setSupportType',
        'availability' => 'setAvailability',
        'integrity' => 'setIntegrity',
        'confidentiality' => 'setConfidentiality',
        'proof' => 'setProof',
        'sensibility' => 'setSensibility',
        'purposes' => 'setPurposes',
        'tags' => 'setTags',
        'readonly' => 'setReadonly',
        'date_creation' => 'setDateCreation',
        'date_update' => 'setDateUpdate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'label' => 'getLabel',
        'description' => 'getDescription',
        'host_name' => 'getHostName',
        'logo_url' => 'getLogoUrl',
        'application_state' => 'getApplicationState',
        'application_type' => 'getApplicationType',
        'hosting_type' => 'getHostingType',
        'development_type' => 'getDevelopmentType',
        'support_type' => 'getSupportType',
        'availability' => 'getAvailability',
        'integrity' => 'getIntegrity',
        'confidentiality' => 'getConfidentiality',
        'proof' => 'getProof',
        'sensibility' => 'getSensibility',
        'purposes' => 'getPurposes',
        'tags' => 'getTags',
        'readonly' => 'getReadonly',
        'date_creation' => 'getDateCreation',
        'date_update' => 'getDateUpdate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['label'] = $data['label'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['host_name'] = $data['host_name'] ?? null;
        $this->container['logo_url'] = $data['logo_url'] ?? null;
        $this->container['application_state'] = $data['application_state'] ?? null;
        $this->container['application_type'] = $data['application_type'] ?? null;
        $this->container['hosting_type'] = $data['hosting_type'] ?? null;
        $this->container['development_type'] = $data['development_type'] ?? null;
        $this->container['support_type'] = $data['support_type'] ?? null;
        $this->container['availability'] = $data['availability'] ?? null;
        $this->container['integrity'] = $data['integrity'] ?? null;
        $this->container['confidentiality'] = $data['confidentiality'] ?? null;
        $this->container['proof'] = $data['proof'] ?? null;
        $this->container['sensibility'] = $data['sensibility'] ?? null;
        $this->container['purposes'] = $data['purposes'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
        $this->container['readonly'] = $data['readonly'] ?? null;
        $this->container['date_creation'] = $data['date_creation'] ?? null;
        $this->container['date_update'] = $data['date_update'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['label'] === null) {
            $invalidProperties[] = "'label' can't be null";
        }
        if ((mb_strlen($this->container['label']) > 655)) {
            $invalidProperties[] = "invalid value for 'label', the character length must be smaller than or equal to 655.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        if ((mb_strlen($label) > 655)) {
            throw new \InvalidArgumentException('invalid length for $label when calling ApplicationDto., must be smaller than or equal to 655.');
        }

        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets host_name
     *
     * @return string|null
     */
    public function getHostName()
    {
        return $this->container['host_name'];
    }

    /**
     * Sets host_name
     *
     * @param string|null $host_name host_name
     *
     * @return self
     */
    public function setHostName($host_name)
    {
        $this->container['host_name'] = $host_name;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string|null
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string|null $logo_url logo_url
     *
     * @return self
     */
    public function setLogoUrl($logo_url)
    {
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets application_state
     *
     * @return \OpenAPI\Client\Model\ApplicationState|null
     */
    public function getApplicationState()
    {
        return $this->container['application_state'];
    }

    /**
     * Sets application_state
     *
     * @param \OpenAPI\Client\Model\ApplicationState|null $application_state application_state
     *
     * @return self
     */
    public function setApplicationState($application_state)
    {
        $this->container['application_state'] = $application_state;

        return $this;
    }

    /**
     * Gets application_type
     *
     * @return \OpenAPI\Client\Model\ApplicationType|null
     */
    public function getApplicationType()
    {
        return $this->container['application_type'];
    }

    /**
     * Sets application_type
     *
     * @param \OpenAPI\Client\Model\ApplicationType|null $application_type application_type
     *
     * @return self
     */
    public function setApplicationType($application_type)
    {
        $this->container['application_type'] = $application_type;

        return $this;
    }

    /**
     * Gets hosting_type
     *
     * @return \OpenAPI\Client\Model\HostingType|null
     */
    public function getHostingType()
    {
        return $this->container['hosting_type'];
    }

    /**
     * Sets hosting_type
     *
     * @param \OpenAPI\Client\Model\HostingType|null $hosting_type hosting_type
     *
     * @return self
     */
    public function setHostingType($hosting_type)
    {
        $this->container['hosting_type'] = $hosting_type;

        return $this;
    }

    /**
     * Gets development_type
     *
     * @return \OpenAPI\Client\Model\DevelopmentType|null
     */
    public function getDevelopmentType()
    {
        return $this->container['development_type'];
    }

    /**
     * Sets development_type
     *
     * @param \OpenAPI\Client\Model\DevelopmentType|null $development_type development_type
     *
     * @return self
     */
    public function setDevelopmentType($development_type)
    {
        $this->container['development_type'] = $development_type;

        return $this;
    }

    /**
     * Gets support_type
     *
     * @return \OpenAPI\Client\Model\SupportType|null
     */
    public function getSupportType()
    {
        return $this->container['support_type'];
    }

    /**
     * Sets support_type
     *
     * @param \OpenAPI\Client\Model\SupportType|null $support_type support_type
     *
     * @return self
     */
    public function setSupportType($support_type)
    {
        $this->container['support_type'] = $support_type;

        return $this;
    }

    /**
     * Gets availability
     *
     * @return int|null
     */
    public function getAvailability()
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     *
     * @param int|null $availability availability
     *
     * @return self
     */
    public function setAvailability($availability)
    {
        $this->container['availability'] = $availability;

        return $this;
    }

    /**
     * Gets integrity
     *
     * @return int|null
     */
    public function getIntegrity()
    {
        return $this->container['integrity'];
    }

    /**
     * Sets integrity
     *
     * @param int|null $integrity integrity
     *
     * @return self
     */
    public function setIntegrity($integrity)
    {
        $this->container['integrity'] = $integrity;

        return $this;
    }

    /**
     * Gets confidentiality
     *
     * @return int|null
     */
    public function getConfidentiality()
    {
        return $this->container['confidentiality'];
    }

    /**
     * Sets confidentiality
     *
     * @param int|null $confidentiality confidentiality
     *
     * @return self
     */
    public function setConfidentiality($confidentiality)
    {
        $this->container['confidentiality'] = $confidentiality;

        return $this;
    }

    /**
     * Gets proof
     *
     * @return int|null
     */
    public function getProof()
    {
        return $this->container['proof'];
    }

    /**
     * Sets proof
     *
     * @param int|null $proof proof
     *
     * @return self
     */
    public function setProof($proof)
    {
        $this->container['proof'] = $proof;

        return $this;
    }

    /**
     * Gets sensibility
     *
     * @return int|null
     */
    public function getSensibility()
    {
        return $this->container['sensibility'];
    }

    /**
     * Sets sensibility
     *
     * @param int|null $sensibility sensibility
     *
     * @return self
     */
    public function setSensibility($sensibility)
    {
        $this->container['sensibility'] = $sensibility;

        return $this;
    }

    /**
     * Gets purposes
     *
     * @return string[]|null
     */
    public function getPurposes()
    {
        return $this->container['purposes'];
    }

    /**
     * Sets purposes
     *
     * @param string[]|null $purposes purposes
     *
     * @return self
     */
    public function setPurposes($purposes)
    {
        $this->container['purposes'] = $purposes;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \OpenAPI\Client\Model\TagDto[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \OpenAPI\Client\Model\TagDto[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets readonly
     *
     * @return bool|null
     */
    public function getReadonly()
    {
        return $this->container['readonly'];
    }

    /**
     * Sets readonly
     *
     * @param bool|null $readonly readonly
     *
     * @return self
     */
    public function setReadonly($readonly)
    {
        $this->container['readonly'] = $readonly;

        return $this;
    }

    /**
     * Gets date_creation
     *
     * @return \DateTime|null
     */
    public function getDateCreation()
    {
        return $this->container['date_creation'];
    }

    /**
     * Sets date_creation
     *
     * @param \DateTime|null $date_creation date_creation
     *
     * @return self
     */
    public function setDateCreation($date_creation)
    {
        $this->container['date_creation'] = $date_creation;

        return $this;
    }

    /**
     * Gets date_update
     *
     * @return \DateTime|null
     */
    public function getDateUpdate()
    {
        return $this->container['date_update'];
    }

    /**
     * Sets date_update
     *
     * @param \DateTime|null $date_update date_update
     *
     * @return self
     */
    public function setDateUpdate($date_update)
    {
        $this->container['date_update'] = $date_update;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


