<?php
/**
 * DataTableColumn
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dastra API
 *
 * Dastra's public REST API
 *
 * The version of the OpenAPI document: v1
 * Contact: antoine.bidault@dastra.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DataTableColumn Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DataTableColumn implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DataTableColumn';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'label' => 'string',
        'selectable' => 'bool',
        'sortable' => 'bool',
        'filterable' => 'bool',
        'selected' => 'bool',
        'default_selected' => 'bool',
        'type' => 'string',
        'values' => '\OpenAPI\Client\Model\SelectListItemResource[]',
        'layout' => 'string',
        'bool_reverse' => 'bool',
        'sub_property_to_display' => 'string',
        'sort_by_column' => 'string',
        'order' => 'mixed',
        'property_to_filter' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'label' => null,
        'selectable' => null,
        'sortable' => null,
        'filterable' => null,
        'selected' => null,
        'default_selected' => null,
        'type' => null,
        'values' => null,
        'layout' => null,
        'bool_reverse' => null,
        'sub_property_to_display' => null,
        'sort_by_column' => null,
        'order' => null,
        'property_to_filter' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'label' => 'label',
        'selectable' => 'selectable',
        'sortable' => 'sortable',
        'filterable' => 'filterable',
        'selected' => 'selected',
        'default_selected' => 'defaultSelected',
        'type' => 'type',
        'values' => 'values',
        'layout' => 'layout',
        'bool_reverse' => 'boolReverse',
        'sub_property_to_display' => 'subPropertyToDisplay',
        'sort_by_column' => 'sortByColumn',
        'order' => 'order',
        'property_to_filter' => 'propertyToFilter'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'label' => 'setLabel',
        'selectable' => 'setSelectable',
        'sortable' => 'setSortable',
        'filterable' => 'setFilterable',
        'selected' => 'setSelected',
        'default_selected' => 'setDefaultSelected',
        'type' => 'setType',
        'values' => 'setValues',
        'layout' => 'setLayout',
        'bool_reverse' => 'setBoolReverse',
        'sub_property_to_display' => 'setSubPropertyToDisplay',
        'sort_by_column' => 'setSortByColumn',
        'order' => 'setOrder',
        'property_to_filter' => 'setPropertyToFilter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'label' => 'getLabel',
        'selectable' => 'getSelectable',
        'sortable' => 'getSortable',
        'filterable' => 'getFilterable',
        'selected' => 'getSelected',
        'default_selected' => 'getDefaultSelected',
        'type' => 'getType',
        'values' => 'getValues',
        'layout' => 'getLayout',
        'bool_reverse' => 'getBoolReverse',
        'sub_property_to_display' => 'getSubPropertyToDisplay',
        'sort_by_column' => 'getSortByColumn',
        'order' => 'getOrder',
        'property_to_filter' => 'getPropertyToFilter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['label'] = $data['label'] ?? null;
        $this->container['selectable'] = $data['selectable'] ?? null;
        $this->container['sortable'] = $data['sortable'] ?? null;
        $this->container['filterable'] = $data['filterable'] ?? null;
        $this->container['selected'] = $data['selected'] ?? null;
        $this->container['default_selected'] = $data['default_selected'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['values'] = $data['values'] ?? null;
        $this->container['layout'] = $data['layout'] ?? null;
        $this->container['bool_reverse'] = $data['bool_reverse'] ?? null;
        $this->container['sub_property_to_display'] = $data['sub_property_to_display'] ?? null;
        $this->container['sort_by_column'] = $data['sort_by_column'] ?? null;
        $this->container['order'] = $data['order'] ?? null;
        $this->container['property_to_filter'] = $data['property_to_filter'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets selectable
     *
     * @return bool|null
     */
    public function getSelectable()
    {
        return $this->container['selectable'];
    }

    /**
     * Sets selectable
     *
     * @param bool|null $selectable selectable
     *
     * @return self
     */
    public function setSelectable($selectable)
    {
        $this->container['selectable'] = $selectable;

        return $this;
    }

    /**
     * Gets sortable
     *
     * @return bool|null
     */
    public function getSortable()
    {
        return $this->container['sortable'];
    }

    /**
     * Sets sortable
     *
     * @param bool|null $sortable sortable
     *
     * @return self
     */
    public function setSortable($sortable)
    {
        $this->container['sortable'] = $sortable;

        return $this;
    }

    /**
     * Gets filterable
     *
     * @return bool|null
     */
    public function getFilterable()
    {
        return $this->container['filterable'];
    }

    /**
     * Sets filterable
     *
     * @param bool|null $filterable filterable
     *
     * @return self
     */
    public function setFilterable($filterable)
    {
        $this->container['filterable'] = $filterable;

        return $this;
    }

    /**
     * Gets selected
     *
     * @return bool|null
     */
    public function getSelected()
    {
        return $this->container['selected'];
    }

    /**
     * Sets selected
     *
     * @param bool|null $selected selected
     *
     * @return self
     */
    public function setSelected($selected)
    {
        $this->container['selected'] = $selected;

        return $this;
    }

    /**
     * Gets default_selected
     *
     * @return bool|null
     */
    public function getDefaultSelected()
    {
        return $this->container['default_selected'];
    }

    /**
     * Sets default_selected
     *
     * @param bool|null $default_selected default_selected
     *
     * @return self
     */
    public function setDefaultSelected($default_selected)
    {
        $this->container['default_selected'] = $default_selected;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets values
     *
     * @return \OpenAPI\Client\Model\SelectListItemResource[]|null
     */
    public function getValues()
    {
        return $this->container['values'];
    }

    /**
     * Sets values
     *
     * @param \OpenAPI\Client\Model\SelectListItemResource[]|null $values values
     *
     * @return self
     */
    public function setValues($values)
    {
        $this->container['values'] = $values;

        return $this;
    }

    /**
     * Gets layout
     *
     * @return string|null
     */
    public function getLayout()
    {
        return $this->container['layout'];
    }

    /**
     * Sets layout
     *
     * @param string|null $layout Layout type for displaying purpose in the client app  ProgressBar
     *
     * @return self
     */
    public function setLayout($layout)
    {
        $this->container['layout'] = $layout;

        return $this;
    }

    /**
     * Gets bool_reverse
     *
     * @return bool|null
     */
    public function getBoolReverse()
    {
        return $this->container['bool_reverse'];
    }

    /**
     * Sets bool_reverse
     *
     * @param bool|null $bool_reverse Wether it's reversed or not (if true, the label is red and if green)
     *
     * @return self
     */
    public function setBoolReverse($bool_reverse)
    {
        $this->container['bool_reverse'] = $bool_reverse;

        return $this;
    }

    /**
     * Gets sub_property_to_display
     *
     * @return string|null
     */
    public function getSubPropertyToDisplay()
    {
        return $this->container['sub_property_to_display'];
    }

    /**
     * Sets sub_property_to_display
     *
     * @param string|null $sub_property_to_display sub_property_to_display
     *
     * @return self
     */
    public function setSubPropertyToDisplay($sub_property_to_display)
    {
        $this->container['sub_property_to_display'] = $sub_property_to_display;

        return $this;
    }

    /**
     * Gets sort_by_column
     *
     * @return string|null
     */
    public function getSortByColumn()
    {
        return $this->container['sort_by_column'];
    }

    /**
     * Sets sort_by_column
     *
     * @param string|null $sort_by_column sort_by_column
     *
     * @return self
     */
    public function setSortByColumn($sort_by_column)
    {
        $this->container['sort_by_column'] = $sort_by_column;

        return $this;
    }

    /**
     * Gets order
     *
     * @return mixed|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param mixed|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets property_to_filter
     *
     * @return string|null
     */
    public function getPropertyToFilter()
    {
        return $this->container['property_to_filter'];
    }

    /**
     * Sets property_to_filter
     *
     * @param string|null $property_to_filter property_to_filter
     *
     * @return self
     */
    public function setPropertyToFilter($property_to_filter)
    {
        $this->container['property_to_filter'] = $property_to_filter;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


