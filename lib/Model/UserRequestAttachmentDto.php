<?php
/**
 * UserRequestAttachmentDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dastra API
 *
 * Dastra's public REST API
 *
 * The version of the OpenAPI document: v1
 * Contact: antoine.bidault@dastra.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UserRequestAttachmentDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class UserRequestAttachmentDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserRequestAttachmentDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'extension' => 'string',
        'size' => 'int',
        'file_name' => 'string',
        'label' => 'string',
        'user_request_message_id' => 'string',
        'user_request_id' => 'int',
        'date_creation' => '\DateTime',
        'date_update' => '\DateTime',
        'creator' => '\OpenAPI\Client\Model\UserLightDto',
        'expiration' => '\DateTime',
        'expired' => 'bool',
        'color' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'extension' => null,
        'size' => 'int32',
        'file_name' => null,
        'label' => null,
        'user_request_message_id' => 'uuid',
        'user_request_id' => 'int32',
        'date_creation' => 'date-time',
        'date_update' => 'date-time',
        'creator' => null,
        'expiration' => 'date-time',
        'expired' => null,
        'color' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'extension' => 'extension',
        'size' => 'size',
        'file_name' => 'fileName',
        'label' => 'label',
        'user_request_message_id' => 'userRequestMessageId',
        'user_request_id' => 'userRequestId',
        'date_creation' => 'dateCreation',
        'date_update' => 'dateUpdate',
        'creator' => 'creator',
        'expiration' => 'expiration',
        'expired' => 'expired',
        'color' => 'color'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'extension' => 'setExtension',
        'size' => 'setSize',
        'file_name' => 'setFileName',
        'label' => 'setLabel',
        'user_request_message_id' => 'setUserRequestMessageId',
        'user_request_id' => 'setUserRequestId',
        'date_creation' => 'setDateCreation',
        'date_update' => 'setDateUpdate',
        'creator' => 'setCreator',
        'expiration' => 'setExpiration',
        'expired' => 'setExpired',
        'color' => 'setColor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'extension' => 'getExtension',
        'size' => 'getSize',
        'file_name' => 'getFileName',
        'label' => 'getLabel',
        'user_request_message_id' => 'getUserRequestMessageId',
        'user_request_id' => 'getUserRequestId',
        'date_creation' => 'getDateCreation',
        'date_update' => 'getDateUpdate',
        'creator' => 'getCreator',
        'expiration' => 'getExpiration',
        'expired' => 'getExpired',
        'color' => 'getColor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['extension'] = $data['extension'] ?? null;
        $this->container['size'] = $data['size'] ?? null;
        $this->container['file_name'] = $data['file_name'] ?? null;
        $this->container['label'] = $data['label'] ?? null;
        $this->container['user_request_message_id'] = $data['user_request_message_id'] ?? null;
        $this->container['user_request_id'] = $data['user_request_id'] ?? null;
        $this->container['date_creation'] = $data['date_creation'] ?? null;
        $this->container['date_update'] = $data['date_update'] ?? null;
        $this->container['creator'] = $data['creator'] ?? null;
        $this->container['expiration'] = $data['expiration'] ?? null;
        $this->container['expired'] = $data['expired'] ?? null;
        $this->container['color'] = $data['color'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['file_name']) && (mb_strlen($this->container['file_name']) > 355)) {
            $invalidProperties[] = "invalid value for 'file_name', the character length must be smaller than or equal to 355.";
        }

        if (!is_null($this->container['color']) && (mb_strlen($this->container['color']) > 12)) {
            $invalidProperties[] = "invalid value for 'color', the character length must be smaller than or equal to 12.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets extension
     *
     * @return string|null
     */
    public function getExtension()
    {
        return $this->container['extension'];
    }

    /**
     * Sets extension
     *
     * @param string|null $extension extension
     *
     * @return self
     */
    public function setExtension($extension)
    {
        $this->container['extension'] = $extension;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int|null $size size
     *
     * @return self
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string|null
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string|null $file_name file_name
     *
     * @return self
     */
    public function setFileName($file_name)
    {
        if (!is_null($file_name) && (mb_strlen($file_name) > 355)) {
            throw new \InvalidArgumentException('invalid length for $file_name when calling UserRequestAttachmentDto., must be smaller than or equal to 355.');
        }

        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets user_request_message_id
     *
     * @return string|null
     */
    public function getUserRequestMessageId()
    {
        return $this->container['user_request_message_id'];
    }

    /**
     * Sets user_request_message_id
     *
     * @param string|null $user_request_message_id user_request_message_id
     *
     * @return self
     */
    public function setUserRequestMessageId($user_request_message_id)
    {
        $this->container['user_request_message_id'] = $user_request_message_id;

        return $this;
    }

    /**
     * Gets user_request_id
     *
     * @return int|null
     */
    public function getUserRequestId()
    {
        return $this->container['user_request_id'];
    }

    /**
     * Sets user_request_id
     *
     * @param int|null $user_request_id user_request_id
     *
     * @return self
     */
    public function setUserRequestId($user_request_id)
    {
        $this->container['user_request_id'] = $user_request_id;

        return $this;
    }

    /**
     * Gets date_creation
     *
     * @return \DateTime|null
     */
    public function getDateCreation()
    {
        return $this->container['date_creation'];
    }

    /**
     * Sets date_creation
     *
     * @param \DateTime|null $date_creation date_creation
     *
     * @return self
     */
    public function setDateCreation($date_creation)
    {
        $this->container['date_creation'] = $date_creation;

        return $this;
    }

    /**
     * Gets date_update
     *
     * @return \DateTime|null
     */
    public function getDateUpdate()
    {
        return $this->container['date_update'];
    }

    /**
     * Sets date_update
     *
     * @param \DateTime|null $date_update date_update
     *
     * @return self
     */
    public function setDateUpdate($date_update)
    {
        $this->container['date_update'] = $date_update;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return \OpenAPI\Client\Model\UserLightDto|null
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param \OpenAPI\Client\Model\UserLightDto|null $creator creator
     *
     * @return self
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets expiration
     *
     * @return \DateTime|null
     */
    public function getExpiration()
    {
        return $this->container['expiration'];
    }

    /**
     * Sets expiration
     *
     * @param \DateTime|null $expiration expiration
     *
     * @return self
     */
    public function setExpiration($expiration)
    {
        $this->container['expiration'] = $expiration;

        return $this;
    }

    /**
     * Gets expired
     *
     * @return bool|null
     */
    public function getExpired()
    {
        return $this->container['expired'];
    }

    /**
     * Sets expired
     *
     * @param bool|null $expired expired
     *
     * @return self
     */
    public function setExpired($expired)
    {
        $this->container['expired'] = $expired;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color color
     *
     * @return self
     */
    public function setColor($color)
    {
        if (!is_null($color) && (mb_strlen($color) > 12)) {
            throw new \InvalidArgumentException('invalid length for $color when calling UserRequestAttachmentDto., must be smaller than or equal to 12.');
        }

        $this->container['color'] = $color;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


