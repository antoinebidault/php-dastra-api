<?php
/**
 * DataFieldDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dastra API
 *
 * Dastra's public REST API
 *
 * The version of the OpenAPI document: v1
 * Contact: antoine.bidault@dastra.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DataFieldDto Class Doc Comment
 *
 * @category Class
 * @description A data processing data field
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DataFieldDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DataFieldDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'archiving_policy' => 'string',
        'required' => 'bool',
        'label' => 'string',
        'definition' => 'string',
        'technical_definition' => 'string',
        'sensitive_data_field_legal_justification' => '\OpenAPI\Client\Model\SensitiveDataFieldLegalJustification',
        'sensitive_data_field_legal_justification_description' => 'string',
        'sensitive_data' => 'bool',
        'personal_data_category' => '\OpenAPI\Client\Model\PersonalDataCategory',
        'data_type' => '\OpenAPI\Client\Model\GenericDataType',
        'date_creation' => '\DateTime',
        'date_update' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'archiving_policy' => null,
        'required' => null,
        'label' => null,
        'definition' => null,
        'technical_definition' => null,
        'sensitive_data_field_legal_justification' => null,
        'sensitive_data_field_legal_justification_description' => null,
        'sensitive_data' => null,
        'personal_data_category' => null,
        'data_type' => null,
        'date_creation' => 'date-time',
        'date_update' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'archiving_policy' => 'archivingPolicy',
        'required' => 'required',
        'label' => 'label',
        'definition' => 'definition',
        'technical_definition' => 'technicalDefinition',
        'sensitive_data_field_legal_justification' => 'sensitiveDataFieldLegalJustification',
        'sensitive_data_field_legal_justification_description' => 'sensitiveDataFieldLegalJustificationDescription',
        'sensitive_data' => 'sensitiveData',
        'personal_data_category' => 'personalDataCategory',
        'data_type' => 'dataType',
        'date_creation' => 'dateCreation',
        'date_update' => 'dateUpdate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'archiving_policy' => 'setArchivingPolicy',
        'required' => 'setRequired',
        'label' => 'setLabel',
        'definition' => 'setDefinition',
        'technical_definition' => 'setTechnicalDefinition',
        'sensitive_data_field_legal_justification' => 'setSensitiveDataFieldLegalJustification',
        'sensitive_data_field_legal_justification_description' => 'setSensitiveDataFieldLegalJustificationDescription',
        'sensitive_data' => 'setSensitiveData',
        'personal_data_category' => 'setPersonalDataCategory',
        'data_type' => 'setDataType',
        'date_creation' => 'setDateCreation',
        'date_update' => 'setDateUpdate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'archiving_policy' => 'getArchivingPolicy',
        'required' => 'getRequired',
        'label' => 'getLabel',
        'definition' => 'getDefinition',
        'technical_definition' => 'getTechnicalDefinition',
        'sensitive_data_field_legal_justification' => 'getSensitiveDataFieldLegalJustification',
        'sensitive_data_field_legal_justification_description' => 'getSensitiveDataFieldLegalJustificationDescription',
        'sensitive_data' => 'getSensitiveData',
        'personal_data_category' => 'getPersonalDataCategory',
        'data_type' => 'getDataType',
        'date_creation' => 'getDateCreation',
        'date_update' => 'getDateUpdate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['archiving_policy'] = $data['archiving_policy'] ?? null;
        $this->container['required'] = $data['required'] ?? null;
        $this->container['label'] = $data['label'] ?? null;
        $this->container['definition'] = $data['definition'] ?? null;
        $this->container['technical_definition'] = $data['technical_definition'] ?? null;
        $this->container['sensitive_data_field_legal_justification'] = $data['sensitive_data_field_legal_justification'] ?? null;
        $this->container['sensitive_data_field_legal_justification_description'] = $data['sensitive_data_field_legal_justification_description'] ?? null;
        $this->container['sensitive_data'] = $data['sensitive_data'] ?? null;
        $this->container['personal_data_category'] = $data['personal_data_category'] ?? null;
        $this->container['data_type'] = $data['data_type'] ?? null;
        $this->container['date_creation'] = $data['date_creation'] ?? null;
        $this->container['date_update'] = $data['date_update'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['label'] === null) {
            $invalidProperties[] = "'label' can't be null";
        }
        if ((mb_strlen($this->container['label']) > 150)) {
            $invalidProperties[] = "invalid value for 'label', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['definition']) && (mb_strlen($this->container['definition']) > 2500)) {
            $invalidProperties[] = "invalid value for 'definition', the character length must be smaller than or equal to 2500.";
        }

        if (!is_null($this->container['technical_definition']) && (mb_strlen($this->container['technical_definition']) > 2500)) {
            $invalidProperties[] = "invalid value for 'technical_definition', the character length must be smaller than or equal to 2500.";
        }

        if (!is_null($this->container['sensitive_data_field_legal_justification_description']) && (mb_strlen($this->container['sensitive_data_field_legal_justification_description']) > 2500)) {
            $invalidProperties[] = "invalid value for 'sensitive_data_field_legal_justification_description', the character length must be smaller than or equal to 2500.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets archiving_policy
     *
     * @return string|null
     */
    public function getArchivingPolicy()
    {
        return $this->container['archiving_policy'];
    }

    /**
     * Sets archiving_policy
     *
     * @param string|null $archiving_policy archiving_policy
     *
     * @return self
     */
    public function setArchivingPolicy($archiving_policy)
    {
        $this->container['archiving_policy'] = $archiving_policy;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool|null
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool|null $required required
     *
     * @return self
     */
    public function setRequired($required)
    {
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        if ((mb_strlen($label) > 150)) {
            throw new \InvalidArgumentException('invalid length for $label when calling DataFieldDto., must be smaller than or equal to 150.');
        }

        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets definition
     *
     * @return string|null
     */
    public function getDefinition()
    {
        return $this->container['definition'];
    }

    /**
     * Sets definition
     *
     * @param string|null $definition definition
     *
     * @return self
     */
    public function setDefinition($definition)
    {
        if (!is_null($definition) && (mb_strlen($definition) > 2500)) {
            throw new \InvalidArgumentException('invalid length for $definition when calling DataFieldDto., must be smaller than or equal to 2500.');
        }

        $this->container['definition'] = $definition;

        return $this;
    }

    /**
     * Gets technical_definition
     *
     * @return string|null
     */
    public function getTechnicalDefinition()
    {
        return $this->container['technical_definition'];
    }

    /**
     * Sets technical_definition
     *
     * @param string|null $technical_definition technical_definition
     *
     * @return self
     */
    public function setTechnicalDefinition($technical_definition)
    {
        if (!is_null($technical_definition) && (mb_strlen($technical_definition) > 2500)) {
            throw new \InvalidArgumentException('invalid length for $technical_definition when calling DataFieldDto., must be smaller than or equal to 2500.');
        }

        $this->container['technical_definition'] = $technical_definition;

        return $this;
    }

    /**
     * Gets sensitive_data_field_legal_justification
     *
     * @return \OpenAPI\Client\Model\SensitiveDataFieldLegalJustification|null
     */
    public function getSensitiveDataFieldLegalJustification()
    {
        return $this->container['sensitive_data_field_legal_justification'];
    }

    /**
     * Sets sensitive_data_field_legal_justification
     *
     * @param \OpenAPI\Client\Model\SensitiveDataFieldLegalJustification|null $sensitive_data_field_legal_justification sensitive_data_field_legal_justification
     *
     * @return self
     */
    public function setSensitiveDataFieldLegalJustification($sensitive_data_field_legal_justification)
    {
        $this->container['sensitive_data_field_legal_justification'] = $sensitive_data_field_legal_justification;

        return $this;
    }

    /**
     * Gets sensitive_data_field_legal_justification_description
     *
     * @return string|null
     */
    public function getSensitiveDataFieldLegalJustificationDescription()
    {
        return $this->container['sensitive_data_field_legal_justification_description'];
    }

    /**
     * Sets sensitive_data_field_legal_justification_description
     *
     * @param string|null $sensitive_data_field_legal_justification_description sensitive_data_field_legal_justification_description
     *
     * @return self
     */
    public function setSensitiveDataFieldLegalJustificationDescription($sensitive_data_field_legal_justification_description)
    {
        if (!is_null($sensitive_data_field_legal_justification_description) && (mb_strlen($sensitive_data_field_legal_justification_description) > 2500)) {
            throw new \InvalidArgumentException('invalid length for $sensitive_data_field_legal_justification_description when calling DataFieldDto., must be smaller than or equal to 2500.');
        }

        $this->container['sensitive_data_field_legal_justification_description'] = $sensitive_data_field_legal_justification_description;

        return $this;
    }

    /**
     * Gets sensitive_data
     *
     * @return bool|null
     */
    public function getSensitiveData()
    {
        return $this->container['sensitive_data'];
    }

    /**
     * Sets sensitive_data
     *
     * @param bool|null $sensitive_data sensitive_data
     *
     * @return self
     */
    public function setSensitiveData($sensitive_data)
    {
        $this->container['sensitive_data'] = $sensitive_data;

        return $this;
    }

    /**
     * Gets personal_data_category
     *
     * @return \OpenAPI\Client\Model\PersonalDataCategory|null
     */
    public function getPersonalDataCategory()
    {
        return $this->container['personal_data_category'];
    }

    /**
     * Sets personal_data_category
     *
     * @param \OpenAPI\Client\Model\PersonalDataCategory|null $personal_data_category personal_data_category
     *
     * @return self
     */
    public function setPersonalDataCategory($personal_data_category)
    {
        $this->container['personal_data_category'] = $personal_data_category;

        return $this;
    }

    /**
     * Gets data_type
     *
     * @return \OpenAPI\Client\Model\GenericDataType|null
     */
    public function getDataType()
    {
        return $this->container['data_type'];
    }

    /**
     * Sets data_type
     *
     * @param \OpenAPI\Client\Model\GenericDataType|null $data_type data_type
     *
     * @return self
     */
    public function setDataType($data_type)
    {
        $this->container['data_type'] = $data_type;

        return $this;
    }

    /**
     * Gets date_creation
     *
     * @return \DateTime|null
     */
    public function getDateCreation()
    {
        return $this->container['date_creation'];
    }

    /**
     * Sets date_creation
     *
     * @param \DateTime|null $date_creation date_creation
     *
     * @return self
     */
    public function setDateCreation($date_creation)
    {
        $this->container['date_creation'] = $date_creation;

        return $this;
    }

    /**
     * Gets date_update
     *
     * @return \DateTime|null
     */
    public function getDateUpdate()
    {
        return $this->container['date_update'];
    }

    /**
     * Sets date_update
     *
     * @param \DateTime|null $date_update date_update
     *
     * @return self
     */
    public function setDateUpdate($date_update)
    {
        $this->container['date_update'] = $date_update;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


