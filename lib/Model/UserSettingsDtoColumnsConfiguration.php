<?php
/**
 * UserSettingsDtoColumnsConfiguration
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dastra API
 *
 * Dastra's public REST API
 *
 * The version of the OpenAPI document: v1
 * Contact: antoine.bidault@dastra.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UserSettingsDtoColumnsConfiguration Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class UserSettingsDtoColumnsConfiguration implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserSettingsDto_columnsConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'customer_request' => 'string[]',
        'data_treatment' => 'string[]',
        'incident_report' => 'string[]',
        'data_processing' => 'string[]',
        'user_request' => 'string[]',
        'data_breach' => 'string[]',
        'vendor' => 'string[]',
        'application' => 'string[]',
        'user' => 'string[]',
        'task' => 'string[]',
        'dashboard' => 'string[]',
        'cookie_consent' => 'string[]',
        'data_field' => 'string[]',
        'data_retention_rule' => 'string[]',
        'actor' => 'string[]',
        'risk' => 'string[]',
        'audit_template' => 'string[]',
        'audit_response' => 'string[]',
        'security_measure' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'customer_request' => null,
        'data_treatment' => null,
        'incident_report' => null,
        'data_processing' => null,
        'user_request' => null,
        'data_breach' => null,
        'vendor' => null,
        'application' => null,
        'user' => null,
        'task' => null,
        'dashboard' => null,
        'cookie_consent' => null,
        'data_field' => null,
        'data_retention_rule' => null,
        'actor' => null,
        'risk' => null,
        'audit_template' => null,
        'audit_response' => null,
        'security_measure' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_request' => 'CustomerRequest',
        'data_treatment' => 'DataTreatment',
        'incident_report' => 'IncidentReport',
        'data_processing' => 'DataProcessing',
        'user_request' => 'UserRequest',
        'data_breach' => 'DataBreach',
        'vendor' => 'Vendor',
        'application' => 'Application',
        'user' => 'User',
        'task' => 'Task',
        'dashboard' => 'Dashboard',
        'cookie_consent' => 'CookieConsent',
        'data_field' => 'DataField',
        'data_retention_rule' => 'DataRetentionRule',
        'actor' => 'Actor',
        'risk' => 'Risk',
        'audit_template' => 'AuditTemplate',
        'audit_response' => 'AuditResponse',
        'security_measure' => 'SecurityMeasure'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_request' => 'setCustomerRequest',
        'data_treatment' => 'setDataTreatment',
        'incident_report' => 'setIncidentReport',
        'data_processing' => 'setDataProcessing',
        'user_request' => 'setUserRequest',
        'data_breach' => 'setDataBreach',
        'vendor' => 'setVendor',
        'application' => 'setApplication',
        'user' => 'setUser',
        'task' => 'setTask',
        'dashboard' => 'setDashboard',
        'cookie_consent' => 'setCookieConsent',
        'data_field' => 'setDataField',
        'data_retention_rule' => 'setDataRetentionRule',
        'actor' => 'setActor',
        'risk' => 'setRisk',
        'audit_template' => 'setAuditTemplate',
        'audit_response' => 'setAuditResponse',
        'security_measure' => 'setSecurityMeasure'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_request' => 'getCustomerRequest',
        'data_treatment' => 'getDataTreatment',
        'incident_report' => 'getIncidentReport',
        'data_processing' => 'getDataProcessing',
        'user_request' => 'getUserRequest',
        'data_breach' => 'getDataBreach',
        'vendor' => 'getVendor',
        'application' => 'getApplication',
        'user' => 'getUser',
        'task' => 'getTask',
        'dashboard' => 'getDashboard',
        'cookie_consent' => 'getCookieConsent',
        'data_field' => 'getDataField',
        'data_retention_rule' => 'getDataRetentionRule',
        'actor' => 'getActor',
        'risk' => 'getRisk',
        'audit_template' => 'getAuditTemplate',
        'audit_response' => 'getAuditResponse',
        'security_measure' => 'getSecurityMeasure'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_request'] = $data['customer_request'] ?? null;
        $this->container['data_treatment'] = $data['data_treatment'] ?? null;
        $this->container['incident_report'] = $data['incident_report'] ?? null;
        $this->container['data_processing'] = $data['data_processing'] ?? null;
        $this->container['user_request'] = $data['user_request'] ?? null;
        $this->container['data_breach'] = $data['data_breach'] ?? null;
        $this->container['vendor'] = $data['vendor'] ?? null;
        $this->container['application'] = $data['application'] ?? null;
        $this->container['user'] = $data['user'] ?? null;
        $this->container['task'] = $data['task'] ?? null;
        $this->container['dashboard'] = $data['dashboard'] ?? null;
        $this->container['cookie_consent'] = $data['cookie_consent'] ?? null;
        $this->container['data_field'] = $data['data_field'] ?? null;
        $this->container['data_retention_rule'] = $data['data_retention_rule'] ?? null;
        $this->container['actor'] = $data['actor'] ?? null;
        $this->container['risk'] = $data['risk'] ?? null;
        $this->container['audit_template'] = $data['audit_template'] ?? null;
        $this->container['audit_response'] = $data['audit_response'] ?? null;
        $this->container['security_measure'] = $data['security_measure'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_request
     *
     * @return string[]|null
     */
    public function getCustomerRequest()
    {
        return $this->container['customer_request'];
    }

    /**
     * Sets customer_request
     *
     * @param string[]|null $customer_request customer_request
     *
     * @return self
     */
    public function setCustomerRequest($customer_request)
    {
        $this->container['customer_request'] = $customer_request;

        return $this;
    }

    /**
     * Gets data_treatment
     *
     * @return string[]|null
     */
    public function getDataTreatment()
    {
        return $this->container['data_treatment'];
    }

    /**
     * Sets data_treatment
     *
     * @param string[]|null $data_treatment data_treatment
     *
     * @return self
     */
    public function setDataTreatment($data_treatment)
    {
        $this->container['data_treatment'] = $data_treatment;

        return $this;
    }

    /**
     * Gets incident_report
     *
     * @return string[]|null
     */
    public function getIncidentReport()
    {
        return $this->container['incident_report'];
    }

    /**
     * Sets incident_report
     *
     * @param string[]|null $incident_report incident_report
     *
     * @return self
     */
    public function setIncidentReport($incident_report)
    {
        $this->container['incident_report'] = $incident_report;

        return $this;
    }

    /**
     * Gets data_processing
     *
     * @return string[]|null
     */
    public function getDataProcessing()
    {
        return $this->container['data_processing'];
    }

    /**
     * Sets data_processing
     *
     * @param string[]|null $data_processing data_processing
     *
     * @return self
     */
    public function setDataProcessing($data_processing)
    {
        $this->container['data_processing'] = $data_processing;

        return $this;
    }

    /**
     * Gets user_request
     *
     * @return string[]|null
     */
    public function getUserRequest()
    {
        return $this->container['user_request'];
    }

    /**
     * Sets user_request
     *
     * @param string[]|null $user_request user_request
     *
     * @return self
     */
    public function setUserRequest($user_request)
    {
        $this->container['user_request'] = $user_request;

        return $this;
    }

    /**
     * Gets data_breach
     *
     * @return string[]|null
     */
    public function getDataBreach()
    {
        return $this->container['data_breach'];
    }

    /**
     * Sets data_breach
     *
     * @param string[]|null $data_breach data_breach
     *
     * @return self
     */
    public function setDataBreach($data_breach)
    {
        $this->container['data_breach'] = $data_breach;

        return $this;
    }

    /**
     * Gets vendor
     *
     * @return string[]|null
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     *
     * @param string[]|null $vendor vendor
     *
     * @return self
     */
    public function setVendor($vendor)
    {
        $this->container['vendor'] = $vendor;

        return $this;
    }

    /**
     * Gets application
     *
     * @return string[]|null
     */
    public function getApplication()
    {
        return $this->container['application'];
    }

    /**
     * Sets application
     *
     * @param string[]|null $application application
     *
     * @return self
     */
    public function setApplication($application)
    {
        $this->container['application'] = $application;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string[]|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string[]|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets task
     *
     * @return string[]|null
     */
    public function getTask()
    {
        return $this->container['task'];
    }

    /**
     * Sets task
     *
     * @param string[]|null $task task
     *
     * @return self
     */
    public function setTask($task)
    {
        $this->container['task'] = $task;

        return $this;
    }

    /**
     * Gets dashboard
     *
     * @return string[]|null
     */
    public function getDashboard()
    {
        return $this->container['dashboard'];
    }

    /**
     * Sets dashboard
     *
     * @param string[]|null $dashboard dashboard
     *
     * @return self
     */
    public function setDashboard($dashboard)
    {
        $this->container['dashboard'] = $dashboard;

        return $this;
    }

    /**
     * Gets cookie_consent
     *
     * @return string[]|null
     */
    public function getCookieConsent()
    {
        return $this->container['cookie_consent'];
    }

    /**
     * Sets cookie_consent
     *
     * @param string[]|null $cookie_consent cookie_consent
     *
     * @return self
     */
    public function setCookieConsent($cookie_consent)
    {
        $this->container['cookie_consent'] = $cookie_consent;

        return $this;
    }

    /**
     * Gets data_field
     *
     * @return string[]|null
     */
    public function getDataField()
    {
        return $this->container['data_field'];
    }

    /**
     * Sets data_field
     *
     * @param string[]|null $data_field data_field
     *
     * @return self
     */
    public function setDataField($data_field)
    {
        $this->container['data_field'] = $data_field;

        return $this;
    }

    /**
     * Gets data_retention_rule
     *
     * @return string[]|null
     */
    public function getDataRetentionRule()
    {
        return $this->container['data_retention_rule'];
    }

    /**
     * Sets data_retention_rule
     *
     * @param string[]|null $data_retention_rule data_retention_rule
     *
     * @return self
     */
    public function setDataRetentionRule($data_retention_rule)
    {
        $this->container['data_retention_rule'] = $data_retention_rule;

        return $this;
    }

    /**
     * Gets actor
     *
     * @return string[]|null
     */
    public function getActor()
    {
        return $this->container['actor'];
    }

    /**
     * Sets actor
     *
     * @param string[]|null $actor actor
     *
     * @return self
     */
    public function setActor($actor)
    {
        $this->container['actor'] = $actor;

        return $this;
    }

    /**
     * Gets risk
     *
     * @return string[]|null
     */
    public function getRisk()
    {
        return $this->container['risk'];
    }

    /**
     * Sets risk
     *
     * @param string[]|null $risk risk
     *
     * @return self
     */
    public function setRisk($risk)
    {
        $this->container['risk'] = $risk;

        return $this;
    }

    /**
     * Gets audit_template
     *
     * @return string[]|null
     */
    public function getAuditTemplate()
    {
        return $this->container['audit_template'];
    }

    /**
     * Sets audit_template
     *
     * @param string[]|null $audit_template audit_template
     *
     * @return self
     */
    public function setAuditTemplate($audit_template)
    {
        $this->container['audit_template'] = $audit_template;

        return $this;
    }

    /**
     * Gets audit_response
     *
     * @return string[]|null
     */
    public function getAuditResponse()
    {
        return $this->container['audit_response'];
    }

    /**
     * Sets audit_response
     *
     * @param string[]|null $audit_response audit_response
     *
     * @return self
     */
    public function setAuditResponse($audit_response)
    {
        $this->container['audit_response'] = $audit_response;

        return $this;
    }

    /**
     * Gets security_measure
     *
     * @return string[]|null
     */
    public function getSecurityMeasure()
    {
        return $this->container['security_measure'];
    }

    /**
     * Sets security_measure
     *
     * @param string[]|null $security_measure security_measure
     *
     * @return self
     */
    public function setSecurityMeasure($security_measure)
    {
        $this->container['security_measure'] = $security_measure;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


