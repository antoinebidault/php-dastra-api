<?php
/**
 * UserRequestStatsDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dastra API
 *
 * Dastra's public REST API
 *
 * The version of the OpenAPI document: v1
 * Contact: antoine.bidault@dastra.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UserRequestStatsDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class UserRequestStatsDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserRequestStatsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'nb_customer_requests' => 'int',
        'nb_opened_or_active_customer_requests' => 'int',
        'nb_opened_or_active_customer_requests_last_month' => 'int',
        'nb_opened_or_active_customer_requests_variation' => 'double',
        'nb_over_taken' => 'int',
        'average_time_to_close' => 'double',
        'time_serie' => '\OpenAPI\Client\Model\UserRequestSerieValue[]',
        'stats' => '\OpenAPI\Client\Model\UserRequestStatValueDto[]',
        'stats_bruts_current_month' => '\OpenAPI\Client\Model\UserRequestStatValueDto[]',
        'stats_bruts_last_month' => '\OpenAPI\Client\Model\UserRequestStatValueDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'nb_customer_requests' => 'int32',
        'nb_opened_or_active_customer_requests' => 'int32',
        'nb_opened_or_active_customer_requests_last_month' => 'int32',
        'nb_opened_or_active_customer_requests_variation' => 'double',
        'nb_over_taken' => 'int32',
        'average_time_to_close' => 'double',
        'time_serie' => null,
        'stats' => null,
        'stats_bruts_current_month' => null,
        'stats_bruts_last_month' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'nb_customer_requests' => 'nbCustomerRequests',
        'nb_opened_or_active_customer_requests' => 'nbOpenedOrActiveCustomerRequests',
        'nb_opened_or_active_customer_requests_last_month' => 'nbOpenedOrActiveCustomerRequestsLastMonth',
        'nb_opened_or_active_customer_requests_variation' => 'nbOpenedOrActiveCustomerRequestsVariation',
        'nb_over_taken' => 'nbOverTaken',
        'average_time_to_close' => 'averageTimeToClose',
        'time_serie' => 'timeSerie',
        'stats' => 'stats',
        'stats_bruts_current_month' => 'statsBrutsCurrentMonth',
        'stats_bruts_last_month' => 'statsBrutsLastMonth'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'nb_customer_requests' => 'setNbCustomerRequests',
        'nb_opened_or_active_customer_requests' => 'setNbOpenedOrActiveCustomerRequests',
        'nb_opened_or_active_customer_requests_last_month' => 'setNbOpenedOrActiveCustomerRequestsLastMonth',
        'nb_opened_or_active_customer_requests_variation' => 'setNbOpenedOrActiveCustomerRequestsVariation',
        'nb_over_taken' => 'setNbOverTaken',
        'average_time_to_close' => 'setAverageTimeToClose',
        'time_serie' => 'setTimeSerie',
        'stats' => 'setStats',
        'stats_bruts_current_month' => 'setStatsBrutsCurrentMonth',
        'stats_bruts_last_month' => 'setStatsBrutsLastMonth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'nb_customer_requests' => 'getNbCustomerRequests',
        'nb_opened_or_active_customer_requests' => 'getNbOpenedOrActiveCustomerRequests',
        'nb_opened_or_active_customer_requests_last_month' => 'getNbOpenedOrActiveCustomerRequestsLastMonth',
        'nb_opened_or_active_customer_requests_variation' => 'getNbOpenedOrActiveCustomerRequestsVariation',
        'nb_over_taken' => 'getNbOverTaken',
        'average_time_to_close' => 'getAverageTimeToClose',
        'time_serie' => 'getTimeSerie',
        'stats' => 'getStats',
        'stats_bruts_current_month' => 'getStatsBrutsCurrentMonth',
        'stats_bruts_last_month' => 'getStatsBrutsLastMonth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['nb_customer_requests'] = $data['nb_customer_requests'] ?? null;
        $this->container['nb_opened_or_active_customer_requests'] = $data['nb_opened_or_active_customer_requests'] ?? null;
        $this->container['nb_opened_or_active_customer_requests_last_month'] = $data['nb_opened_or_active_customer_requests_last_month'] ?? null;
        $this->container['nb_opened_or_active_customer_requests_variation'] = $data['nb_opened_or_active_customer_requests_variation'] ?? null;
        $this->container['nb_over_taken'] = $data['nb_over_taken'] ?? null;
        $this->container['average_time_to_close'] = $data['average_time_to_close'] ?? null;
        $this->container['time_serie'] = $data['time_serie'] ?? null;
        $this->container['stats'] = $data['stats'] ?? null;
        $this->container['stats_bruts_current_month'] = $data['stats_bruts_current_month'] ?? null;
        $this->container['stats_bruts_last_month'] = $data['stats_bruts_last_month'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets nb_customer_requests
     *
     * @return int|null
     */
    public function getNbCustomerRequests()
    {
        return $this->container['nb_customer_requests'];
    }

    /**
     * Sets nb_customer_requests
     *
     * @param int|null $nb_customer_requests nb_customer_requests
     *
     * @return self
     */
    public function setNbCustomerRequests($nb_customer_requests)
    {
        $this->container['nb_customer_requests'] = $nb_customer_requests;

        return $this;
    }

    /**
     * Gets nb_opened_or_active_customer_requests
     *
     * @return int|null
     */
    public function getNbOpenedOrActiveCustomerRequests()
    {
        return $this->container['nb_opened_or_active_customer_requests'];
    }

    /**
     * Sets nb_opened_or_active_customer_requests
     *
     * @param int|null $nb_opened_or_active_customer_requests nb_opened_or_active_customer_requests
     *
     * @return self
     */
    public function setNbOpenedOrActiveCustomerRequests($nb_opened_or_active_customer_requests)
    {
        $this->container['nb_opened_or_active_customer_requests'] = $nb_opened_or_active_customer_requests;

        return $this;
    }

    /**
     * Gets nb_opened_or_active_customer_requests_last_month
     *
     * @return int|null
     */
    public function getNbOpenedOrActiveCustomerRequestsLastMonth()
    {
        return $this->container['nb_opened_or_active_customer_requests_last_month'];
    }

    /**
     * Sets nb_opened_or_active_customer_requests_last_month
     *
     * @param int|null $nb_opened_or_active_customer_requests_last_month nb_opened_or_active_customer_requests_last_month
     *
     * @return self
     */
    public function setNbOpenedOrActiveCustomerRequestsLastMonth($nb_opened_or_active_customer_requests_last_month)
    {
        $this->container['nb_opened_or_active_customer_requests_last_month'] = $nb_opened_or_active_customer_requests_last_month;

        return $this;
    }

    /**
     * Gets nb_opened_or_active_customer_requests_variation
     *
     * @return double|null
     */
    public function getNbOpenedOrActiveCustomerRequestsVariation()
    {
        return $this->container['nb_opened_or_active_customer_requests_variation'];
    }

    /**
     * Sets nb_opened_or_active_customer_requests_variation
     *
     * @param double|null $nb_opened_or_active_customer_requests_variation nb_opened_or_active_customer_requests_variation
     *
     * @return self
     */
    public function setNbOpenedOrActiveCustomerRequestsVariation($nb_opened_or_active_customer_requests_variation)
    {
        $this->container['nb_opened_or_active_customer_requests_variation'] = $nb_opened_or_active_customer_requests_variation;

        return $this;
    }

    /**
     * Gets nb_over_taken
     *
     * @return int|null
     */
    public function getNbOverTaken()
    {
        return $this->container['nb_over_taken'];
    }

    /**
     * Sets nb_over_taken
     *
     * @param int|null $nb_over_taken nb_over_taken
     *
     * @return self
     */
    public function setNbOverTaken($nb_over_taken)
    {
        $this->container['nb_over_taken'] = $nb_over_taken;

        return $this;
    }

    /**
     * Gets average_time_to_close
     *
     * @return double|null
     */
    public function getAverageTimeToClose()
    {
        return $this->container['average_time_to_close'];
    }

    /**
     * Sets average_time_to_close
     *
     * @param double|null $average_time_to_close average_time_to_close
     *
     * @return self
     */
    public function setAverageTimeToClose($average_time_to_close)
    {
        $this->container['average_time_to_close'] = $average_time_to_close;

        return $this;
    }

    /**
     * Gets time_serie
     *
     * @return \OpenAPI\Client\Model\UserRequestSerieValue[]|null
     */
    public function getTimeSerie()
    {
        return $this->container['time_serie'];
    }

    /**
     * Sets time_serie
     *
     * @param \OpenAPI\Client\Model\UserRequestSerieValue[]|null $time_serie time_serie
     *
     * @return self
     */
    public function setTimeSerie($time_serie)
    {
        $this->container['time_serie'] = $time_serie;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return \OpenAPI\Client\Model\UserRequestStatValueDto[]|null
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param \OpenAPI\Client\Model\UserRequestStatValueDto[]|null $stats stats
     *
     * @return self
     */
    public function setStats($stats)
    {
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets stats_bruts_current_month
     *
     * @return \OpenAPI\Client\Model\UserRequestStatValueDto[]|null
     */
    public function getStatsBrutsCurrentMonth()
    {
        return $this->container['stats_bruts_current_month'];
    }

    /**
     * Sets stats_bruts_current_month
     *
     * @param \OpenAPI\Client\Model\UserRequestStatValueDto[]|null $stats_bruts_current_month stats_bruts_current_month
     *
     * @return self
     */
    public function setStatsBrutsCurrentMonth($stats_bruts_current_month)
    {
        $this->container['stats_bruts_current_month'] = $stats_bruts_current_month;

        return $this;
    }

    /**
     * Gets stats_bruts_last_month
     *
     * @return \OpenAPI\Client\Model\UserRequestStatValueDto[]|null
     */
    public function getStatsBrutsLastMonth()
    {
        return $this->container['stats_bruts_last_month'];
    }

    /**
     * Sets stats_bruts_last_month
     *
     * @param \OpenAPI\Client\Model\UserRequestStatValueDto[]|null $stats_bruts_last_month stats_bruts_last_month
     *
     * @return self
     */
    public function setStatsBrutsLastMonth($stats_bruts_last_month)
    {
        $this->container['stats_bruts_last_month'] = $stats_bruts_last_month;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


