<?php
/**
 * UserDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dastra API
 *
 * Dastra's public REST API
 *
 * The version of the OpenAPI document: v1
 * Contact: antoine.bidault@dastra.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UserDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class UserDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'email' => 'string',
        'role' => '\OpenAPI\Client\Model\BaseRole',
        'phone_number' => 'string',
        'address' => 'string',
        'zip_code' => 'string',
        'city' => 'string',
        'country_code' => 'string',
        'bio' => 'string',
        'blog_url' => 'string',
        'is_invited' => 'bool',
        'is_owner' => 'bool',
        'job_title_label' => 'string',
        'time_zone' => 'string',
        'language' => 'string',
        'date_creation' => '\DateTime',
        'date_update' => '\DateTime',
        'invitations' => 'int',
        'roles' => '\OpenAPI\Client\Model\RoleDto[]',
        'teams' => '\OpenAPI\Client\Model\TeamDto[]',
        'active' => 'bool',
        'can_receive_notification' => 'bool',
        'email_verified' => 'bool',
        'configuration' => '\OpenAPI\Client\Model\UserSettingsDto',
        'tenant_owner_id' => 'int',
        'sso_configuration_id' => 'string',
        'id' => 'int',
        'family_name' => 'string',
        'given_name' => 'string',
        'color' => 'string',
        'display_name' => 'string',
        'company_name' => 'string',
        'avatar_url' => 'string',
        'tenant_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'email' => null,
        'role' => null,
        'phone_number' => null,
        'address' => null,
        'zip_code' => null,
        'city' => null,
        'country_code' => null,
        'bio' => null,
        'blog_url' => 'uri',
        'is_invited' => null,
        'is_owner' => null,
        'job_title_label' => null,
        'time_zone' => null,
        'language' => null,
        'date_creation' => 'date-time',
        'date_update' => 'date-time',
        'invitations' => 'int32',
        'roles' => null,
        'teams' => null,
        'active' => null,
        'can_receive_notification' => null,
        'email_verified' => null,
        'configuration' => null,
        'tenant_owner_id' => 'int32',
        'sso_configuration_id' => null,
        'id' => 'int32',
        'family_name' => null,
        'given_name' => null,
        'color' => null,
        'display_name' => null,
        'company_name' => null,
        'avatar_url' => 'uri',
        'tenant_id' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email' => 'email',
        'role' => 'role',
        'phone_number' => 'phoneNumber',
        'address' => 'address',
        'zip_code' => 'zipCode',
        'city' => 'city',
        'country_code' => 'countryCode',
        'bio' => 'bio',
        'blog_url' => 'blogUrl',
        'is_invited' => 'isInvited',
        'is_owner' => 'isOwner',
        'job_title_label' => 'jobTitleLabel',
        'time_zone' => 'timeZone',
        'language' => 'language',
        'date_creation' => 'dateCreation',
        'date_update' => 'dateUpdate',
        'invitations' => 'invitations',
        'roles' => 'roles',
        'teams' => 'teams',
        'active' => 'active',
        'can_receive_notification' => 'canReceiveNotification',
        'email_verified' => 'emailVerified',
        'configuration' => 'configuration',
        'tenant_owner_id' => 'tenantOwnerId',
        'sso_configuration_id' => 'ssoConfigurationId',
        'id' => 'id',
        'family_name' => 'familyName',
        'given_name' => 'givenName',
        'color' => 'color',
        'display_name' => 'displayName',
        'company_name' => 'companyName',
        'avatar_url' => 'avatarUrl',
        'tenant_id' => 'tenantId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email' => 'setEmail',
        'role' => 'setRole',
        'phone_number' => 'setPhoneNumber',
        'address' => 'setAddress',
        'zip_code' => 'setZipCode',
        'city' => 'setCity',
        'country_code' => 'setCountryCode',
        'bio' => 'setBio',
        'blog_url' => 'setBlogUrl',
        'is_invited' => 'setIsInvited',
        'is_owner' => 'setIsOwner',
        'job_title_label' => 'setJobTitleLabel',
        'time_zone' => 'setTimeZone',
        'language' => 'setLanguage',
        'date_creation' => 'setDateCreation',
        'date_update' => 'setDateUpdate',
        'invitations' => 'setInvitations',
        'roles' => 'setRoles',
        'teams' => 'setTeams',
        'active' => 'setActive',
        'can_receive_notification' => 'setCanReceiveNotification',
        'email_verified' => 'setEmailVerified',
        'configuration' => 'setConfiguration',
        'tenant_owner_id' => 'setTenantOwnerId',
        'sso_configuration_id' => 'setSsoConfigurationId',
        'id' => 'setId',
        'family_name' => 'setFamilyName',
        'given_name' => 'setGivenName',
        'color' => 'setColor',
        'display_name' => 'setDisplayName',
        'company_name' => 'setCompanyName',
        'avatar_url' => 'setAvatarUrl',
        'tenant_id' => 'setTenantId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email' => 'getEmail',
        'role' => 'getRole',
        'phone_number' => 'getPhoneNumber',
        'address' => 'getAddress',
        'zip_code' => 'getZipCode',
        'city' => 'getCity',
        'country_code' => 'getCountryCode',
        'bio' => 'getBio',
        'blog_url' => 'getBlogUrl',
        'is_invited' => 'getIsInvited',
        'is_owner' => 'getIsOwner',
        'job_title_label' => 'getJobTitleLabel',
        'time_zone' => 'getTimeZone',
        'language' => 'getLanguage',
        'date_creation' => 'getDateCreation',
        'date_update' => 'getDateUpdate',
        'invitations' => 'getInvitations',
        'roles' => 'getRoles',
        'teams' => 'getTeams',
        'active' => 'getActive',
        'can_receive_notification' => 'getCanReceiveNotification',
        'email_verified' => 'getEmailVerified',
        'configuration' => 'getConfiguration',
        'tenant_owner_id' => 'getTenantOwnerId',
        'sso_configuration_id' => 'getSsoConfigurationId',
        'id' => 'getId',
        'family_name' => 'getFamilyName',
        'given_name' => 'getGivenName',
        'color' => 'getColor',
        'display_name' => 'getDisplayName',
        'company_name' => 'getCompanyName',
        'avatar_url' => 'getAvatarUrl',
        'tenant_id' => 'getTenantId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['email'] = $data['email'] ?? null;
        $this->container['role'] = $data['role'] ?? null;
        $this->container['phone_number'] = $data['phone_number'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['zip_code'] = $data['zip_code'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['country_code'] = $data['country_code'] ?? null;
        $this->container['bio'] = $data['bio'] ?? null;
        $this->container['blog_url'] = $data['blog_url'] ?? null;
        $this->container['is_invited'] = $data['is_invited'] ?? null;
        $this->container['is_owner'] = $data['is_owner'] ?? null;
        $this->container['job_title_label'] = $data['job_title_label'] ?? null;
        $this->container['time_zone'] = $data['time_zone'] ?? null;
        $this->container['language'] = $data['language'] ?? null;
        $this->container['date_creation'] = $data['date_creation'] ?? null;
        $this->container['date_update'] = $data['date_update'] ?? null;
        $this->container['invitations'] = $data['invitations'] ?? null;
        $this->container['roles'] = $data['roles'] ?? null;
        $this->container['teams'] = $data['teams'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['can_receive_notification'] = $data['can_receive_notification'] ?? null;
        $this->container['email_verified'] = $data['email_verified'] ?? null;
        $this->container['configuration'] = $data['configuration'] ?? null;
        $this->container['tenant_owner_id'] = $data['tenant_owner_id'] ?? null;
        $this->container['sso_configuration_id'] = $data['sso_configuration_id'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['family_name'] = $data['family_name'] ?? null;
        $this->container['given_name'] = $data['given_name'] ?? null;
        $this->container['color'] = $data['color'] ?? null;
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['company_name'] = $data['company_name'] ?? null;
        $this->container['avatar_url'] = $data['avatar_url'] ?? null;
        $this->container['tenant_id'] = $data['tenant_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['zip_code']) && (mb_strlen($this->container['zip_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'zip_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['country_code']) && (mb_strlen($this->container['country_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['bio']) && (mb_strlen($this->container['bio']) > 4000)) {
            $invalidProperties[] = "invalid value for 'bio', the character length must be smaller than or equal to 4000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets role
     *
     * @return \OpenAPI\Client\Model\BaseRole|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param \OpenAPI\Client\Model\BaseRole|null $role role
     *
     * @return self
     */
    public function setRole($role)
    {
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number phone_number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string|null
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string|null $zip_code zip_code
     *
     * @return self
     */
    public function setZipCode($zip_code)
    {
        if (!is_null($zip_code) && (mb_strlen($zip_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $zip_code when calling UserDto., must be smaller than or equal to 10.');
        }

        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code country_code
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        if (!is_null($country_code) && (mb_strlen($country_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling UserDto., must be smaller than or equal to 3.');
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets bio
     *
     * @return string|null
     */
    public function getBio()
    {
        return $this->container['bio'];
    }

    /**
     * Sets bio
     *
     * @param string|null $bio bio
     *
     * @return self
     */
    public function setBio($bio)
    {
        if (!is_null($bio) && (mb_strlen($bio) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $bio when calling UserDto., must be smaller than or equal to 4000.');
        }

        $this->container['bio'] = $bio;

        return $this;
    }

    /**
     * Gets blog_url
     *
     * @return string|null
     */
    public function getBlogUrl()
    {
        return $this->container['blog_url'];
    }

    /**
     * Sets blog_url
     *
     * @param string|null $blog_url blog_url
     *
     * @return self
     */
    public function setBlogUrl($blog_url)
    {
        $this->container['blog_url'] = $blog_url;

        return $this;
    }

    /**
     * Gets is_invited
     *
     * @return bool|null
     */
    public function getIsInvited()
    {
        return $this->container['is_invited'];
    }

    /**
     * Sets is_invited
     *
     * @param bool|null $is_invited is_invited
     *
     * @return self
     */
    public function setIsInvited($is_invited)
    {
        $this->container['is_invited'] = $is_invited;

        return $this;
    }

    /**
     * Gets is_owner
     *
     * @return bool|null
     */
    public function getIsOwner()
    {
        return $this->container['is_owner'];
    }

    /**
     * Sets is_owner
     *
     * @param bool|null $is_owner is_owner
     *
     * @return self
     */
    public function setIsOwner($is_owner)
    {
        $this->container['is_owner'] = $is_owner;

        return $this;
    }

    /**
     * Gets job_title_label
     *
     * @return string|null
     */
    public function getJobTitleLabel()
    {
        return $this->container['job_title_label'];
    }

    /**
     * Sets job_title_label
     *
     * @param string|null $job_title_label job_title_label
     *
     * @return self
     */
    public function setJobTitleLabel($job_title_label)
    {
        $this->container['job_title_label'] = $job_title_label;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return string|null
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param string|null $time_zone time_zone
     *
     * @return self
     */
    public function setTimeZone($time_zone)
    {
        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets date_creation
     *
     * @return \DateTime|null
     */
    public function getDateCreation()
    {
        return $this->container['date_creation'];
    }

    /**
     * Sets date_creation
     *
     * @param \DateTime|null $date_creation date_creation
     *
     * @return self
     */
    public function setDateCreation($date_creation)
    {
        $this->container['date_creation'] = $date_creation;

        return $this;
    }

    /**
     * Gets date_update
     *
     * @return \DateTime|null
     */
    public function getDateUpdate()
    {
        return $this->container['date_update'];
    }

    /**
     * Sets date_update
     *
     * @param \DateTime|null $date_update date_update
     *
     * @return self
     */
    public function setDateUpdate($date_update)
    {
        $this->container['date_update'] = $date_update;

        return $this;
    }

    /**
     * Gets invitations
     *
     * @return int|null
     */
    public function getInvitations()
    {
        return $this->container['invitations'];
    }

    /**
     * Sets invitations
     *
     * @param int|null $invitations invitations
     *
     * @return self
     */
    public function setInvitations($invitations)
    {
        $this->container['invitations'] = $invitations;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return \OpenAPI\Client\Model\RoleDto[]|null
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param \OpenAPI\Client\Model\RoleDto[]|null $roles roles
     *
     * @return self
     */
    public function setRoles($roles)
    {
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets teams
     *
     * @return \OpenAPI\Client\Model\TeamDto[]|null
     */
    public function getTeams()
    {
        return $this->container['teams'];
    }

    /**
     * Sets teams
     *
     * @param \OpenAPI\Client\Model\TeamDto[]|null $teams teams
     *
     * @return self
     */
    public function setTeams($teams)
    {
        $this->container['teams'] = $teams;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets can_receive_notification
     *
     * @return bool|null
     */
    public function getCanReceiveNotification()
    {
        return $this->container['can_receive_notification'];
    }

    /**
     * Sets can_receive_notification
     *
     * @param bool|null $can_receive_notification can_receive_notification
     *
     * @return self
     */
    public function setCanReceiveNotification($can_receive_notification)
    {
        $this->container['can_receive_notification'] = $can_receive_notification;

        return $this;
    }

    /**
     * Gets email_verified
     *
     * @return bool|null
     */
    public function getEmailVerified()
    {
        return $this->container['email_verified'];
    }

    /**
     * Sets email_verified
     *
     * @param bool|null $email_verified email_verified
     *
     * @return self
     */
    public function setEmailVerified($email_verified)
    {
        $this->container['email_verified'] = $email_verified;

        return $this;
    }

    /**
     * Gets configuration
     *
     * @return \OpenAPI\Client\Model\UserSettingsDto|null
     */
    public function getConfiguration()
    {
        return $this->container['configuration'];
    }

    /**
     * Sets configuration
     *
     * @param \OpenAPI\Client\Model\UserSettingsDto|null $configuration configuration
     *
     * @return self
     */
    public function setConfiguration($configuration)
    {
        $this->container['configuration'] = $configuration;

        return $this;
    }

    /**
     * Gets tenant_owner_id
     *
     * @return int|null
     */
    public function getTenantOwnerId()
    {
        return $this->container['tenant_owner_id'];
    }

    /**
     * Sets tenant_owner_id
     *
     * @param int|null $tenant_owner_id tenant_owner_id
     *
     * @return self
     */
    public function setTenantOwnerId($tenant_owner_id)
    {
        $this->container['tenant_owner_id'] = $tenant_owner_id;

        return $this;
    }

    /**
     * Gets sso_configuration_id
     *
     * @return string|null
     */
    public function getSsoConfigurationId()
    {
        return $this->container['sso_configuration_id'];
    }

    /**
     * Sets sso_configuration_id
     *
     * @param string|null $sso_configuration_id sso_configuration_id
     *
     * @return self
     */
    public function setSsoConfigurationId($sso_configuration_id)
    {
        $this->container['sso_configuration_id'] = $sso_configuration_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets family_name
     *
     * @return string|null
     */
    public function getFamilyName()
    {
        return $this->container['family_name'];
    }

    /**
     * Sets family_name
     *
     * @param string|null $family_name family_name
     *
     * @return self
     */
    public function setFamilyName($family_name)
    {
        $this->container['family_name'] = $family_name;

        return $this;
    }

    /**
     * Gets given_name
     *
     * @return string|null
     */
    public function getGivenName()
    {
        return $this->container['given_name'];
    }

    /**
     * Sets given_name
     *
     * @param string|null $given_name given_name
     *
     * @return self
     */
    public function setGivenName($given_name)
    {
        $this->container['given_name'] = $given_name;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color color
     *
     * @return self
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name display_name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string|null $company_name company_name
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets avatar_url
     *
     * @return string|null
     */
    public function getAvatarUrl()
    {
        return $this->container['avatar_url'];
    }

    /**
     * Sets avatar_url
     *
     * @param string|null $avatar_url avatar_url
     *
     * @return self
     */
    public function setAvatarUrl($avatar_url)
    {
        $this->container['avatar_url'] = $avatar_url;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return int|null
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param int|null $tenant_id tenant_id
     *
     * @return self
     */
    public function setTenantId($tenant_id)
    {
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


