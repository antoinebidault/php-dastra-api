<?php
/**
 * AreaDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dastra API
 *
 * Dastra's public REST API
 *
 * The version of the OpenAPI document: v1
 * Contact: antoine.bidault@dastra.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AreaDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class AreaDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AreaDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order' => 'int',
        'children' => '\OpenAPI\Client\Model\AreaDto[]',
        'teams' => '\OpenAPI\Client\Model\TeamDto[]',
        'id' => 'int',
        'type' => '\OpenAPI\Client\Model\AreaType',
        'parent_id' => 'int',
        'label' => 'string',
        'description' => 'string',
        'logo_url' => 'string',
        'address' => 'string',
        'zip_code' => 'string',
        'city' => 'string',
        'country_code' => 'string',
        'immatriculation_number' => 'string',
        'phone_number' => 'string',
        'mail_address' => 'string',
        'dpo' => '\OpenAPI\Client\Model\ActorDto',
        'referent' => '\OpenAPI\Client\Model\ActorDto',
        'representative' => '\OpenAPI\Client\Model\ActorDto',
        'data_protection_authority' => '\OpenAPI\Client\Model\DataProtectionAuthorityDto'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'order' => 'int64',
        'children' => null,
        'teams' => null,
        'id' => 'int32',
        'type' => null,
        'parent_id' => 'int32',
        'label' => null,
        'description' => null,
        'logo_url' => 'uri',
        'address' => null,
        'zip_code' => null,
        'city' => null,
        'country_code' => null,
        'immatriculation_number' => null,
        'phone_number' => null,
        'mail_address' => 'email',
        'dpo' => null,
        'referent' => null,
        'representative' => null,
        'data_protection_authority' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order' => 'order',
        'children' => 'children',
        'teams' => 'teams',
        'id' => 'id',
        'type' => 'type',
        'parent_id' => 'parentId',
        'label' => 'label',
        'description' => 'description',
        'logo_url' => 'logoUrl',
        'address' => 'address',
        'zip_code' => 'zipCode',
        'city' => 'city',
        'country_code' => 'countryCode',
        'immatriculation_number' => 'immatriculationNumber',
        'phone_number' => 'phoneNumber',
        'mail_address' => 'mailAddress',
        'dpo' => 'dpo',
        'referent' => 'referent',
        'representative' => 'representative',
        'data_protection_authority' => 'dataProtectionAuthority'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order' => 'setOrder',
        'children' => 'setChildren',
        'teams' => 'setTeams',
        'id' => 'setId',
        'type' => 'setType',
        'parent_id' => 'setParentId',
        'label' => 'setLabel',
        'description' => 'setDescription',
        'logo_url' => 'setLogoUrl',
        'address' => 'setAddress',
        'zip_code' => 'setZipCode',
        'city' => 'setCity',
        'country_code' => 'setCountryCode',
        'immatriculation_number' => 'setImmatriculationNumber',
        'phone_number' => 'setPhoneNumber',
        'mail_address' => 'setMailAddress',
        'dpo' => 'setDpo',
        'referent' => 'setReferent',
        'representative' => 'setRepresentative',
        'data_protection_authority' => 'setDataProtectionAuthority'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order' => 'getOrder',
        'children' => 'getChildren',
        'teams' => 'getTeams',
        'id' => 'getId',
        'type' => 'getType',
        'parent_id' => 'getParentId',
        'label' => 'getLabel',
        'description' => 'getDescription',
        'logo_url' => 'getLogoUrl',
        'address' => 'getAddress',
        'zip_code' => 'getZipCode',
        'city' => 'getCity',
        'country_code' => 'getCountryCode',
        'immatriculation_number' => 'getImmatriculationNumber',
        'phone_number' => 'getPhoneNumber',
        'mail_address' => 'getMailAddress',
        'dpo' => 'getDpo',
        'referent' => 'getReferent',
        'representative' => 'getRepresentative',
        'data_protection_authority' => 'getDataProtectionAuthority'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order'] = $data['order'] ?? null;
        $this->container['children'] = $data['children'] ?? null;
        $this->container['teams'] = $data['teams'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['parent_id'] = $data['parent_id'] ?? null;
        $this->container['label'] = $data['label'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['logo_url'] = $data['logo_url'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['zip_code'] = $data['zip_code'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['country_code'] = $data['country_code'] ?? null;
        $this->container['immatriculation_number'] = $data['immatriculation_number'] ?? null;
        $this->container['phone_number'] = $data['phone_number'] ?? null;
        $this->container['mail_address'] = $data['mail_address'] ?? null;
        $this->container['dpo'] = $data['dpo'] ?? null;
        $this->container['referent'] = $data['referent'] ?? null;
        $this->container['representative'] = $data['representative'] ?? null;
        $this->container['data_protection_authority'] = $data['data_protection_authority'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['label'] === null) {
            $invalidProperties[] = "'label' can't be null";
        }
        if (!is_null($this->container['address']) && (mb_strlen($this->container['address']) > 500)) {
            $invalidProperties[] = "invalid value for 'address', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['zip_code']) && (mb_strlen($this->container['zip_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'zip_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 300)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['country_code']) && (mb_strlen($this->container['country_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['immatriculation_number']) && (mb_strlen($this->container['immatriculation_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'immatriculation_number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['phone_number']) && (mb_strlen($this->container['phone_number']) > 14)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 14.";
        }

        if (!is_null($this->container['mail_address']) && (mb_strlen($this->container['mail_address']) > 255)) {
            $invalidProperties[] = "invalid value for 'mail_address', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order
     *
     * @return int|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets children
     *
     * @return \OpenAPI\Client\Model\AreaDto[]|null
     */
    public function getChildren()
    {
        return $this->container['children'];
    }

    /**
     * Sets children
     *
     * @param \OpenAPI\Client\Model\AreaDto[]|null $children children
     *
     * @return self
     */
    public function setChildren($children)
    {
        $this->container['children'] = $children;

        return $this;
    }

    /**
     * Gets teams
     *
     * @return \OpenAPI\Client\Model\TeamDto[]|null
     */
    public function getTeams()
    {
        return $this->container['teams'];
    }

    /**
     * Sets teams
     *
     * @param \OpenAPI\Client\Model\TeamDto[]|null $teams teams
     *
     * @return self
     */
    public function setTeams($teams)
    {
        $this->container['teams'] = $teams;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\AreaType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\AreaType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int|null
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int|null $parent_id parent_id
     *
     * @return self
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string|null
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string|null $logo_url logo_url
     *
     * @return self
     */
    public function setLogoUrl($logo_url)
    {
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (!is_null($address) && (mb_strlen($address) > 500)) {
            throw new \InvalidArgumentException('invalid length for $address when calling AreaDto., must be smaller than or equal to 500.');
        }

        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string|null
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string|null $zip_code zip_code
     *
     * @return self
     */
    public function setZipCode($zip_code)
    {
        if (!is_null($zip_code) && (mb_strlen($zip_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $zip_code when calling AreaDto., must be smaller than or equal to 10.');
        }

        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (!is_null($city) && (mb_strlen($city) > 300)) {
            throw new \InvalidArgumentException('invalid length for $city when calling AreaDto., must be smaller than or equal to 300.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code country_code
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        if (!is_null($country_code) && (mb_strlen($country_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling AreaDto., must be smaller than or equal to 3.');
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets immatriculation_number
     *
     * @return string|null
     */
    public function getImmatriculationNumber()
    {
        return $this->container['immatriculation_number'];
    }

    /**
     * Sets immatriculation_number
     *
     * @param string|null $immatriculation_number immatriculation_number
     *
     * @return self
     */
    public function setImmatriculationNumber($immatriculation_number)
    {
        if (!is_null($immatriculation_number) && (mb_strlen($immatriculation_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $immatriculation_number when calling AreaDto., must be smaller than or equal to 20.');
        }

        $this->container['immatriculation_number'] = $immatriculation_number;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number phone_number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (!is_null($phone_number) && (mb_strlen($phone_number) > 14)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling AreaDto., must be smaller than or equal to 14.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets mail_address
     *
     * @return string|null
     */
    public function getMailAddress()
    {
        return $this->container['mail_address'];
    }

    /**
     * Sets mail_address
     *
     * @param string|null $mail_address mail_address
     *
     * @return self
     */
    public function setMailAddress($mail_address)
    {
        if (!is_null($mail_address) && (mb_strlen($mail_address) > 255)) {
            throw new \InvalidArgumentException('invalid length for $mail_address when calling AreaDto., must be smaller than or equal to 255.');
        }

        $this->container['mail_address'] = $mail_address;

        return $this;
    }

    /**
     * Gets dpo
     *
     * @return \OpenAPI\Client\Model\ActorDto|null
     */
    public function getDpo()
    {
        return $this->container['dpo'];
    }

    /**
     * Sets dpo
     *
     * @param \OpenAPI\Client\Model\ActorDto|null $dpo dpo
     *
     * @return self
     */
    public function setDpo($dpo)
    {
        $this->container['dpo'] = $dpo;

        return $this;
    }

    /**
     * Gets referent
     *
     * @return \OpenAPI\Client\Model\ActorDto|null
     */
    public function getReferent()
    {
        return $this->container['referent'];
    }

    /**
     * Sets referent
     *
     * @param \OpenAPI\Client\Model\ActorDto|null $referent referent
     *
     * @return self
     */
    public function setReferent($referent)
    {
        $this->container['referent'] = $referent;

        return $this;
    }

    /**
     * Gets representative
     *
     * @return \OpenAPI\Client\Model\ActorDto|null
     */
    public function getRepresentative()
    {
        return $this->container['representative'];
    }

    /**
     * Sets representative
     *
     * @param \OpenAPI\Client\Model\ActorDto|null $representative representative
     *
     * @return self
     */
    public function setRepresentative($representative)
    {
        $this->container['representative'] = $representative;

        return $this;
    }

    /**
     * Gets data_protection_authority
     *
     * @return \OpenAPI\Client\Model\DataProtectionAuthorityDto|null
     */
    public function getDataProtectionAuthority()
    {
        return $this->container['data_protection_authority'];
    }

    /**
     * Sets data_protection_authority
     *
     * @param \OpenAPI\Client\Model\DataProtectionAuthorityDto|null $data_protection_authority data_protection_authority
     *
     * @return self
     */
    public function setDataProtectionAuthority($data_protection_authority)
    {
        $this->container['data_protection_authority'] = $data_protection_authority;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


