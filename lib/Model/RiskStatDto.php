<?php
/**
 * RiskStatDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dastra API
 *
 * Dastra's public REST API
 *
 * The version of the OpenAPI document: v1
 * Contact: antoine.bidault@dastra.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RiskStatDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class RiskStatDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RiskStatDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'average_risk' => 'int',
        'max_risk' => 'double',
        'risks' => '\OpenAPI\Client\Model\RiskDto[]',
        'heatmap_data' => '\OpenAPI\Client\Model\RiskHeatmapValue[]',
        'nb_risks' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'average_risk' => 'int32',
        'max_risk' => 'double',
        'risks' => null,
        'heatmap_data' => null,
        'nb_risks' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'average_risk' => 'averageRisk',
        'max_risk' => 'maxRisk',
        'risks' => 'risks',
        'heatmap_data' => 'heatmapData',
        'nb_risks' => 'nbRisks'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'average_risk' => 'setAverageRisk',
        'max_risk' => 'setMaxRisk',
        'risks' => 'setRisks',
        'heatmap_data' => 'setHeatmapData',
        'nb_risks' => 'setNbRisks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'average_risk' => 'getAverageRisk',
        'max_risk' => 'getMaxRisk',
        'risks' => 'getRisks',
        'heatmap_data' => 'getHeatmapData',
        'nb_risks' => 'getNbRisks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['average_risk'] = $data['average_risk'] ?? null;
        $this->container['max_risk'] = $data['max_risk'] ?? null;
        $this->container['risks'] = $data['risks'] ?? null;
        $this->container['heatmap_data'] = $data['heatmap_data'] ?? null;
        $this->container['nb_risks'] = $data['nb_risks'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets average_risk
     *
     * @return int|null
     */
    public function getAverageRisk()
    {
        return $this->container['average_risk'];
    }

    /**
     * Sets average_risk
     *
     * @param int|null $average_risk average_risk
     *
     * @return self
     */
    public function setAverageRisk($average_risk)
    {
        $this->container['average_risk'] = $average_risk;

        return $this;
    }

    /**
     * Gets max_risk
     *
     * @return double|null
     */
    public function getMaxRisk()
    {
        return $this->container['max_risk'];
    }

    /**
     * Sets max_risk
     *
     * @param double|null $max_risk max_risk
     *
     * @return self
     */
    public function setMaxRisk($max_risk)
    {
        $this->container['max_risk'] = $max_risk;

        return $this;
    }

    /**
     * Gets risks
     *
     * @return \OpenAPI\Client\Model\RiskDto[]|null
     */
    public function getRisks()
    {
        return $this->container['risks'];
    }

    /**
     * Sets risks
     *
     * @param \OpenAPI\Client\Model\RiskDto[]|null $risks List of processing with higher risks
     *
     * @return self
     */
    public function setRisks($risks)
    {
        $this->container['risks'] = $risks;

        return $this;
    }

    /**
     * Gets heatmap_data
     *
     * @return \OpenAPI\Client\Model\RiskHeatmapValue[]|null
     */
    public function getHeatmapData()
    {
        return $this->container['heatmap_data'];
    }

    /**
     * Sets heatmap_data
     *
     * @param \OpenAPI\Client\Model\RiskHeatmapValue[]|null $heatmap_data heatmap_data
     *
     * @return self
     */
    public function setHeatmapData($heatmap_data)
    {
        $this->container['heatmap_data'] = $heatmap_data;

        return $this;
    }

    /**
     * Gets nb_risks
     *
     * @return int|null
     */
    public function getNbRisks()
    {
        return $this->container['nb_risks'];
    }

    /**
     * Sets nb_risks
     *
     * @param int|null $nb_risks nb_risks
     *
     * @return self
     */
    public function setNbRisks($nb_risks)
    {
        $this->container['nb_risks'] = $nb_risks;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


